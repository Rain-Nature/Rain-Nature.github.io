<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>项目01-尚庭公寓后端项目</title>
      <link href="/2025/07/09/%E9%A1%B9%E7%9B%AE01-%E5%B0%9A%E5%BA%AD%E5%85%AC%E5%AF%93%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
      <url>/2025/07/09/%E9%A1%B9%E7%9B%AE01-%E5%B0%9A%E5%BA%AD%E5%85%AC%E5%AF%93%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、后台管理系统后端业务逻辑"><a href="#一、后台管理系统后端业务逻辑" class="headerlink" title="一、后台管理系统后端业务逻辑"></a>一、后台管理系统后端业务逻辑</h1><h3 id="1-pom-xml文件中-lt-properties-gt-的作用"><a href="#1-pom-xml文件中-lt-properties-gt-的作用" class="headerlink" title="1. pom.xml文件中&lt;properties&gt; 的作用"></a>1. pom.xml文件中<code>&lt;properties&gt;</code> 的作用</h3><p>​    <code>&lt;properties&gt;</code> 是 Maven <code>POM</code> 文件中的一个 <strong>标准元素</strong>，用于定义项目中可以复用的 <strong>变量</strong>。这些变量在 <code>pom.xml</code> 的其他地方可以通过 <code>$&#123;变量名&#125;</code> 的形式引用</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>$&#123;java.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>$&#123;java.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-pom-xml文件中-lt-dependencyManagement-gt-的作用"><a href="#2-pom-xml文件中-lt-dependencyManagement-gt-的作用" class="headerlink" title="2. pom.xml文件中&lt;dependencyManagement&gt; 的作用"></a>2. pom.xml文件中<code>&lt;dependencyManagement&gt;</code> 的作用</h3><p>​    <code>&lt;dependencyManagement&gt;</code>是maven用于统一管理依赖版本，只声明依赖版本，而不对依赖引入到项目中，如果maven仓库中没有这些声明的依赖，则会爆红，但是没有影响</p><h3 id="3-枚举类与数据库字段自动映射"><a href="#3-枚举类与数据库字段自动映射" class="headerlink" title="3. 枚举类与数据库字段自动映射"></a>3. 枚举类与数据库字段自动映射</h3><p>​    使用MybatisPlus实现枚举类-ENUM与数据库表的INT字段映射</p><p>​    注意：<strong>MyBatis-Plus 从 3.1.2 开始，已经支持普通枚举的自动映射</strong>，<strong>不强制实现 <code>IEnum&lt;T&gt;</code> 接口</strong></p><h4 id="1-步骤"><a href="#1-步骤" class="headerlink" title="(1)步骤"></a>(1)步骤</h4><h5 id="枚举类的定义"><a href="#枚举类的定义" class="headerlink" title="枚举类的定义"></a>枚举类的定义</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Status</span> <span class="token punctuation">&#123;</span>    <span class="token function">CANCEL</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"已取消"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WAIT_PAY</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"待支付"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WAIT_TRANSFER</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"待发货"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WAIT_RECEIPT</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"待收货"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">RECEIVE</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"已收货"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">COMPLETE</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"已完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>    <span class="token class-name">Status</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//只要你定义了getValue() 方法，它就会自动拿这个方法的返回值作为数据库要存的值</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token comment">// 用于数据库存储</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="实体类中使用枚举"><a href="#实体类中使用枚举" class="headerlink" title="实体类中使用枚举"></a>实体类中使用枚举</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Status</span> status<span class="token punctuation">;</span>  <span class="token comment">//注意这里用的是枚举类型</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h5><p>​     数据库中 <code>status</code> 字段类型通常为 <code>TINYINT</code> 或 <code>INT</code>，直接存储枚举中的 <code>value</code> 整数值，例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">order</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="插入和查询示例代码"><a href="#插入和查询示例代码" class="headerlink" title="插入和查询示例代码"></a>插入和查询示例代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>order<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Status</span><span class="token punctuation">.</span>WAIT_PAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入</span>orderMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查询时会自动映射为枚举</span><span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 WAIT_PAY</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="2-MyBatis-Plus-识别枚举的原理"><a href="#2-MyBatis-Plus-识别枚举的原理" class="headerlink" title="(2)MyBatis-Plus 识别枚举的原理"></a>(2)MyBatis-Plus 识别枚举的原理</h4><p>​    MyBatis-Plus 会自动识别实体类中出现的枚举，并使用 <strong><code>name()</code></strong> 或枚举字段（如 <code>value()</code>）进行映射。</p><p>​    只要枚举类中有构造函数和 getter 方法，就能自动使用，无需额外实现接口。</p><h4 id="3-Spring的yml文件配置-type-enums-package"><a href="#3-Spring的yml文件配置-type-enums-package" class="headerlink" title="(3)Spring的yml文件配置 type-enums-package"></a>(3)Spring的yml文件配置 <code>type-enums-package</code></h4><p>​    推荐，但不是必须</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> com.rain.lease.enums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="建议配置的原因："><a href="#建议配置的原因：" class="headerlink" title="建议配置的原因："></a>建议配置的原因：</h5><ul><li>枚举类不出现在实体字段中时，也能被识别；</li><li>大型项目更健壮；</li><li>多人协作开发更清晰。</li></ul><h3 id="4-Java的Serializable接口详解"><a href="#4-Java的Serializable接口详解" class="headerlink" title="4. Java的Serializable接口详解"></a>4. Java的Serializable接口详解</h3><p>​    <code>Serializable</code> 是 Java 提供的一个 标记接口（Marker Interface），位于 java.io包中。它的作用是 标记某个类的对象可以被“序列化”，也就是将对象转化为字节流，便于存储或网络传输。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 没有任何方法，是一个标记接口</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-Serializable的使用"><a href="#1-Serializable的使用" class="headerlink" title="(1)Serializable的使用"></a>(1)Serializable的使用</h4><p>​    该类编译后会生成User.class和User.txt用于序列化和反序列化，其中都包含序列号，<code>class文件不要重新计算序列号</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//指定序列号，不写的话类结构一改，自动 UID 就变，反序列化失败，可以防止反序列化时报错</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    建议实体类（如 POJO）默认都实现 <code>Serializable</code>，以兼容多种使用场景</p><p>​    建议指定序列号，自动序列号是通过字段修饰符等计算出的数字，当类字段等结构发生变化，则序列号也会变化</p><p>​    若是继承了某个类，这个序列号要写在子类里面，不要写在父类</p><p>​    不实现该接口，则在需要序列化的场景下（如使用 <code>RedisTemplate</code> 默认的 JDK 序列化），会抛出如下异常：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">java.io.NotSerializableException: com.example.User<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-Serializable与Redis"><a href="#2-Serializable与Redis" class="headerlink" title="(2)Serializable与Redis"></a>(2)Serializable与Redis</h4><p>​    在使用 RedisTemplate时：</p><ul><li>默认使用 JDK 的序列化方式，需要对象实现 Serializable</li><li>如果使用 JSON 序列化（如 Jackson2），可以不实现 Serializable，但建议保留兼容性</li></ul><h5 id="配置-Jackson-序列化示例（Spring-Boot）"><a href="#配置-Jackson-序列化示例（Spring-Boot）" class="headerlink" title="配置 Jackson 序列化示例（Spring Boot）"></a>配置 Jackson 序列化示例（Spring Boot）</h5><p>​    Spring Boot 确实会自动配置一个 <code>RedisTemplate&lt;String, Object&gt;</code> 实例，但这个默认的 <code>RedisTemplate</code> 并没有设置 JSON 序列化器，而是使用的 JDK 默认的二进制序列化方式，这种方式有以下几个缺点：</p><ul><li>序列化后的内容可读性差（是乱码，调试困难）</li><li>不兼容非 Java 应用（如前端、其他语言的服务）</li><li>可移植性差，不利于跨系统迁移</li><li>安全性较低，存在反序列化风险</li></ul><p>因此，大多数项目都会手动定义一个带有 Jackson JSON 序列化器的 <code>RedisTemplate</code>，以实现更合理、更可控的数据格式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//配置在RedisConfig中</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    template<span class="token punctuation">.</span><span class="token function">setDefaultSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> template<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-vo层（View-Object）"><a href="#5-vo层（View-Object）" class="headerlink" title="5. vo层（View Object）"></a>5. vo层（View Object）</h3><p>​    继承实体类并给实体类增加一些属性</p><p>​    这个是和Contoller放一个模块的，实体类是单独模块，vo主要用于匹配前端传输的字段，相对于实体类可多可少，但是在执行插入、修改时，需要对vo解构赋值到实体类，然后进行保存操作</p><h3 id="6-枚举类的定义"><a href="#6-枚举类的定义" class="headerlink" title="6. 枚举类的定义"></a>6. 枚举类的定义</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用enum关键字，Java5以上</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Status</span> <span class="token punctuation">&#123;</span><span class="token comment">//1.对象不用new，直接定义并传值，多个对象用,隔开</span>    <span class="token function">OK</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"操作成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ERROR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"操作失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.声明对象的属性，必须用private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span><span class="token comment">//3.设置私有化构造器，因为必须为private所以可以省略private关键字</span>    <span class="token class-name">Status</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token number">4.</span>提供属性的get方法    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-枚举与全局同一返回结果类的编写"><a href="#7-枚举与全局同一返回结果类的编写" class="headerlink" title="7. 枚举与全局同一返回结果类的编写"></a>7. 枚举与全局同一返回结果类的编写</h3><p><code>枚举类ResultCodeEnum.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//4.提供属性的get方法</span><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ResultCodeEnum</span> <span class="token punctuation">&#123;</span><span class="token comment">//1.对象不用new，直接定义并传值，多个对象用,隔开</span>    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FAIL</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">,</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PARAM_ERROR</span><span class="token punctuation">(</span><span class="token number">202</span><span class="token punctuation">,</span> <span class="token string">"参数不正确"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SERVICE_ERROR</span><span class="token punctuation">(</span><span class="token number">203</span><span class="token punctuation">,</span> <span class="token string">"服务异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DATA_ERROR</span><span class="token punctuation">(</span><span class="token number">204</span><span class="token punctuation">,</span> <span class="token string">"数据异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ILLEGAL_REQUEST</span><span class="token punctuation">(</span><span class="token number">205</span><span class="token punctuation">,</span> <span class="token string">"非法请求"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">REPEAT_SUBMIT</span><span class="token punctuation">(</span><span class="token number">206</span><span class="token punctuation">,</span> <span class="token string">"重复提交"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DELETE_ERROR</span><span class="token punctuation">(</span><span class="token number">207</span><span class="token punctuation">,</span> <span class="token string">"请先删除子集"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ADMIN_ACCOUNT_EXIST_ERROR</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token string">"账号已存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ADMIN_CAPTCHA_CODE_ERROR</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">,</span> <span class="token string">"验证码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ADMIN_CAPTCHA_CODE_EXPIRED</span><span class="token punctuation">(</span><span class="token number">303</span><span class="token punctuation">,</span> <span class="token string">"验证码已过期"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ADMIN_CAPTCHA_CODE_NOT_FOUND</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">,</span> <span class="token string">"未输入验证码"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ADMIN_LOGIN_AUTH</span><span class="token punctuation">(</span><span class="token number">305</span><span class="token punctuation">,</span> <span class="token string">"未登陆"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ADMIN_ACCOUNT_NOT_EXIST_ERROR</span><span class="token punctuation">(</span><span class="token number">306</span><span class="token punctuation">,</span> <span class="token string">"账号不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ADMIN_ACCOUNT_ERROR</span><span class="token punctuation">(</span><span class="token number">307</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ADMIN_ACCOUNT_DISABLED_ERROR</span><span class="token punctuation">(</span><span class="token number">308</span><span class="token punctuation">,</span> <span class="token string">"该用户已被禁用"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ADMIN_ACCESS_FORBIDDEN</span><span class="token punctuation">(</span><span class="token number">309</span><span class="token punctuation">,</span> <span class="token string">"无访问权限"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">APP_LOGIN_AUTH</span><span class="token punctuation">(</span><span class="token number">501</span><span class="token punctuation">,</span> <span class="token string">"未登陆"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">APP_LOGIN_PHONE_EMPTY</span><span class="token punctuation">(</span><span class="token number">502</span><span class="token punctuation">,</span> <span class="token string">"手机号码为空"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">APP_LOGIN_CODE_EMPTY</span><span class="token punctuation">(</span><span class="token number">503</span><span class="token punctuation">,</span> <span class="token string">"验证码为空"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">APP_SEND_SMS_TOO_OFTEN</span><span class="token punctuation">(</span><span class="token number">504</span><span class="token punctuation">,</span> <span class="token string">"验证法发送过于频繁"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">APP_LOGIN_CODE_EXPIRED</span><span class="token punctuation">(</span><span class="token number">505</span><span class="token punctuation">,</span> <span class="token string">"验证码已过期"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">APP_LOGIN_CODE_ERROR</span><span class="token punctuation">(</span><span class="token number">506</span><span class="token punctuation">,</span> <span class="token string">"验证码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">APP_ACCOUNT_DISABLED_ERROR</span><span class="token punctuation">(</span><span class="token number">507</span><span class="token punctuation">,</span> <span class="token string">"该用户已被禁用"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">TOKEN_EXPIRED</span><span class="token punctuation">(</span><span class="token number">601</span><span class="token punctuation">,</span> <span class="token string">"token过期"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">TOKEN_INVALID</span><span class="token punctuation">(</span><span class="token number">602</span><span class="token punctuation">,</span> <span class="token string">"token非法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.声明对象的属性，必须用private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span><span class="token comment">//3.设置私有化构造器，因为必须为private所以可以省略private关键字</span>    <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>返回结果类Result</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//返回码</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token comment">//返回消息</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token comment">//返回数据</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//第一个&lt;T>是标识这是泛型，返回值是Result&lt;T>，该方法是在造一个Result&lt;T>的盒子装data，这个被同名public的调用</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//通过该方法把data，code，msg全包装到Result中，外部：细化调用，内部调用见下面三ge</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">T</span> body<span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span> resultCodeEnum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//SUCCESS时给前端传data，即成功有数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//这里可以直接写ok，写Result.ok是方便读取，即成功无数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//FAIL时传数据给前端，即失败无数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span>FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-JsonIgnore注解"><a href="#8-JsonIgnore注解" class="headerlink" title="8.@JsonIgnore注解"></a>8.@JsonIgnore注解</h3><p>​    <code>@JsonIgnore</code>写在属性上，标识该属性在进行Json序列化（Java-&gt;Json）或反序列化时，被忽略。<code>它是 Jackson提供的注解</code>。其可以保证标注的字段前端访问不到也修改不了（json传输时）</p><h4 id="1-使用方式"><a href="#1-使用方式" class="headerlink" title="(1)使用方式"></a>(1)使用方式</h4><p>​    1.需要在pom.xml中导包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.实体类中对字段使用该方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonIgnore</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.转字符串（这里不使用web环境，而是直接转Json用于演示）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123;"username":"alice"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：user里面仍然是含有username和password的</strong></p><h3 id="9-MybatisPlus对实体类通用字段的自动填充"><a href="#9-MybatisPlus对实体类通用字段的自动填充" class="headerlink" title="9. MybatisPlus对实体类通用字段的自动填充"></a>9. MybatisPlus对实体类通用字段的自动填充</h3><p>​    保存或更新数据时，前端通常不会传入<code>isDeleted</code>、<code>createTime</code>、<code>updateTime</code>这三个字段，因此我们需要手动赋值。但是数据库中几乎每张表都有上述字段，所以手动去赋值就显得有些繁琐。为简化上述操作，我们可采取以下措施</p><ul><li><p><code>is_deleted</code>字段：可将数据库中该字段的默认值设置为0</p></li><li><p><code>create_time</code>和<code>update_time</code>：可<code>使用mybatis-plus的自动填充功能</code>，所谓自动填充，就是通过统一配置，在插入或更新数据时，自动为某些字段赋值，具体配置如下，详细信息可参考[官方文档](<a href="https://baomidou.com/guides/auto-fill-field/#_top">自动填充字段 | MyBatis-Plus</a>)</p><ul><li><p>为相关字段配置触发填充的时机，例如<code>create_time</code>需要在插入数据时填充，而<code>update_time</code>需要在更新数据时填充。具体配置如下，观察<code>@TableField</code>注解中的<code>fill</code>属性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//所有实体类都继承该类</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"主键"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"创建时间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"create_time"</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"更新时间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"update_time"</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"逻辑删除"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token annotation punctuation">@TableLogic</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"is_deleted"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Byte</span> isDeleted<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置自动填充的内容，具体配置如下</p><p>在<strong>common模块</strong>下创建<code>com.atguigu.lease.common.mybatisplus.MybatisMetaObjectHandler</code>类，内容如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这个"createTime"要与实体类的名称一致</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictInsertFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">//这个"updateTime"要与实体类的名称一致</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictUpdateFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span> <span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在做完上述配置后，当写入数据时，Mybatis-Plus会自动将实体对象的<code>create_time</code>字段填充为当前时间，当更新数据时，则会自动将实体对象的<code>update_time</code>字段填充为当前时间</p></li></ul></li></ul><h3 id="10-类型转化问题（自定义枚举类在三层传递）"><a href="#10-类型转化问题（自定义枚举类在三层传递）" class="headerlink" title="10. 类型转化问题（自定义枚举类在三层传递）"></a>10. 类型转化问题（自定义枚举类在三层传递）</h3><p>​    <code>LabelController</code>内容如下，其中参数type是自定义枚举类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"（根据类型）查询标签列表"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">LabelInfo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">labelList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">ItemType</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LabelInfo</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>type <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">LabelInfo</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LabelInfo</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-各层的type对应的类型"><a href="#1-各层的type对应的类型" class="headerlink" title="(1)各层的type对应的类型"></a>(1)各层的type对应的类型</h4><p>​    上述接口的功能是根据<strong>type</strong>（公寓/房间），查询标签列表。由于这个<strong>type</strong>字段在数据库、实体类、前后端交互的过程中有多种不同的形式，因此在请求和响应的过程中，<strong>type</strong>字段会涉及到多次类型转换</p><p>​    首先明确一下<strong>type</strong>字段的各种形式：</p><ul><li><p><strong>数据库中</strong></p><p>数据库中的<strong>type</strong>字段为<code>tinyint</code>类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">+</span><span class="token comment">-------------+--------------+</span><span class="token operator">|</span> Field       <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+--------------+</span><span class="token operator">|</span> id          <span class="token operator">|</span> <span class="token keyword">bigint</span>       <span class="token operator">|</span><span class="token operator">|</span> <span class="token keyword">type</span>        <span class="token operator">|</span> <span class="token keyword">tinyint</span>      <span class="token operator">|</span><span class="token operator">|</span> name        <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span> create_time <span class="token operator">|</span> <span class="token keyword">timestamp</span>    <span class="token operator">|</span><span class="token operator">|</span> update_time <span class="token operator">|</span> <span class="token keyword">timestamp</span>    <span class="token operator">|</span><span class="token operator">|</span> is_deleted  <span class="token operator">|</span> <span class="token keyword">tinyint</span>      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+--------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>实体类</strong></p><p>实体类中的<strong>type</strong>字段为<code>ItemType</code>枚举类型</p><p><code>LabelInfo</code>实体类如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"标签信息表"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"label_info"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LabelInfo</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"类型"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"type"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">ItemType</span> type<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"标签名称"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ItemType</code>枚举类如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ItemType</span> <span class="token keyword">implements</span> <span class="token class-name">BaseEnum</span> <span class="token punctuation">&#123;</span>    <span class="token function">APARTMENT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"公寓"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ROOM</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"房间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">ItemType</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>前后端交互中</strong></p><p>前后端交互所传递的数据中<strong>type</strong>字段为（1、2），是String类型</p><p><a href="https://imgse.com/i/pVp7GtA"><img src="https://s21.ax1x.com/2025/05/29/pVp7GtA.png" alt="前端请求"></a></p></li></ul><h4 id="2-数据类型的转化流程"><a href="#2-数据类型的转化流程" class="headerlink" title="(2)数据类型的转化流程"></a>(2)数据类型的转化流程</h4><p>​    具体转换过程如下图所示：</p><ul><li><p><strong>请求流程</strong></p><p><a href="https://imgse.com/i/pVp7JfI"><img src="https://s21.ax1x.com/2025/05/29/pVp7JfI.png" alt="枚举类型转换过程-请求参数"></a></p><p><strong>说明</strong></p><ul><li>SpringMVC中的<code>WebDataBinder</code>组件负责将HTTP的请求参数绑定到Controller方法的参数，并实现参数类型的转换。</li><li>Mybatis中的<code>TypeHandler</code>用于处理Java中的实体对象与数据库之间的数据类型转换。</li></ul></li><li><p><strong>响应流程</strong></p><p><a href="https://imgse.com/i/pVp7tpt"><img src="https://s21.ax1x.com/2025/05/29/pVp7tpt.png" alt="枚举类型转换过程-响应体"></a></p><p><strong>说明</strong></p><ul><li>SpringMVC中的<code>HTTPMessageConverter</code>组件负责将Controller方法的返回值（Java对象）转换为HTTP响应体中的JSON字符串，或者将请求体中的JSON字符串转换为Controller方法中的参数（Java对象），例如下一个接口<strong>保存或更新标签信息</strong></li></ul></li><li><p><strong>请求流程（转Java对象）</strong><br> <a href="https://imgse.com/i/pVp7N1P"><img src="https://s21.ax1x.com/2025/05/29/pVp7N1P.png" alt="枚举类型转换过程-请求体"></a></p></li></ul><p>下面介绍一下每个环节的类型转换原理</p><h4 id="3-WebDataBinder-单枚举类的类型转化"><a href="#3-WebDataBinder-单枚举类的类型转化" class="headerlink" title="(3)WebDataBinder-单枚举类的类型转化"></a>(3)WebDataBinder-单枚举类的类型转化</h4><ul><li><p><strong>WebDataBinder枚举类型转换</strong></p><p><code>WebDataBinder</code>依赖于<a href="https://docs.spring.io/spring-framework/reference/core/validation/convert.html"><code>Converter</code></a>实现类型转换，若Controller方法声明的<code>@RequestParam</code>参数的类型不是<code>String</code>，<code>WebDataBinder</code>就会自动进行数据类型转换。SpringMVC提供了常用类型的转换器，例如<code>String</code>到<code>Integer</code>、<code>String</code>到<code>Date</code>，<code>String</code>到<code>Boolean</code>等等，其中也包括<code>String</code>到枚举类型，但是<code>String</code>到枚举类型的默认转换规则是根据实例名称（”APARTMENT”）转换为枚举对象实例（ItemType.APARTMENT）。若想实现<code>code</code>属性到枚举对象实例的转换，需要自定义<code>Converter</code>，代码如下，具体内容可参考<a href="https://docs.spring.io/spring-framework/reference/core/validation/convert.html#core-convert-Converter-API">官方文档</a>。</p><ul><li><p>在<strong>web-admin模块</strong>自定义<code>com.rain.lease.web.admin.custom.converter.StringToItemTypeConverter</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//导这个包，别导错</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">Converter</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToItemTypeConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ItemType</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ItemType</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ItemType</span> value <span class="token operator">:</span> <span class="token class-name">ItemType</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"code非法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注册上述的<code>StringToItemTypeConverter</code>，在<strong>web-admin模块</strong>创建<code>com.rain.lease.web.admin.custom.config.WebMvcConfiguration</code>，内容如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringToItemTypeConverter</span> stringToItemTypeConverter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//this可省，这是官网的</span>        registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stringToItemTypeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="4-WebDataBinder-多枚举类的类型集中转化"><a href="#4-WebDataBinder-多枚举类的类型集中转化" class="headerlink" title="(4)WebDataBinder-多枚举类的类型集中转化"></a>(4)WebDataBinder-多枚举类的类型集中转化</h4><p>  ​    但是我们有很多的枚举类型都需要考虑类型转换这个问题，按照上述思路，我们需要为每个枚举类型都定义一个Converter，并且每个Converter的转换逻辑都完全相同，针对这种情况，我们使用<a href="https://docs.spring.io/spring-framework/reference/core/validation/convert.html#core-convert-ConverterFactory-SPI"><code>ConverterFactory</code></a>接口（集中转化一系列类的转化逻辑），这个接口可以将同一个转换逻辑应用到一个接口（父类）的所有实现类（子类），接口定义通用的“行为规范”，如：<code>getCode()</code> 和 <code>getName()</code>。每个实现了该接口的枚举都必须重写这两个方法，<strong>即便字段不写在接口里</strong>，只要能通过接口的方法访问到就行，转换工厂只需要调用 <code>enumConstant.getCode()</code> 去拿值，根本不关心字段是不是在接口里，只要实现类能正确响应方法即可</p><p>  ​    因此我们可以定义一个<code>BaseEnum</code>接口，然后另所有的枚举类都实现该接口，然后就可以自定义<code>ConverterFactory</code>，集中编写各枚举类的转换逻辑了。具体实现如下：</p><ul><li><p>在<strong>model模块</strong>定义<code>com.rain.lease.model.enums.BaseEnum</code>接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BaseEnum</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>令所有<code>com.rain.lease.model.enums</code>包下的枚举类都实现<code>BaseEnun</code>接口</p></li><li><p>在<strong>web-admin模块</strong>自定义<code>com.atguigu.lease.web.admin.custom.converter.StringToBaseEnumConverterFactory</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToBaseEnumConverterFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ConverterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BaseEnum</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">//参数是目标类型的class对象</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEnum</span><span class="token punctuation">></span></span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getConverter</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> targetType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//拿到目标类型的全部枚举实例</span>                <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> enumConstants <span class="token operator">=</span> targetType<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> enumConstant <span class="token operator">:</span> enumConstants<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>enumConstant<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> enumConstant<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>source<span class="token operator">+</span><span class="token string">"非法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注册上述的<code>ConverterFactory</code>，在<strong>web-admin模块</strong>创建<code>com.rain.lease.web.admin.custom.config.WebMvcConfiguration</code>，内容如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringToBaseEnumConverterFactory</span> stringToBaseEnumConverterFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stringToBaseEnumConverterFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>最终采用的是<code>ConverterFactory</code>方案，因此<code>StringToItemTypeConverter</code>相关代码可以直接删除。</p></li></ul><h4 id="5-TypeHandle对枚举类的类型转换-EnumValue"><a href="#5-TypeHandle对枚举类的类型转换-EnumValue" class="headerlink" title="(5)TypeHandle对枚举类的类型转换-@EnumValue"></a>(5)TypeHandle对枚举类的类型转换-@EnumValue</h4><ul><li><p><strong>TypeHandler枚举类型转换</strong></p><p>Mybatis预置的<code>TypeHandler</code>可以处理常用的数据类型转换，例如<code>String</code>、<code>Integer</code>、<code>Date</code>等等，其中也包含枚举类型，但是枚举类型的默认转换规则是枚举对象实例（ItemType.APARTMENT）和实例名称（”APARTMENT”）相互映射。若想实现<code>code</code>属性到枚举对象实例的相互映射，需要自定义<code>TypeHandler</code>。</p><p>不过MybatisPlus提供了一个<a href="https://baomidou.com/pages/8390a4/">通用的处理枚举类型的TypeHandler</a>。其使用十分简单，只需在<code>ItemType</code>枚举类的<code>code</code>属性上增加一个注解<code>@EnumValue</code>，Mybatis-Plus便可完成从<code>ItemType</code>对象到<code>code</code>属性之间的相互映射，具体配置如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ItemType</span> <span class="token punctuation">&#123;</span>    <span class="token function">APARTMENT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"公寓"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ROOM</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"房间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@EnumValue</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">ItemType</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-HTTPMessageConverter丢枚举类的类型转换"><a href="#6-HTTPMessageConverter丢枚举类的类型转换" class="headerlink" title="(6)HTTPMessageConverter丢枚举类的类型转换"></a>(6)HTTPMessageConverter丢枚举类的类型转换</h4><ul><li><p><strong>HTTPMessageConverter枚举类型转换</strong></p><p><code>HttpMessageConverter</code>依赖于Json序列化框架（默认使用Jackson）。其对枚举类型的默认处理规则也是枚举对象实例（ItemType.APARTMENT）和实例名称（”APARTMENT”）相互映射。不过其提供了一个注解<code>@JsonValue</code>，同样只需在<code>ItemType</code>枚举类的<code>code</code>属性上增加一个注解<code>@JsonValue</code>，Jackson便可完成从<code>ItemType</code>对象到<code>code</code>属性之间的互相映射。具体配置如下，详细信息可参考Jackson<a href="https://fasterxml.github.io/jackson-annotations/javadoc/2.8/com/fasterxml/jackson/annotation/JsonValue.html">官方文档</a>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ItemType</span> <span class="token punctuation">&#123;</span>    <span class="token function">APARTMENT</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"公寓"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ROOM</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"房间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@EnumValue</span>  <span class="token annotation punctuation">@JsonValue</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">ItemType</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="11-多表联查-房间基本信息管理"><a href="#11-多表联查-房间基本信息管理" class="headerlink" title="11. 多表联查-房间基本信息管理"></a>11. 多表联查-房间基本信息管理</h3><p>​    需求：<strong>保存或更新属性名称</strong>、<strong>保存或更新属性值</strong>、<strong>查询全部属性名称和属性值列表</strong>、<strong>根据ID删除属性名称</strong>、<strong>根据ID删除属性值</strong></p><p>​    表结构：最左的是和房间表互连的可以不用关注</p><p><a href="https://imgse.com/i/pV92rcQ"><img src="https://s21.ax1x.com/2025/06/01/pV92rcQ.png" alt="表结构"></a></p><p>​    <code>写Controller的话，只需要一个controller，但是导入的service需要把这两个表的service都导入</code></p><h4 id="1-新增与更新操作"><a href="#1-新增与更新操作" class="headerlink" title="(1)新增与更新操作"></a>(1)新增与更新操作</h4><p>​    对于两表的新增操作，不需要管怎么连的，直接对表新增就行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//属性名称新增</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"保存或更新属性名称"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"key/saveOrUpdate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">saveOrUpdateAttrKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AttrKey</span> attrKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    attrKeyService<span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>attrKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//属性值新增</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"保存或更新属性值"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"value/saveOrUpdate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">saveOrUpdateAttrValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">AttrValue</span> attrValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    attrValueService<span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>attrValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-查询全部属性名称和属性值列表"><a href="#2-查询全部属性名称和属性值列表" class="headerlink" title="(2)查询全部属性名称和属性值列表"></a>(2)查询全部属性名称和属性值列表</h4><p>​    两表联查返回值，应该设计为某一表的vo类型，另一张表以集合的形式存入vo中，在本案例中应当以属性名称作为vo，里面设计属性值的</p><p>​    对于连表查询MybatisPlus不提供基本查询mapper，所以需要自己去写</p><p>​    编写逻辑：controller中传service调用方法，用idea生成该方法的service和serviceImpl，再在serviceImpl中调用mapper，编写这个mapper的新方法，再用idea生成这个方法的xml文件，在xml编写查询sql</p><p>​    AttrKeyMapper.xml如下：<code>注意里面注释</code>，首先编写sql，查询出数据后因为没有和vo能匹配，所以编写resultMap组装映射，这个不是分页查询，仅仅查出所有</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.admin.mapper.AttrKeyMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AttrketVoMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.admin.vo.attr.AttrKeyVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    column不能出现xx.xx的格式，全部都是用xx，否则识别不了前端值为null--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 这里property对应AttrKeyVo的attrValueList，ofType对应这个list每个item的全限定类名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attrValueList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.model.entity.AttrValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attr_value_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attr_value_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attr_key_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attrKeyId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    ON 是“配对用”，WHERE 是“筛选用”--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AttrketVoMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> //如果字段可以直接和类属性映射的，加autoMapping="true"实现自动映射，但id不能省id必须亲自映射，否则映射的不是1：n，而是1：1有n个#       这里必须起别名不然映射不了，前端看数据全是null        select k.id,               k.name,               v.id attr_value_id,               v.name attr_value_name,               v.attr_key_id        from attr_key k                 left join attr_value v on k.id = v.attr_key_id and v.is_deleted = 0        where k.is_deleted = 0    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    AttrKeyVo内容如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttrKeyVo</span> <span class="token keyword">extends</span> <span class="token class-name">AttrKey</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"属性value列表"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrValue</span><span class="token punctuation">></span></span> attrValueList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-删除操作"><a href="#3-删除操作" class="headerlink" title="(3)删除操作"></a>(3)删除操作</h4><h5 id="删除key"><a href="#删除key" class="headerlink" title="删除key"></a>删除key</h5><p>​    这里我是先删从表再删主表，视频是先删主后删从，再没有指定外键是无所谓的，有外键我的更好</p><p>​    逻辑：删除key时，从表value也要一起删除</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"key/deleteById"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">removeAttrKeyById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> attrKeyId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrValue</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">AttrValue</span><span class="token operator">::</span><span class="token function">getAttrKeyId</span><span class="token punctuation">,</span> attrKeyId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注意：这句不会触发updateTime自动更新，要更新需要使用update(entity, queryWrapper)</span>    attrValueService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    attrKeyService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>attrKeyId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除value"><a href="#删除value" class="headerlink" title="删除value"></a>删除value</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"value/deleteById"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">removeAttrValueById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    attrValueService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-省、市、县"><a href="#12-省、市、县" class="headerlink" title="12. 省、市、县"></a>12. 省、市、县</h3><p>​    省表的设计思路：id从11对应北京开始，完全按照地理区域/大区分段编码，11表示：华北-&gt;北京，主要字段包含了id和name字段</p><p>​    市表的设计思路：id从1101开始，11对应省表，01为第一个市，主要字段包含了id、name和province_id</p><p>​    县表的设计思路：id从110101开始，11对应省标，01对应市表，01为第一个区/县，主要字段包含id、name、city_id</p><p>​    该类型接口只需要设计查询，因为数据是在建库时导入进去的，查询的controller如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"地区信息管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin/region"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegionInfoController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">ProvinceInfoService</span> provinceInfoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">CityInfoService</span> cityInfoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">DistrictInfoService</span> districtInfoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"查询省份信息列表"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"province/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">ProvinceInfo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listProvince</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProvinceInfo</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> provinceInfoService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"根据省份id查询城市信息列表"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"city/listByProvinceId"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">CityInfo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listCityInfoByProvinceId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CityInfo</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CityInfo</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">CityInfo</span><span class="token operator">::</span><span class="token function">getProvinceId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CityInfo</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> cityInfoService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"district/listByCityId"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"根据城市id查询区县信息"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">DistrictInfo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listDistrictInfoByCityId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DistrictInfo</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">DistrictInfo</span><span class="token operator">::</span><span class="token function">getCityId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DistrictInfo</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> districtInfoService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-图片上传功能"><a href="#13-图片上传功能" class="headerlink" title="13.图片上传功能"></a>13.图片上传功能</h3><h4 id="1-图片上传流程"><a href="#1-图片上传流程" class="headerlink" title="(1)图片上传流程"></a>(1)图片上传流程</h4><p>​    <code>当前图片上传功能只包括了1-3步</code></p><p>​    由下图所示：</p><p><a href="https://imgse.com/i/pVPEHnf"><img src="https://s21.ax1x.com/2025/06/03/pVPEHnf.png" alt="图片上传"></a></p><h5 id="问题：（我提出）"><a href="#问题：（我提出）" class="headerlink" title="问题：（我提出）"></a>问题：（我提出）</h5><p>​    上传后就会存入Minio，如果不保存（流程4），那么一直无效图片会存入Minio</p><h5 id="解决思路：（这里不实现）"><a href="#解决思路：（这里不实现）" class="headerlink" title="解决思路：（这里不实现）"></a>解决思路：（这里不实现）</h5><p>​    可以使用Redis缓存，将每一次缓存上来的图片，临时记录（Minio和Redis同时保存），当执行第四步时，校验redis（防图片替换）完成后删除存在Redis的记录。最后通过定时任务通过Redis中内容查找定时清除多余的Minio中的文件</p><pre class="line-numbers language-none"><code class="language-none">          上传图片前端  ───────────────▶  &#x2F;upload&#x2F;temp                        │                        │ ┌──▶ MinIO：保存图片                        │ └──▶ Redis：临时记录前端提交表单  ───────────────▶  &#x2F;house&#x2F;submit                        │                        │ 校验 Redis 中是否存在                        │ 绑定成功后存 MySQL + 清除 Redis定时任务定期清理 Redis 中还没绑定的数据                        ↓                    MinIO 删除多余文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-图片上传接口的MinioClient（获得服务对象）开发（学会关联配置文件）"><a href="#2-图片上传接口的MinioClient（获得服务对象）开发（学会关联配置文件）" class="headerlink" title="(2)图片上传接口的MinioClient（获得服务对象）开发（学会关联配置文件）"></a>(2)图片上传接口的MinioClient（获得服务对象）开发（学会关联配置文件）</h4><h5 id="配置类-java和配置文件-yml关联方式（两种方式）"><a href="#配置类-java和配置文件-yml关联方式（两种方式）" class="headerlink" title="配置类.java和配置文件.yml关联方式（两种方式）"></a>配置类.java和配置文件.yml关联方式（两种方式）</h5><ul><li><p>可以直接使用@Configuration声明配置类+使用@Value读取配置文件</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">//yml<span class="token key atrule">minio</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.10.101<span class="token punctuation">:</span><span class="token number">9000</span>  <span class="token key atrule">access-key</span><span class="token punctuation">:</span> minioadmin//Java（配置类）@Configurationpublic class MinioConfiguration <span class="token punctuation">&#123;</span>    @Value("$<span class="token punctuation">&#123;</span>minio.endpoint<span class="token punctuation">&#125;</span>")    private String endpoint;<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>建立一个Properties类对yml文件映射，然后配置类直接从Properties类中拿到参数</p><ul><li><p>yml配置如下</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">minio</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.10.101<span class="token punctuation">:</span><span class="token number">9000</span>  <span class="token key atrule">access-key</span><span class="token punctuation">:</span> minioadmin  <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> minioadmin  <span class="token key atrule">bucket-name</span><span class="token punctuation">:</span> lease<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建MinioProperties.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span> <span class="token comment">//是用于方便获得该类数据</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"minio"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> endpoint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secretKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>MinioConfiguration.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">MinioProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MinioProperties</span> properties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MinioClient</span> <span class="token function">minioClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">MinioClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getAccessKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="3-关联配置文件注解详解"><a href="#3-关联配置文件注解详解" class="headerlink" title="(3)关联配置文件注解详解"></a>(3)关联配置文件注解详解</h4><h5 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h5><p>​    位置：写在类上面</p><p>​    作用：标识该类是 Spring 的配置类，Spring 会把这个类作为组件放入容器中；类中用 @Bean 注解的方法会注册成容器管理的 Bean</p><h5 id="ConfigurationProperties-prefix-“minio”"><a href="#ConfigurationProperties-prefix-“minio”" class="headerlink" title="@ConfigurationProperties(prefix = “minio”)"></a>@ConfigurationProperties(prefix = “minio”)</h5><p>​    位置：写在类上面</p><p>​    作用：将配置文件（如 application.yml）中以 <code>minio</code> 为前缀的配置绑定到该类的字段上，方便读取配置信息，其不会将类自动放入Spring容器，需配合 @Component 注解或 @EnableConfigurationProperties 显式注册才能成为 Spring 管理的 Bean</p><h5 id="EnableConfigurationProperties-MinioProperties-class"><a href="#EnableConfigurationProperties-MinioProperties-class" class="headerlink" title="@EnableConfigurationProperties(MinioProperties.class)"></a>@EnableConfigurationProperties(MinioProperties.class)</h5><p>​    位置：通常放在配置类（带 @Configuration 的类）上</p><p>​    作用：启用指定的配置类（如 MinioProperties）的 @ConfigurationProperties 功能：确保带 @ConfigurationProperties 的类生效，同时将该带 @ConfigurationProperties 的类注册为 Spring 容器中的 Bean，方便注入和使用</p><h4 id="4-图片上传接口的开发-基于-2"><a href="#4-图片上传接口的开发-基于-2" class="headerlink" title="(4)图片上传接口的开发-基于(2)"></a>(4)图片上传接口的开发-基于(2)</h4><h5 id="浏览器对资源（图片）的操作"><a href="#浏览器对资源（图片）的操作" class="headerlink" title="浏览器对资源（图片）的操作"></a>浏览器对资源（图片）的操作</h5><p>​    浏览器对资源访问的时候，是执行展示还是下载取决于资源的内容类型</p><p>​    按F12，在网络中访问资源进行抓包，查看响应头的Content-Type</p><p>​    对于图片，如果是image/jpeg则是展示，而若为application/octet-stream则是下载</p><h5 id="图片上传接口的实现：看注解梳理，核心在service层"><a href="#图片上传接口的实现：看注解梳理，核心在service层" class="headerlink" title="图片上传接口的实现：看注解梳理，核心在service层"></a>图片上传接口的实现：看注解梳理，核心在service层</h5><p>​    Controller层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FileUploadController.java</span><span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"文件管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin/file"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这个service没有继承MybatisPlus框架</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">FileService</span> fileService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"上传文件"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"upload"</span><span class="token punctuation">)</span>    <span class="token comment">//MultipartFile是spring提供的上传文件的类，该方法返回值是文件的网络url</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> url <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    service层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FileServiceImpl.java</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FileService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MinioClient</span> minioClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MinioProperties</span> properties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.判断桶（文件夹）是否存在，不存在则创建一个</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> minioClient<span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span><span class="token class-name">BucketExistsArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            minioClient<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span><span class="token class-name">MakeBucketArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置桶的访问权限，自己读、写，别人只能读</span>            minioClient<span class="token punctuation">.</span><span class="token function">setBucketPolicy</span><span class="token punctuation">(</span><span class="token class-name">SetBucketPolicyArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token function">createBucketPolicyConfig</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//上传文件名组装：yyyyMMdd/UUID-文件前端上传时的文件名，注意：/前面会生成文件夹</span>        <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.将文件上传到minio,stream方法（参1，stream流；参2，文件大小；参3，分片大小，-1为自动计算），object方法：用于起名</span>        minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">PutObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>                <span class="token comment">//将原先的文件的contentType设置为上传时的文件的contentType，默认是application/octet-stream会导致下载</span>                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.拼接访问的网络url</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> properties<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filename<span class="token punctuation">;</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//配置桶权限的JSON字符串</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">createBucketPolicyConfig</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//默认权限是自己写，所以不用配置，以下配置读权限，%s占位符，用于指定bucketName</span>        <span class="token keyword">return</span> <span class="token triple-quoted-string string">"""                &#123;                  "Statement" : [ &#123;                    "Action" : "s3:GetObject",                    "Effect" : "Allow",                    "Principal" : "*",                    "Resource" : "arn:aws:s3:::%s/*"                  &#125; ],                  "Version" : "2012-10-17"                &#125;                """</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-全局异常处理-器-（项目实战）"><a href="#14-全局异常处理-器-（项目实战）" class="headerlink" title="14. 全局异常处理(器)（项目实战）"></a>14. 全局异常处理(器)（项目实战）</h3><p>​    理论上所有的Controller层方法均需要增加<code>try-catch</code>逻辑（当前只有13是实现了），但可以使用Spring MVC提供的<strong>全局异常处理</strong>功能，可以将所有处理异常的逻辑集中起来，进而统一处理所有异常，<strong>使原先的代码只需要返回正常逻辑而不用操心异常</strong></p><p>​    具体用法如下，详细信息可参考<a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-exceptionhandler.html">官方文档</a>：</p><p>​    在<strong>common模块</strong>中创建<code>com.rain.lease.common.exception.GlobalExceptionHandler</code>类，内容如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中的关键注解的作用如下</p><ul><li><code>@ControllerAdvice</code>用于声明处理全局Controller方法异常的类</li><li><code>@ExceptionHandler</code>用于声明处理异常的方法，Exception.class用于声明该方法处理的异常类型</li><li><code>@ResponseBody</code>表示将方法的返回值作为HTTP的响应体</li></ul><p>​    注意：全局异常处理功能由SpringMVC提供，因此需要在<strong>common模块</strong>的<code>pom.xml</code>中引入如下依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--spring-web--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="修改13的Controller层代码"><a href="#修改13的Controller层代码" class="headerlink" title="修改13的Controller层代码"></a>修改13的Controller层代码</h5><p>由于13的<code>GlobalExceptionHandler</code>会处理所有Controller方法抛出的异常，因此Controller层就无序关注异常的处理逻辑了，因此Controller层代码可做出如下调整。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//FileUploadController.java</span><span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"文件管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin/file"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这个service没有继承MybatisPlus框架</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">FileService</span> fileService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"上传文件"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"upload"</span><span class="token punctuation">)</span>    <span class="token comment">//MultipartFile是spring提供的上传文件的类，该方法返回值是文件的网络url</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15-公寓管理（核心、难）"><a href="#15-公寓管理（核心、难）" class="headerlink" title="15. 公寓管理（核心、难）"></a>15. 公寓管理（核心、难）</h3><p>​    包括多vo设计、多表添加操作、组装分页查询</p><p>​    保存等于说把vo变成数据库表结构然后存储，而回显数据，则是把表结构变成vo传给前端</p><h4 id="1-保存或更新公寓信息"><a href="#1-保存或更新公寓信息" class="headerlink" title="(1)保存或更新公寓信息"></a>(1)保存或更新公寓信息</h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>​    对于这种复杂的保存或更新操作的核心思路为：首先公寓管理是ApartmentSubmitVo，它继承公寓的基础表，并连接了图片、配套、标签、杂费的关联表，那么此时可以先获取id判断是保存操作还是更新操作，然后首先使用MybatisPlus的saveorupdate()把公寓的基础表先保存，然后对于这些关联表，判断更新则采用先删除后增加的操作，若为增加正常执行就行</p><h5 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h5><ul><li>Spring 中，Service 最好不要注入自己；如果你要调用自己继承来的父类通用方法（如 MyBatis-Plus 的 ServiceImpl），用 super.xxx()更合适</li><li>对于这个业务，不要想改传递的ApartmentSubmitVo，核心是截取ApartmentSubmitVo的数据，并将数据保存到应该保存到的表中，目前不考虑数据回显</li><li>操作的表都是与公寓的关联表，不要去操作图片、配套、标签、杂费的本身数据表</li></ul><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>​    ApartmentSubmitVo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"公寓信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApartmentSubmitVo</span> <span class="token keyword">extends</span> <span class="token class-name">ApartmentInfo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"公寓配套id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> facilityInfoIds<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"公寓标签id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> labelIds<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"公寓杂费值id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> feeValueIds<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"公寓图片id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphVo</span><span class="token punctuation">></span></span> graphVoList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    ApartmentController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"公寓信息管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin/apartment"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApartmentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ApartmentInfoService</span> apartmentInfoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"保存或更新公寓信息"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"saveOrUpdate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ApartmentSubmitVo</span> apartmentSubmitVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        apartmentInfoService<span class="token punctuation">.</span><span class="token function">saveOrUpdateApartment</span><span class="token punctuation">(</span>apartmentSubmitVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    ApartmentInfoServiceImpl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApartmentInfoServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentInfoMapper</span><span class="token punctuation">,</span> <span class="token class-name">ApartmentInfo</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">ApartmentInfoService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//公寓&amp;配套关联表的service</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ApartmentFacilityService</span> apartmentFacilityService<span class="token punctuation">;</span>    <span class="token comment">//公寓&amp;标签关联表的service</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ApartmentLabelService</span> apartmentLabelService<span class="token punctuation">;</span>    <span class="token comment">//公寓&amp;杂费关联表的service</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ApartmentFeeValueService</span> apartmentFeeValueService<span class="token punctuation">;</span>    <span class="token comment">//图片信息表的service</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">GraphInfoService</span> graphInfoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrUpdateApartment</span><span class="token punctuation">(</span><span class="token class-name">ApartmentSubmitVo</span> apartmentSubmitVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取id，判断是增加还是修改操作</span>        <span class="token class-name">Long</span> id <span class="token operator">=</span> apartmentSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把公寓表字段优先增加或修改，这里我先弄了apartmentInfoService.saveOrUpdate(apartmentSubmitVo);是错的，会造成循环依赖</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>apartmentSubmitVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//是修改操作，对Vo的字段删除，核心思想：先删后增等于修改</span>            <span class="token comment">//注意：这些字段删除操作都是对数据库操作，和apartmentSubmitVo的list没有关系，list只是用于前往后传，后不用往前传</span>            <span class="token comment">//1.删除公寓id对应配套的关系表</span>            <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentFacility</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ApartmentFacility</span><span class="token operator">::</span><span class="token function">getApartmentId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            apartmentFacilityService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.删除公寓id对应标签的关系表</span>            <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentLabel</span><span class="token punctuation">></span></span> queryWrapper1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queryWrapper1<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ApartmentLabel</span><span class="token operator">::</span><span class="token function">getApartmentId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            apartmentLabelService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.删除公寓id对应杂费的关系表</span>            <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentFeeValue</span><span class="token punctuation">></span></span> queryWrapper2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queryWrapper2<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ApartmentFeeValue</span><span class="token operator">::</span><span class="token function">getApartmentId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            apartmentFeeValueService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.删除公寓id对应图片关系表</span>            <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphInfo</span><span class="token punctuation">></span></span> queryWrapper3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            queryWrapper3<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">GraphInfo</span><span class="token operator">::</span><span class="token function">getItemId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            queryWrapper3<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">GraphInfo</span><span class="token operator">::</span><span class="token function">getItemType</span><span class="token punctuation">,</span> <span class="token class-name">ItemType</span><span class="token punctuation">.</span>APARTMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            graphInfoService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//对vo多的List的增加操作，实际增加的是实体类，通过对vo传输的数据封装entity</span>        <span class="token comment">//对于增加，需要对传入的List进行判空，因为如果为空的话，哪怕是修改操作前面也删了，不增加就行</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> facilityInfoIds <span class="token operator">=</span> apartmentSubmitVo<span class="token punctuation">.</span><span class="token function">getFacilityInfoIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>facilityInfoIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentFacility</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> facilityInfoId <span class="token operator">:</span> facilityInfoIds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ApartmentFacility</span> apartmentFacility <span class="token operator">=</span> <span class="token class-name">ApartmentFacility</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                apartmentFacility<span class="token punctuation">.</span><span class="token function">setApartmentId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                apartmentFacility<span class="token punctuation">.</span><span class="token function">setFacilityId</span><span class="token punctuation">(</span>facilityInfoId<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apartmentFacility<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            apartmentFacilityService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> labelIds <span class="token operator">=</span> apartmentSubmitVo<span class="token punctuation">.</span><span class="token function">getLabelIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>labelIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentLabel</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> labelId <span class="token operator">:</span> labelIds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ApartmentLabel</span> apartmentLabel <span class="token operator">=</span> <span class="token class-name">ApartmentLabel</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                apartmentLabel<span class="token punctuation">.</span><span class="token function">setApartmentId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                apartmentLabel<span class="token punctuation">.</span><span class="token function">setLabelId</span><span class="token punctuation">(</span>labelId<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apartmentLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            apartmentLabelService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> feeValueIds <span class="token operator">=</span> apartmentSubmitVo<span class="token punctuation">.</span><span class="token function">getFeeValueIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>feeValueIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentFeeValue</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> feeValueId <span class="token operator">:</span> feeValueIds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ApartmentFeeValue</span> apartmentFeeValue <span class="token operator">=</span> <span class="token class-name">ApartmentFeeValue</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                apartmentFeeValue<span class="token punctuation">.</span><span class="token function">setApartmentId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                apartmentFeeValue<span class="token punctuation">.</span><span class="token function">setFeeValueId</span><span class="token punctuation">(</span>feeValueId<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apartmentFeeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            apartmentFeeValueService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphVo</span><span class="token punctuation">></span></span> graphVoList <span class="token operator">=</span> apartmentSubmitVo<span class="token punctuation">.</span><span class="token function">getGraphVoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>graphVoList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphInfo</span><span class="token punctuation">></span></span> graphInfos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GraphVo</span> graphVo <span class="token operator">:</span> graphVoList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">GraphInfo</span> graphInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                graphInfo<span class="token punctuation">.</span><span class="token function">setItemId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                graphInfo<span class="token punctuation">.</span><span class="token function">setItemType</span><span class="token punctuation">(</span><span class="token class-name">ItemType</span><span class="token punctuation">.</span>APARTMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>                graphInfo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>graphVo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                graphInfo<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>graphVo<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                graphInfos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>graphInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            graphInfoService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>graphInfos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-根据条件分页查询列表"><a href="#2-根据条件分页查询列表" class="headerlink" title="(2)根据条件分页查询列表"></a>(2)根据条件分页查询列表</h4><p>​    只要分页查询返回值不是一张表，那么就需要使用自定义sql进行分页查询，自定义查询的返回值page和定义对象page要一致且与controller返回前端的返回值一致</p><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>​    在MybatisPlus中使用分页查询，直接把他当普通整表查询就行（但情况复杂时需要多表合一）。分页查询需要造Page&lt;?&gt; page的对象，在controller或者service造都可以。对于复杂查询（需要自定义xml时），条件用mapper方法（自定义）传到xml中，在xml可以用#{}读取。多表连接一定要找准连接字段，比如这个的连接就是公寓id。因为只是查询，所以把表连起来就ok，不用映射啥的</p><h5 id="易错点-1"><a href="#易错点-1" class="headerlink" title="易错点"></a>易错点</h5><p>​    1.条件传输，一般是前台看有几个条件，统一封装为一个条件的vo</p><p>​    2.多表的sql，有些需要起别名</p><p>​    3.对vo要造的字段，sql起别名按照表的起名方式xxx_xxx，不要写成驼峰</p><p>​    4.虽然他要的是ApartmentItemVo的分页查询，但是使用的是apartmentInfo的Controller、service、mapper，主要是vo继承自apartmentInfo</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><p>​    1.使用MybatisPlus的分页插件，需要在MybatisPlus的配置类中进行配置，<code>不配置的话分页会失效，只当作普通查询返回查询结果</code>，在<strong>common模块</strong>中的<code>com.rain.lease.common.mybatisplus.MybatisPlusConfiguration</code>中增加如下内容：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.controller、serviceImpl、mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//controller</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"根据条件分页查询公寓列表"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"pageItem"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPage</span><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentItemVo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">pageItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> <span class="token class-name">ApartmentQueryVo</span> queryVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentItemVo</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> apartmentInfoService<span class="token punctuation">.</span><span class="token function">selectPageItem</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>size<span class="token punctuation">,</span>queryVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//serviceImpl</span><span class="token keyword">public</span> <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentItemVo</span><span class="token punctuation">></span></span> <span class="token function">selectPageItem</span><span class="token punctuation">(</span><span class="token keyword">long</span> current<span class="token punctuation">,</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> <span class="token class-name">ApartmentQueryVo</span> queryVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentItemVo</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentItemVo</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> apartmentInfoMapper<span class="token punctuation">.</span><span class="token function">selectPageItem</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>queryVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApartmentInfoMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentInfo</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentItemVo</span><span class="token punctuation">></span></span> <span class="token function">selectPageItem</span><span class="token punctuation">(</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentItemVo</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token class-name">ApartmentQueryVo</span> queryVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectPageItem<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.admin.vo.apartment.ApartmentItemVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,           name,           introduction,           district_id,           district_name,           city_id,           city_name,           province_id,           province_name,           address_detail,           latitude,           longitude,           phone,           is_release,           ifnull(cr,0) total_room_count,           ifnull(cr,0)-ifnull(cl,0) free_room_count    from (select id,                 name,                 introduction,                 district_id,                 district_name,                 city_id,                 city_name,                 province_id,                 province_name,                 address_detail,                 latitude,                 longitude,                 phone,                 is_release          from apartment_info            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>                is_deleted = 0                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.provinceId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    and province_id = #&#123;queryVo.provinceId&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.cityId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    and city_id = #&#123;queryVo.cityId&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.districtId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    and district_id = #&#123;queryVo.districtId&#125;                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>          ) aa             left join (select apartment_id, count(apartment_id) cr                        from room_info                        where is_deleted = 0                          and is_release = 1                        group by apartment_id) ll on ll.apartment_id=aa.id             left join (select apartment_id, count(apartment_id) cl                        from lease_agreement                        where is_deleted = 0                          and status in (2, 5)                        group by apartment_id) dd on dd.apartment_id=aa.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    4.ApartmentItemVo.java，这里都是普通类型，所以写的sql不需要进行进一步映射</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"后台管理系统公寓列表实体"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApartmentItemVo</span> <span class="token keyword">extends</span> <span class="token class-name">ApartmentInfo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"房间总数"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> totalRoomCount<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"空闲房间数"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> freeRoomCount<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="调试：Knife4j使用优化"><a href="#调试：Knife4j使用优化" class="headerlink" title="调试：Knife4j使用优化"></a>调试：Knife4j使用优化</h5><p>​    默认情况下Knife4j为该接口生成的接口文档如下图所示，其中的queryVo参数不方便调试</p><p><a href="https://imgse.com/i/pVkGoa4"><img src="https://s21.ax1x.com/2025/06/11/pVkGoa4.png" alt="未打平"></a></p><p>​    可在application.yml文件中增加如下配置，将queryVo做打平处理</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">springdoc</span><span class="token punctuation">:</span>  <span class="token key atrule">default-flat-param-object</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    将<code>spring.default-flat-param-object</code>参数设置为<code>true</code>后，效果如下：</p><p><a href="https://imgse.com/i/pVkGHi9"><img src="https://s21.ax1x.com/2025/06/11/pVkGHi9.png" alt="已打平"></a></p><p>​    </p><h4 id="3-根据ID获取公寓详细信息（用于数据回显）"><a href="#3-根据ID获取公寓详细信息（用于数据回显）" class="headerlink" title="(3)根据ID获取公寓详细信息（用于数据回显）"></a>(3)根据ID获取公寓详细信息（用于数据回显）</h4><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>​    根据前端的要求的数据，封装一个Vo，将Vo的数据分别组装，最后返回，这里有两个思路，一个是使用MybatisPlus集成的方法返回每个要封装的数据，但是不够灵活，所以最终使用的是自定义xml</p><h5 id="易错点-2"><a href="#易错点-2" class="headerlink" title="易错点"></a>易错点</h5><p>​    1.一般需要获得什么样类型的数据，就把要用的mapper写在这个数据的mapper里，<code>以最终获得的数据为准</code>，虽然放别的mapper也不算错，但是影响可读性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//比方</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LabelInfo</span><span class="token punctuation">></span></span> labelInfoList <span class="token operator">=</span> labelInfoMapper<span class="token punctuation">.</span><span class="token function">selectListById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不要写成中间表格式</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LabelInfo</span><span class="token punctuation">></span></span> labelInfoList <span class="token operator">=</span> apartmentLabelMapper<span class="token punctuation">.</span><span class="token function">selectListById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//虽然可以运行，但是影响维护</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在编写xml文件时，查询结果会自动映射，有id不要忘了写id，id是在base类中的</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><p>​    1.vo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"公寓信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApartmentDetailVo</span> <span class="token keyword">extends</span> <span class="token class-name">ApartmentInfo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"图片列表"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphVo</span><span class="token punctuation">></span></span> graphVoList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"标签列表"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LabelInfo</span><span class="token punctuation">></span></span> labelInfoList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"配套列表"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FacilityInfo</span><span class="token punctuation">></span></span> facilityInfoList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"杂费列表"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FeeValueVo</span><span class="token punctuation">></span></span> feeValueVoList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.controller和service，mapper直接自定义xml所以略</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ApartmentController.java</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"根据ID获取公寓详细信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getDetailById"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentDetailVo</span><span class="token punctuation">></span></span> <span class="token function">getDetailById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ApartmentDetailVo</span> apartment <span class="token operator">=</span> apartmentInfoService<span class="token punctuation">.</span><span class="token function">selectPageItemById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>apartment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//ApartmentInfoServiceImpl.java</span><span class="token keyword">public</span> <span class="token class-name">ApartmentDetailVo</span> <span class="token function">selectPageItemById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//查询公寓信息</span>    <span class="token class-name">ApartmentInfo</span> apartmentInfo <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//自定义查询，封装图片的vo</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphVo</span><span class="token punctuation">></span></span> graphVoList <span class="token operator">=</span> graphInfoMapper<span class="token punctuation">.</span><span class="token function">selectGraphListByIdAndType</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token class-name">ItemType</span><span class="token punctuation">.</span>APARTMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//自定义查询，获得labelInfoList</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LabelInfo</span><span class="token punctuation">></span></span> labelInfoList <span class="token operator">=</span> labelInfoMapper<span class="token punctuation">.</span><span class="token function">selectListById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//自定义查询，获得facilityInfoList</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FacilityInfo</span><span class="token punctuation">></span></span> facilityInfoList <span class="token operator">=</span> facilityInfoMapper<span class="token punctuation">.</span><span class="token function">selectListById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//自定义查询，获得feeValueVoList,这个vo继承了feeValue，所以用feeValueMapper</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FeeValueVo</span><span class="token punctuation">></span></span> feeValueVoList <span class="token operator">=</span> feeValueMapper<span class="token punctuation">.</span><span class="token function">selectListById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ApartmentDetailVo</span> apartmentDetailVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApartmentDetailVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把apartmentInfo只要apartmentDetailVo能对应上的属性值都copy过去，左->右</span>    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>apartmentInfo<span class="token punctuation">,</span> apartmentDetailVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    apartmentDetailVo<span class="token punctuation">.</span><span class="token function">setGraphVoList</span><span class="token punctuation">(</span>graphVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    apartmentDetailVo<span class="token punctuation">.</span><span class="token function">setLabelInfoList</span><span class="token punctuation">(</span>labelInfoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    apartmentDetailVo<span class="token punctuation">.</span><span class="token function">setFacilityInfoList</span><span class="token punctuation">(</span>facilityInfoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    apartmentDetailVo<span class="token punctuation">.</span><span class="token function">setFeeValueVoList</span><span class="token punctuation">(</span>feeValueVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> apartmentDetailVo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.自定义的xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//1.graphInfoMapper.selectGraphListByIdAndType(id,ItemType.APARTMENT)的xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGraphListByIdAndType<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.admin.vo.graph.GraphVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select name,           url    from graph_info    where is_deleted = 0      and item_id = #&#123;id&#125;      and item_type = #&#123;itemType&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>//2.labelInfoMapper.selectListById(id)的xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectListById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.model.entity.LabelInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,           type,           name    from label_info    where is_deleted = 0      and id in (select label_id                from apartment_label                where is_deleted = 0                  and apartment_id = #&#123;id&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>//3.facilityInfoMapper.selectListById(id)的xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectListById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.model.entity.FacilityInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,           type,           name,           icon    from facility_info    where is_deleted = 0      and id in (select facility_id                 from apartment_facility                 where is_deleted = 0                   and apartment_id = #&#123;id&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>//4.feeValueMapper.selectListById(id)的xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectListById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.admin.vo.fee.FeeValueVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select fee_value.id,           fee_value.name,           fee_value.unit,           fee_value.fee_key_id,           fee_key.name fee_key_name    from fee_value             left join fee_key on fee_value.fee_key_id = fee_key.id and fee_key.is_deleted=0    where fee_value.is_deleted = 0      and fee_value.id in (select fee_value_id                 from apartment_fee_value                 where is_deleted = 0                   and apartment_id = #&#123;id&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-根据ID删除公寓信息"><a href="#4-根据ID删除公寓信息" class="headerlink" title="(4)根据ID删除公寓信息"></a>(4)根据ID删除公寓信息</h4><h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><p>​    这里只需要删除公寓信息表以及该公寓id对应的中间表如杂费表、标签表即可，这里可以复用更新时先删除的逻辑，但是在删除前，需要去房间信息表去看看该公寓id还有没有对应的房间，如果有则抛出异常终止删除操作</p><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><p>​    1.controller和service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ApartmentController.java</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"根据id删除公寓信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"removeById"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">removeById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//自定义方法</span>    apartmentInfoService<span class="token punctuation">.</span><span class="token function">removeAllById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//ApartmentInfoServiceImpl.java</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeAllById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在删除前看看公寓里是否有房间信息</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomInfo</span><span class="token punctuation">></span></span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    query<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomInfo</span><span class="token operator">::</span><span class="token function">getApartmentId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> count <span class="token operator">=</span> roomInfoService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//把枚举类的code和msg当参数传递，因为这是规定好的枚举</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span><span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span>DELETE_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">ResultCodeEnum</span><span class="token punctuation">.</span>DELETE_ERROR<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除逻辑</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.删除公寓id对应配套的关系表</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentFacility</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ApartmentFacility</span><span class="token operator">::</span><span class="token function">getApartmentId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    apartmentFacilityService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.删除公寓id对应标签的关系表</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentLabel</span><span class="token punctuation">></span></span> queryWrapper1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper1<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ApartmentLabel</span><span class="token operator">::</span><span class="token function">getApartmentId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    apartmentLabelService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.删除公寓id对应杂费的关系表</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentFeeValue</span><span class="token punctuation">></span></span> queryWrapper2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper2<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ApartmentFeeValue</span><span class="token operator">::</span><span class="token function">getApartmentId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    apartmentFeeValueService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.删除公寓id对应图片关系表</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphInfo</span><span class="token punctuation">></span></span> queryWrapper3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper3<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">GraphInfo</span><span class="token operator">::</span><span class="token function">getItemId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper3<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">GraphInfo</span><span class="token operator">::</span><span class="token function">getItemType</span><span class="token punctuation">,</span> <span class="token class-name">ItemType</span><span class="token punctuation">.</span>APARTMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    graphInfoService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>queryWrapper3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.自定义的RuntimeException、全局异常处理、result返回值构建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//LeaseException.java</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeaseException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//GlobalExceptionHandler.java</span><span class="token comment">//通过全局异常类捕获自定义异常，并且将异常中的code和msg发送给前端</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">LeaseException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token comment">//这个方法名不重要可以随便取，根据可读性取名就行</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">LeaseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Result.java中增加fail方法</span><span class="token comment">//用于构造返回给前端的result对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-根据ID修改公寓发布状态"><a href="#5-根据ID修改公寓发布状态" class="headerlink" title="(5)根据ID修改公寓发布状态"></a>(5)根据ID修改公寓发布状态</h4><h5 id="易错点-3"><a href="#易错点-3" class="headerlink" title="易错点"></a>易错点</h5><p>​    update要改的字段在封装LamdaqueryWrapper时，用set封装，别写成eq了</p><h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ApartmentController.java</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"根据id修改公寓发布状态"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"updateReleaseStatusById"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">updateReleaseStatusById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">ReleaseStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentInfo</span><span class="token punctuation">></span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ApartmentInfo</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里用set方法，不要写eq啊</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">ApartmentInfo</span><span class="token operator">::</span><span class="token function">getIsRelease</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    apartmentInfoService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-根据区县ID查询公寓信息列表"><a href="#6-根据区县ID查询公寓信息列表" class="headerlink" title="(6)根据区县ID查询公寓信息列表"></a>(6)根据区县ID查询公寓信息列表</h4><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ApartmentController.java</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"根据区县id查询公寓信息列表"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"listInfoByDistrictId"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentInfo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listInfoByDistrictId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentInfo</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">ApartmentInfo</span><span class="token operator">::</span><span class="token function">getDistrictId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApartmentInfo</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> apartmentInfoService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-查询的组装（不管是否分页）"><a href="#16-查询的组装（不管是否分页）" class="headerlink" title="16. 查询的组装（不管是否分页）"></a>16. 查询的组装（不管是否分页）</h3><p>​    对于查询的结果如果是vo类型，但是呢，vo中定义的属性有复杂类型（对象或集合），则需要使用resultMap进行封装，而具体到那个复杂类型的属性的封装有<code>&lt;association&gt;</code> 一对一和<code>&lt;collection&gt;</code> 一对多封装，这两个标签中有properties（必填），这个properties就写vo中复杂类型的属性名（不管是Info还是List），如果是一对一用<code>javaType</code>指定这个属性名的全限定名，如果是一对多用<code>ofType</code>来指定这个多的item的全限定名</p><table><thead><tr><th>属性名</th><th><code>&lt;association&gt;</code> 中需要？</th><th><code>&lt;collection&gt;</code> 中需要？</th></tr></thead><tbody><tr><td><code>javaType</code></td><td>✅ 用来说明是哪个类的对象</td><td>✅ 用来说明是哪个集合类型（如 ArrayList）（非必须）</td></tr><tr><td><code>ofType</code></td><td>❌ 没有意义</td><td>✅ 指定集合元素类型</td></tr></tbody></table><h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><p>​    RoomVO.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoomVO</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Long</span> num<span class="token punctuation">;</span>  <span class="token comment">//普通类型，不需要映射</span>    <span class="token keyword">private</span> <span class="token class-name">ApartmentInfo</span> apartmentInfo<span class="token punctuation">;</span> <span class="token comment">// 一对一</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeviceInfo</span><span class="token punctuation">></span></span> deviceList<span class="token punctuation">;</span> <span class="token comment">// 一对多</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    xml中的resultMap</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RoomVOMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xxx.RoomVO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 一对一 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apartmentInfo<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xxx.ApartmentInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    //...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 一对多 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deviceList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.xxx.DeviceInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    //...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-根据条件分页查询预约信息（分页中使用-lt-association-gt-）"><a href="#17-根据条件分页查询预约信息（分页中使用-lt-association-gt-）" class="headerlink" title="17. 根据条件分页查询预约信息（分页中使用&lt;association&gt; ）"></a>17. 根据条件分页查询预约信息（分页中使用<code>&lt;association&gt;</code> ）</h3><h5 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h5><p>​    1.学习1对1时自定义分页查询时的resultMap组装</p><p>​    2.学习模糊查询的使用</p><p>​    3.学习时间格式的同步以及时区的同步</p><h5 id="易错点-4"><a href="#易错点-4" class="headerlink" title="易错点"></a>易错点</h5><p>​    String类型字段在xml中进行判断时，除了判断非空外，还需要判断是否是空字符串，如下所示</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"># 最后两个字段是String类型，除了判断是否为null外，还需要判断空字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.name!=null and queryVo.name!=<span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    view_appointment.name like concat('%',#&#123;queryVo.name&#125;,'%')<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-分页查询的代码实现"><a href="#1-分页查询的代码实现" class="headerlink" title="(1)分页查询的代码实现"></a>(1)分页查询的代码实现</h4><p>​    1.AppointmentVo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"预约看房信息"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppointmentVo</span> <span class="token keyword">extends</span> <span class="token class-name">ViewAppointment</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"预约公寓信息"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">ApartmentInfo</span> apartmentInfo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.controller、service、mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ViewAppointmentController.java</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"分页查询预约信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPage</span><span class="token punctuation">&lt;</span><span class="token class-name">AppointmentVo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> <span class="token class-name">AppointmentQueryVo</span> queryVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppointmentVo</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppointmentVo</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> viewAppointmentService<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>queryVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//ViewAppointmentServiceImpl.java</span><span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppointmentVo</span><span class="token punctuation">></span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppointmentVo</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token class-name">AppointmentQueryVo</span> queryVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> viewAppointmentMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>queryVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//ViewAppointmentMapper.java</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ViewAppointmentMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ViewAppointment</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppointmentVo</span><span class="token punctuation">></span></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppointmentVo</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token class-name">AppointmentQueryVo</span> queryVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.admin.mapper.ViewAppointmentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAllVo<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.admin.vo.appointment.AppointmentVo<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vPhone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apartmentInfo<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.model.entity.ApartmentInfo<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>aPhone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAllVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select view_appointment.id vId,               view_appointment.user_id,               view_appointment.name vName,               view_appointment.phone vPhone,               view_appointment.apartment_id,               view_appointment.appointment_time,               view_appointment.additional_info,               view_appointment.appointment_status,               apartment_info.id aId,               apartment_info.name aName,               apartment_info.introduction,               apartment_info.district_id,               apartment_info.district_name,               apartment_info.city_id,               apartment_info.city_name,               apartment_info.province_id,               apartment_info.province_name,               apartment_info.address_detail,               apartment_info.latitude,               apartment_info.longitude,               apartment_info.phone aPhone,               apartment_info.is_release        from view_appointment                 left join apartment_info                           on view_appointment.apartment_id = apartment_info.id and apartment_info.is_deleted = 0        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            view_appointment.is_deleted = 0            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.provinceId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                province_id=#&#123;queryVo.provinceId&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.cityId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                city_id=#&#123;queryVo.cityId&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.districtId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                district_id=#&#123;queryVo.districtId&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.apartmentId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                apartment_id=#&#123;queryVo.apartmentId&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>#             最后两个字段是String类型，除了判断是否为null外，还需要判断空字符串            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.name!=null and queryVo.name!=<span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                view_appointment.name like concat('%',#&#123;queryVo.name&#125;,'%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.phone!=null and queryVo.phone!=<span class="token punctuation">'</span><span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                view_appointment.phone like concat('%',#&#123;queryVo.phone&#125;,'%')            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-时间和时区格式设置"><a href="#2-时间和时区格式设置" class="headerlink" title="(2)时间和时区格式设置"></a>(2)时间和时区格式设置</h4><p>​    后台响应给前端的关于时间字符串的格式是由时间对象转JSON的框架决定的，ViewAppointment实体类中的appointmentTime字段为<code>Date</code>类型，<code>Date</code>类型的字段在序列化成JSON字符串时，需要考虑两个点，分别是<strong>格式</strong>和<strong>时区</strong>，本项目使用JSON序列化框架为Jackson，格式是后台响应给前台，时区是因为我们是东八区，所以时区设置要+8，即让Jackson使用的时区与数据库的时区保持一致</p><h5 id="时间格式设置"><a href="#时间格式设置" class="headerlink" title="时间格式设置"></a>时间格式设置</h5><ul><li><p><strong>格式</strong></p><p>格式可按照字段单独配置，也可全局配置，下面分别介绍</p><ul><li><p><strong>单独配置</strong>（一般用这个，灵活）</p><p>在指定字段增加<code>@JsonFormat</code>注解，如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> appointmentTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>全局配置</strong></p><p>在<code>application.yml</code>中增加如下内容</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h5 id="时区格式设置"><a href="#时区格式设置" class="headerlink" title="时区格式设置"></a>时区格式设置</h5><ul><li><p><strong>时区</strong></p><p>时区同样可按照字段单独配置，也可全局配置，下面分别介绍</p><ul><li><p><strong>单独配置</strong></p><p>在指定字段增加<code>@JsonFormat</code>注解，如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> appointmentTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>全局配置</strong>（一般用这个）</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>推荐格式按照字段单独配置，时区全局配置。</p><h3 id="18-定时任务-器-的使用"><a href="#18-定时任务-器-的使用" class="headerlink" title="18. 定时任务(器)的使用"></a>18. 定时任务(器)的使用</h3><h5 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h5><p>​    每天都要定时的检查租约是否到期，如果到期了则将租约的状态改为已到期</p><h5 id="定时任务的使用步骤"><a href="#定时任务的使用步骤" class="headerlink" title="定时任务的使用步骤"></a>定时任务的使用步骤</h5><p>​    1.在Springboot启动类上增加<code>@EnableScheduling</code>注解</p><p>​    2.在保证类由spring容器管理的情况下，在方法上使用@Scheduled(cron = “0 0 0 * * *”)开启定时任务</p><h5 id="SpringBoot中的cron表达式语法"><a href="#SpringBoot中的cron表达式语法" class="headerlink" title="SpringBoot中的cron表达式语法"></a>SpringBoot中的cron表达式语法</h5><pre class="line-numbers language-none"><code class="language-none">┌───────────── second (0-59)│ ┌───────────── minute (0 - 59)│ │ ┌───────────── hour (0 - 23)│ │ │ ┌───────────── day of the month (1 - 31)│ │ │ │ ┌───────────── month (1 - 12) (or JAN-DEC)│ │ │ │ │ ┌───────────── day of the week (0 - 7)│ │ │ │ │ │          (0 or 7 is Sunday, or MON-SUN)│ │ │ │ │ │* * * * * *   &#x2F;&#x2F;*代表每，这六个中间有空格隔开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h5><ul><li><p>启用Spring Boot定时任务</p><p>在SpringBoot启动类上增加<code>@EnableScheduling</code>注解，如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminWebApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AdminWebApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写定时逻辑</p><p>在<strong>web-admin模块</strong>下创建<code>com.atguigu.lease.web.admin.schedule.ScheduledTasks</code>类，这里是通过数据库批处理来实现的，简单来说就是数据库既改也查，我自己写了一个Java先查再改的就不行效率太低，他的思路更优秀</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleTasks</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LeaseAgreementService</span> leaseAgreementService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 0 0 * * *"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LeaseAgreement</span><span class="token punctuation">></span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//筛出数据库中的最后日期小于当前时间是数据</span>        updateWrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token class-name">LeaseAgreement</span><span class="token operator">::</span><span class="token function">getLeaseEndDate</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//确定状态是未退租</span>        updateWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">LeaseAgreement</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span><span class="token class-name">LeaseStatus</span><span class="token punctuation">.</span>SIGNED<span class="token punctuation">,</span><span class="token class-name">LeaseStatus</span><span class="token punctuation">.</span>EXPIRED<span class="token punctuation">)</span><span class="token punctuation">;</span>        updateWrapper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">LeaseAgreement</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span><span class="token class-name">LeaseStatus</span><span class="token punctuation">.</span>EXPIRED<span class="token punctuation">)</span><span class="token punctuation">;</span>        leaseAgreementService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法的测试</strong>：在测试类中直接调用该方法即可测试，不需要专门等</p></li></ul><h5 id="Mybatis的le-详解"><a href="#Mybatis的le-详解" class="headerlink" title="Mybatis的le()详解"></a>Mybatis的le()详解</h5><p>​    <code>le代表小于等于</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; Lambda 形式le(SFunction&lt;T, ?&gt; column, Object val)&#x2F;&#x2F; 普通字符串字段形式le(String column, Object val)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一个参数<code>column</code>：要比较的字段，由数据库提供</li><li>第二个参数<code>val</code>：要比较的值，由你代码提供</li></ul><h3 id="19-分页查询移动端用户列表（最简单的分页）"><a href="#19-分页查询移动端用户列表（最简单的分页）" class="headerlink" title="19. 分页查询移动端用户列表（最简单的分页）"></a>19. 分页查询移动端用户列表（最简单的分页）</h3><h4 id="1-分页查询用户列表"><a href="#1-分页查询用户列表" class="headerlink" title="(1)分页查询用户列表"></a>(1)分页查询用户列表</h4><p>​    由于只需要进行单表分页查询，所以只需要用MybatisPlus自带的通用service即可</p><h5 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"分页查询用户信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPage</span><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">pageUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span>                                            <span class="token class-name">UserInfoQueryVo</span> queryVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>queryVo<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">UserInfo</span><span class="token operator">::</span><span class="token function">getPhone</span><span class="token punctuation">,</span> queryVo<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>queryVo<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">UserInfo</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">,</span> queryVo<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> userInfoPage <span class="token operator">=</span> userInfoService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>userInfoPage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="like-的注意事项"><a href="#like-的注意事项" class="headerlink" title="like()的注意事项"></a>like()的注意事项</h5><p>​    MyBatis-Plus 的 <code>.like()</code> 方法会自动把传的参数 ，如<code>&quot;Tom&quot;</code> 包裹成 <code>%Tom%</code>，完成模糊匹配</p><h4 id="2-TableField-select-false-不想加入查询的字段处理"><a href="#2-TableField-select-false-不想加入查询的字段处理" class="headerlink" title="(2)@TableField(select = false)-不想加入查询的字段处理"></a>(2)@TableField(select = false)-不想加入查询的字段处理</h4><p>​    在对于用户的查询中，一般密码不应该作为查询字段返回，要使得字段不作为select的查询结果，可以在实体类的属性上添加注释@TableField(select = false)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"用户信息表"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"user_info"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token keyword">extends</span> <span class="token class-name">BaseEntity</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"手机号码（用做登录用户名）"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"phone"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span>select <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意</strong>：该方式只对有MybatisPlus生成的sql有效，自定义sql，需要自己去对实际情况手动去除查询字段</p><h3 id="20-保存或更新后台用户信息"><a href="#20-保存或更新后台用户信息" class="headerlink" title="20. 保存或更新后台用户信息"></a>20. 保存或更新后台用户信息</h3><h4 id="1-保存密码时-对于密码的处理"><a href="#1-保存密码时-对于密码的处理" class="headerlink" title="(1)保存密码时-对于密码的处理"></a>(1)保存密码时-对于密码的处理</h4><p>​    这样做可以保证在数据库泄露的时候，密码不被攻击者直接获取</p><p>​    一般是不能将明文的密码保存在数据库中，用户的密码通常不会直接以明文的形式保存到数据库中，而是会先经过处理，然后将处理之后得到的”密文”保存到数据库，这样能够降低数据库泄漏导致的用户账号安全问题。</p><p>密码通常会使用一些单向函数进行处理，如下图所示</p><p><a href="https://imgse.com/i/pVEMMDg"><img src="https://s21.ax1x.com/2025/06/16/pVEMMDg.png" alt="密码处理"></a></p><p>​    常用于处理密码的单向函数（算法）有MD5、SHA-256等，<strong>Apache Commons</strong>提供了一个工具类<code>DigestUtils</code>，其中就包含上述算法的实现。</p><blockquote><p><strong>Apache Commons</strong>是Apache软件基金会下的一个项目，其致力于提供可重用的开源软件，其中包含了很多易于使用的现成工具。</p></blockquote><p>使用该工具类需引入<code>commons-codec</code>依赖，在<strong>common模块</strong>的pom.xml中增加如下内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h5><p>​    注意md5Hex不允许参数为空，所以需要加入判单，但当密码为空时，MybatisPlus的更新策略见(2)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"保存或更新后台用户信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"saveOrUpdate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SystemUser</span> systemUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//md5Hex不允许参数为空，否则会抛异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>systemUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> md5Hex <span class="token operator">=</span> <span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span>systemUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemUser<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>md5Hex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    systemUserService<span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>systemUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Mybatis-Plus-update-strategy-对空数据的更新策略"><a href="#2-Mybatis-Plus-update-strategy-对空数据的更新策略" class="headerlink" title="(2)Mybatis-Plus update strategy(对空数据的更新策略)"></a>(2)Mybatis-Plus update strategy(对空数据的更新策略)</h4><p>​    <code>注意：如果用默认的行为，以下配置都可不必</code></p><p>​    使用Mybatis-Plus提供的更新方法时，若实体中的字段为<code>null</code>，默认情况下，最终生成的update语句中，不会包含该字段。若想改变默认行为，可做以下配置</p><ul><li><p>全局配置</p><p>在<code>application.yml</code>中配置如下参数</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">mybatis-plus:  global-config:    db-config:      update-strategy: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strategy</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：上述<code>&lt;strategy&gt;</code>可选值有：<code>ignore</code>、<code>not_null</code>、<code>not_empty</code>、<code>never</code>，默认值为<code>not_null</code></p><ul><li><code>not_null</code>：进行非空判断，字段非空才会进行更新</li><li><code>ignore</code>：忽略空值判断，不管字段是否为空，都会进行更新</li><li><code>not_empty</code>：进行非空判断，并进行非空串（””）判断，主要针对字符串类型</li><li><code>never</code>：从不进行更新，不管该字段为何值，都不更新</li></ul></li><li><p>局部配置</p><p>在实体类中的具体字段通过<code>@TableField</code>注解进行配置，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token comment">//这个FieldStrategy.NOT_EMPTY是在com.baomidou.mybatisplus.annotation.FieldStrategy，它是MybatisPlus提供的枚举类</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> updateStrategy <span class="token operator">=</span> <span class="token class-name">FieldStrategy</span><span class="token punctuation">.</span>NOT_EMPTY<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="21-判断后台用户名是否可用"><a href="#21-判断后台用户名是否可用" class="headerlink" title="21. 判断后台用户名是否可用"></a>21. 判断后台用户名是否可用</h3><p>​    该功能用于在前端输入用户名时，后台数据库同步查找，若有重名用户名则返回false给前端，前端再给予提示</p><h5 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h5><p>​    将username当作过滤条件，然后去数据库查询相应用户信息，如果能查到就是有，查不到就是没有</p><h5 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"判断后台用户名是否可用"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"isUserNameAvailable"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> <span class="token function">isUsernameExists</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SystemUser</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">SystemUser</span><span class="token operator">::</span><span class="token function">getUsername</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里也可以用getOne()， SystemUser user = systemUserService.getOne(queryWrapper)</span>    <span class="token keyword">long</span> count <span class="token operator">=</span> systemUserService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="22-后台用户登录的实现（图形验证码、JWT）"><a href="#22-后台用户登录的实现（图形验证码、JWT）" class="headerlink" title="22. 后台用户登录的实现（图形验证码、JWT）"></a>22. 后台用户登录的实现（图形验证码、JWT）</h3><h4 id="1-背景知识"><a href="#1-背景知识" class="headerlink" title="(1)背景知识"></a>(1)背景知识</h4><h5 id="认证方案概述"><a href="#认证方案概述" class="headerlink" title="认证方案概述"></a>认证方案概述</h5><p>​    有两种常见的认证方案，分别是基于<strong>Session</strong>的认证和基于<strong>Token</strong>的认证，下面逐一进行介绍</p><ul><li><p><strong>基于Session</strong></p><p>基于Session的认证流程如下图所示</p><p><a href="https://imgse.com/i/pVZSwsP"><img src="https://s21.ax1x.com/2025/06/21/pVZSwsP.png" alt="Session认证流程"></a></p><p>该方案的特点</p><ul><li>登录用户信息保存在服务端内存中，若访问量增加，单台节点压力会较大，解决方式：使用集群</li><li>随用户规模增大，若后台升级为集群，则需要解决集群中各服务器登录状态共享的问题，因为比方这个服务器A存储了session并返回SID，但是你的下一个请求发送给了服务器B，则B会认为你未登录，解决方式：使用redis，所有服务器将用户的登录状态保存在redis中</li></ul></li></ul><ul><li><p><strong>基于Token</strong></p><p>基于Token的认证流程如下图所示</p><p><a href="https://imgse.com/i/pVZSDZ8"><img src="https://s21.ax1x.com/2025/06/21/pVZSDZ8.png" alt="token认证"></a></p><p>该方案的特点</p><ul><li>登录状态保存在客户端，服务器没有存储开销</li><li>客户端发起的每个请求自身均携带登录状态，所以即使后台为集群，也不会面临登录状态共享的问题</li></ul></li></ul><h5 id="Token详解"><a href="#Token详解" class="headerlink" title="Token详解"></a>Token详解</h5><p>​    JWT是一个字符串，如下图所示，该字符串由三部分组成，三部分由<code>.</code>分隔。三个部分分别被称为</p><ul><li>header（头部）（由调用工具自动生成）</li><li>payload（负载）（需要人为组装）</li><li>signature（签名）（计算后自动生成）</li></ul><p><a href="https://imgse.com/i/pVZSIdU"><img src="https://s21.ax1x.com/2025/06/21/pVZSIdU.png" alt="JWT"></a></p><p>各部分的作用如下</p><ul><li><p><strong>Header（头部）（自动生成）</strong></p><p>Header部分是由一个JSON对象经过<code>base64url</code>编码得到的，这个JSON对象用于保存JWT 的类型（<code>typ</code>）、签名算法（<code>alg</code>）等元信息，例如</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>Payload（负载）（需组装）</strong></p><p>以下字段中必选一个用于标识用户的字段</p><table><thead><tr><th>字段</th><th>名称</th><th>是否必须</th><th>用途/说明</th></tr></thead><tbody><tr><td><code>sub</code></td><td>Subject</td><td>❌非必须（但推荐）</td><td>标识用户是谁，比如用户名、userId 等</td></tr><tr><td><code>iat</code></td><td>Issued At</td><td>❌非必须（但推荐）</td><td>签发时间，帮助判断 token 何时生成</td></tr><tr><td><code>exp</code></td><td>Expiration</td><td>❌非必须（但强烈推荐）</td><td>设置过期时间，控制有效期</td></tr><tr><td><code>iss</code></td><td>Issuer</td><td>❌可选</td><td>谁签发的（系统标识）</td></tr><tr><td><code>aud</code></td><td>Audience</td><td>❌可选</td><td>给谁用的（接收方）</td></tr><tr><td><code>jti</code></td><td>JWT ID</td><td>❌可选</td><td>唯一标识，可用于 token 黑名单、登出</td></tr><tr><td>自定义字段</td><td>-</td><td>❌可选</td><td>放你业务要用的用户信息（id、角色、昵称等）</td></tr></tbody></table></li><li><p><strong>Signature（签名）（自动生成）</strong></p><p>由头部、负载和秘钥(程序中自定义)一起经过（header中指定的签名算法）计算得到的一个字符串，用于防止消息被篡改，即每次发送请求时都会计算一次签名，校验得到的前面和token中自带的签名是否一致</p></li></ul><h4 id="2-使用图形验证码的登录流程"><a href="#2-使用图形验证码的登录流程" class="headerlink" title="(2)使用图形验证码的登录流程"></a>(2)使用图形验证码的登录流程</h4><p>后台管理系统的登录流程如下图所示：后端每一次响应对应一个controller</p><p><a href="https://imgse.com/i/pVZAvIP"><img src="https://s21.ax1x.com/2025/06/21/pVZAvIP.jpg" alt="登录流程"></a></p><p>​    根据上述登录流程，可分析出，登录管理共需三个接口，分别是<strong>获取图形验证码</strong>、<strong>登录</strong>、<strong>获取登录用户个人信息</strong>，除此之外，我们还需为所有受保护的接口增加验证JWT合法性的逻辑，这一功能可通过<code>HandlerInterceptor</code>来实现</p><h4 id="3-图形验证码的实现"><a href="#3-图形验证码的实现" class="headerlink" title="(3)图形验证码的实现"></a>(3)图形验证码的实现</h4><h5 id="验证码实现原理"><a href="#验证码实现原理" class="headerlink" title="验证码实现原理"></a>验证码实现原理</h5><p>​    返回给前端的图形验证码是String类型，但这不是图片的url，而是图片本身。使用base64可以将二进制数据转化为字符串。前端通过<code>&lt;img src=&quot;转化后的字符串&quot;&gt;</code> 即可在前端显示该图片</p><h5 id="图形验证码的生成"><a href="#图形验证码的生成" class="headerlink" title="图形验证码的生成"></a>图形验证码的生成</h5><p>​    使用开源的验证码生成工具<strong>EasyCaptcha</strong>，其支持多种类型的验证码，例如gif、中文、算术等，并且简单易用，使用方式可参考其<a href="https://gitee.com/ele-admin/EasyCaptcha">官方文档</a>。</p><p>​    在common模块的pom.xml文件中增加如下内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.whvcse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easy-captcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    因为值需要保存到redis中，所以也需要引入redis的依赖，并在yml中对redis进行配置</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span>    <span class="token key atrule">redis</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> &lt;hostname<span class="token punctuation">></span>      <span class="token key atrule">port</span><span class="token punctuation">:</span> &lt;port<span class="token punctuation">></span>      <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>​    controller和service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//LoginController.java</span><span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"后台管理系统登录管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token comment">//普通service，没用MybatisPlus框架</span>    <span class="token keyword">private</span> <span class="token class-name">LoginService</span> loginService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"获取图形验证码"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"login/captcha"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CaptchaVo</span><span class="token punctuation">></span></span> <span class="token function">getCaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CaptchaVo</span> result <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">getCaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//LoginServiceImpl.java</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CaptchaVo</span> <span class="token function">getCaptcha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpecCaptcha</span> specCaptcha <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpecCaptcha</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转小写</span>        <span class="token class-name">String</span> verCode <span class="token operator">=</span> specCaptcha<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 存入redis并设置过期时间为2分钟</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>verCode<span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CaptchaVo</span><span class="token punctuation">(</span>specCaptcha<span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    CaptchaVo.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"图像验证码"</span><span class="token punctuation">)</span><span class="token comment">//该注解会自动生成一个包含所有字段的构造方法（即全参构造器）</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaptchaVo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"验证码图片信息"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> image<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"验证码key"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-登录校验的实现"><a href="#4-登录校验的实现" class="headerlink" title="(4)登录校验的实现"></a>(4)登录校验的实现</h4><h5 id="登录校验逻辑"><a href="#登录校验逻辑" class="headerlink" title="登录校验逻辑"></a>登录校验逻辑</h5><p>​    用户登录的校验逻辑分为三个主要步骤，分别是<strong>校验验证码</strong>，<strong>校验用户状态</strong>和<strong>校验密码</strong>，具体逻辑如下</p><ul><li>前端发送username、password、captchaKey、captchaCode请求登录</li><li>判断captchaCode是否为空，若为空，则直接响应验证码为空；若不为空进行下一步判断</li><li>根据captchaKey从Redis中查询之前保存的code，若查询出来的code为空，则直接响验证码已过期；若不为空进行下一步判断</li><li>比较captchaCode和code，若不相同，则直接响应验证码不正确；若相同则进行下一步判断</li><li>根据username查询数据库，若查询结果为空，则直接响应账号不存在；若不为空则进行下一步判断</li><li>查看用户状态，判断是否被禁用，若禁用，则直接响应账号被禁；若未被禁用，则进行下一步判断</li><li>比对password和数据库中查询的密码，若不一致，则直接响应账号或密码错误，若一致则进行入最后一步</li><li>创建JWT，并响应给浏览器</li></ul><h5 id="易错点-5"><a href="#易错点-5" class="headerlink" title="易错点"></a>易错点</h5><p>​    1.用户前端传入的密码在与数据库比较时，需要使用md5进行处理后再与数据库进行匹配</p><p>​    2.数据库的密码是因为之前设置会被MtbatisPlus查询时忽略，所以查询用户信息需要手写sql</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><p>​    controller和service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//LoginController.java</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">LoginVo</span> loginVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> JWT <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>JWT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//LoginServiceImpl.java</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">SystemUserMapper</span> systemUserMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">LoginVo</span> loginVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginVo<span class="token punctuation">.</span><span class="token function">getCaptchaCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>ADMIN_CAPTCHA_CODE_NOT_FOUND<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ADMIN_CAPTCHA_CODE_NOT_FOUND<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">.</span><span class="token function">getCaptchaKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>ADMIN_CAPTCHA_CODE_EXPIRED<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ADMIN_CAPTCHA_CODE_EXPIRED<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">.</span><span class="token function">getCaptchaKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">.</span><span class="token function">getCaptchaCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>ADMIN_CAPTCHA_CODE_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ADMIN_CAPTCHA_CODE_ERROR<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//自定义查询，根据name查出systemUser</span>        <span class="token class-name">SystemUser</span> systemUser <span class="token operator">=</span> systemUserMapper<span class="token punctuation">.</span><span class="token function">selectOneAll</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>systemUser <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>ADMIN_ACCOUNT_NOT_EXIST_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ADMIN_ACCOUNT_NOT_EXIST_ERROR<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>systemUser<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DISABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>ADMIN_ACCOUNT_DISABLED_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ADMIN_ACCOUNT_DISABLED_ERROR<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//用户的密码是需要md5处理的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>systemUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>ADMIN_ACCOUNT_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ADMIN_ACCOUNT_ERROR<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//JWT的生成见(5)</span>        <span class="token keyword">return</span> <span class="token class-name">JwtUtils</span><span class="token punctuation">.</span><span class="token function">createJWT</span><span class="token punctuation">(</span>systemUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> systemUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-JWT的实现"><a href="#5-JWT的实现" class="headerlink" title="(5)JWT的实现"></a>(5)JWT的实现</h4><p>​    登录接口需要为登录成功的用户创建并返回JWT，本项目使用开源的JWT工具<strong>JJWT</strong>，配置如下，具体内容可参考<a href="https://github.com/jwtk/jjwt/tree/0.11.2">官方文档</a></p><h5 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h5><ul><li><p><strong>引入Maven依赖</strong></p><p>在<strong>common模块</strong>的pom.xml文件中增加如下内容</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jjwt-jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>创建JWT工具类</strong></p><p>在<strong>common模块</strong>下创建<code>com.rain.lease.common.utils.JwtUtil</code>工具类，内容如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//由JJWT提供的Keys把字节数组转换成一个合法的 SecretKey</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SecretKey</span> secretKey <span class="token operator">=</span> <span class="token class-name">Keys</span><span class="token punctuation">.</span><span class="token function">hmacShaKeyFor</span><span class="token punctuation">(</span><span class="token string">"sdhlqdfhewfldadadsdwfdefaw3edaw3vwwdr"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建JWT</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createJWT</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> JWT <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"User_Login"</span><span class="token punctuation">)</span>                <span class="token comment">//设置有效时间</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">claim</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>                <span class="token comment">//给 JWT 自动加上头部和签名</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">,</span> <span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JWT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-Token的校验"><a href="#6-Token的校验" class="headerlink" title="(6)Token的校验"></a>(6)Token的校验</h4><h5 id="Token校验的思路"><a href="#Token校验的思路" class="headerlink" title="Token校验的思路"></a>Token校验的思路</h5><p>​    读取token，如果token正常读取，不报异常，则认为token有效</p><h5 id="代码：在JwtUtil工具类中增加以下方法"><a href="#代码：在JwtUtil工具类中增加以下方法" class="headerlink" title="代码：在JwtUtil工具类中增加以下方法"></a>代码：在JwtUtil工具类中增加以下方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parseToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//解析token，如果不报异常则token有效</span>   <span class="token keyword">try</span><span class="token punctuation">&#123;</span>       <span class="token class-name">JwtParser</span> jwtParser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//claimsJws 是 token 解析的对象，包含所有 token 信息</span>       <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> claimsJws <span class="token operator">=</span> jwtParser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>TOKEN_EXPIRED<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>TOKEN_EXPIRED<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>TOKEN_INVALID<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>TOKEN_INVALID<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：</p><blockquote><p>Jws<Claims> jws = jwtParser.parseClaimsJws(token);  //仍然得到的是一个对象 <code>jws</code>，里面包含了 JWT 的三部分</p><p>jws.getHeader(); // JWT 的 header 部分，包含算法等<br>jws.getBody();   // JWT 的 payload 部分，就是 Claims<br>jws.getSignature(); // 签名字符串</p></blockquote><h4 id="7-拦截器-实现全局token校验"><a href="#7-拦截器-实现全局token校验" class="headerlink" title="(7)拦截器-实现全局token校验"></a>(7)拦截器-实现全局token校验</h4><p>​    拦截器放在web-admin里面，不要放到common包下了，它只作为自己的拦截器</p><h5 id="拦截器代码"><a href="#拦截器代码" class="headerlink" title="拦截器代码"></a>拦截器代码</h5><p>​    编写拦截器：在<strong>web-admin模块</strong>中创建<code>com.rain.lease.web.admin.custom.interceptor.AuthenticationInterceptor</code>类</p><p>​    逻辑：在controller执行前对所有请求进行拦截，校验请求头中包含token的字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取请求头中的token，参数需要与前端约定</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"access-token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>ADMIN_LOGIN_AUTH<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ADMIN_LOGIN_AUTH<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">JwtUtils</span><span class="token punctuation">.</span><span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    拦截器注册：在<strong>web-admin模块</strong>的<code>com.rain.lease.web.admin.custom.config.WebMvcConfiguration</code>中增加如下内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">StringToBaseEnumConverterFactory</span> stringToBaseEnumConverterFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">AuthenticationInterceptor</span> authenticationInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>stringToBaseEnumConverterFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//注册拦截器，并设置拦截范围</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>authenticationInterceptor<span class="token punctuation">)</span>        <span class="token comment">//对/admin的所有请求进行拦截</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span>                <span class="token comment">//对/admin/login的请求放行</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/admin/login/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-Knife4j配置"><a href="#8-Knife4j配置" class="headerlink" title="(8)Knife4j配置"></a>(8)Knife4j配置</h4><p>​    在增加拦截器后，为方便继续调试其他接口，可以获取一个长期有效的Token，配置一年，将其配置到Knife4j的全局参数中，如下图所示</p><p><a href="https://imgse.com/i/pVe1J1A"><img src="https://s21.ax1x.com/2025/06/24/pVe1J1A.png" alt="全局参数"></a></p><p>​    <strong>注意：</strong>每个接口分组需要单独配置，配置好后刷新页面就可对任选接口进行调试</p><p>​    配置好后发送请求时会自动携带该header，如下图所示</p><p><a href="https://imgse.com/i/pVe1d78"><img src="https://s21.ax1x.com/2025/06/24/pVe1d78.png" alt="Knife4j接口封装请求头"></a></p><h4 id="9-获取登录用户个人信息（接口）"><a href="#9-获取登录用户个人信息（接口）" class="headerlink" title="(9)获取登录用户个人信息（接口）"></a>(9)获取登录用户个人信息（接口）</h4><p>​    该接口主要用于，当用户登录成功后，前台发送请求给后台获得用户姓名和头像，并显示在系统首页</p><h5 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h5><p>​    因为用户登录相关的信息已经封装在token中，而登录成功后token被保存在客户端，该接口需要验证token后才可以正常响应，可以在token中获得用户信息（拦截器中）并保存在ThreadLocal（需自己写类）中，从本地线程获取用户id，再通过数据库查询到完整信息并返回</p><h5 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h5><p>​    首先对JWT工具类的parseToken方法进行改造，返回JWT对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> <span class="token function">parseToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">try</span><span class="token punctuation">&#123;</span>       <span class="token comment">//解析token，如果不报异常则token有效</span>       <span class="token class-name">JwtParser</span> jwtParser <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parserBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//claimsJws是token解析的对象包含所有token信息</span>       <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> claimsJws <span class="token operator">=</span> jwtParser<span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> claimsJws<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>TOKEN_EXPIRED<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>TOKEN_EXPIRED<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JwtException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>TOKEN_INVALID<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>TOKEN_INVALID<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    controller和service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//LoginController.java</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"获取登陆用户个人信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SystemUserInfoVo</span><span class="token punctuation">></span></span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"access-token"</span><span class="token punctuation">)</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> claimsJws <span class="token operator">=</span> <span class="token class-name">JwtUtils</span><span class="token punctuation">.</span><span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Claims</span> body <span class="token operator">=</span> claimsJws<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SystemUserInfoVo</span> systemUserInfoVo <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">getInfoById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>systemUserInfoVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//LoginServiceImpl.java</span><span class="token keyword">public</span> <span class="token class-name">SystemUserInfoVo</span> <span class="token function">getInfoById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SystemUser</span> systemUser <span class="token operator">=</span> systemUserMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SystemUserInfoVo</span> systemUserInfoVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemUserInfoVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    systemUserInfoVo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>systemUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    systemUserInfoVo<span class="token punctuation">.</span><span class="token function">setAvatarUrl</span><span class="token punctuation">(</span>systemUser<span class="token punctuation">.</span><span class="token function">getAvatarUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> systemUserInfoVo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ThreadLocal对上述业务优化"><a href="#ThreadLocal对上述业务优化" class="headerlink" title="ThreadLocal对上述业务优化"></a>ThreadLocal对上述业务优化</h5><p>​    上述功能中，因为token在拦截器就会进行校验，而controller中又进行一次，就会使得token重复校验。优化方式为，在拦截器校验时检验并获取userId，将这个userId存储到ThreadLocal，那么该线程在完整处理这次请求前都可以通过访问ThreadLocal来获得</p><blockquote><p><strong>ThreadLocal概述</strong></p><p>ThreadLocal的主要作用是为每个使用它的线程提供一个独立的变量副本，使每个线程都可以操作自己的变量，而不会互相干扰，其用法如下图所示。</p><p><a href="https://imgse.com/i/pVmT61K"><img src="https://s21.ax1x.com/2025/06/27/pVmT61K.png" alt="ThreadLocal"></a></p></blockquote><p>​    在<strong>common模块</strong>中创建<code>com.rain.lease.common.login.LoginUser</code>类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUser</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在<strong>common模块</strong>中创建<code>com.rain.lease.common.login.LoginUserHolder</code>工具类，这是开发者自定义的封装类，用于方便使用 <code>ThreadLocal</code>，**<code>Holder</code>** 的英文 <strong>“持有者、容器、保存器”</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUserHolder</span> <span class="token punctuation">&#123;</span><span class="token comment">//ThreadLocal&lt;T> 是一个泛型类，意思是它可以保存任意类型的数据->T，其为每个线程提供一个“独立的变量副本”，让同一个变量在不同线程中互不干扰</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginUser</span><span class="token punctuation">></span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setLoginUser</span><span class="token punctuation">(</span><span class="token class-name">LoginUser</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LoginUser</span> <span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    三个方法定义逻辑如下：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>setLoginUser()</code></td><td>在请求刚进入时设置当前登录用户</td></tr><tr><td><code>getLoginUser()</code></td><td>在任意业务代码中获取当前线程的登录用户</td></tr><tr><td><code>clear()</code></td><td>请求结束后清除，避免线程池引发内存泄漏</td></tr></tbody></table><p>​    拦截器代码修改为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//AuthenticationInterceptor.java</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取请求头中的token，参数需要与前端约定</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"access-token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>ADMIN_LOGIN_AUTH<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ADMIN_LOGIN_AUTH<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> claimsJws <span class="token operator">=</span> <span class="token class-name">JwtUtils</span><span class="token punctuation">.</span><span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Claims</span> body <span class="token operator">=</span> claimsJws<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这两个都是自定义塞进去的，需要根据塞进去时的字符串取出，第二参数若省略则结果都为Object类型</span>        <span class="token class-name">Long</span> userId <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> userName <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LoginUserHolder</span><span class="token punctuation">.</span><span class="token function">setLoginUser</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//请求销毁时执行，因为Spring是线程池技术，所以线程要把本地变量清干净</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LoginUserHolder</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    controller层代码修改为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//LoginController.java</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"获取登陆用户个人信息"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SystemUserInfoVo</span><span class="token punctuation">></span></span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token class-name">LoginUserHolder</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SystemUserInfoVo</span> systemUserInfoVo <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">getInfoById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>systemUserInfoVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>至此后台管理系统业务逻辑完结</code></p><hr><h1 id="二、移动端用户后端业务逻辑"><a href="#二、移动端用户后端业务逻辑" class="headerlink" title="二、移动端用户后端业务逻辑"></a>二、移动端用户后端业务逻辑</h1><h3 id="1-MapperScan-“包路径”-注解"><a href="#1-MapperScan-“包路径”-注解" class="headerlink" title="1. @MapperScan(“包路径”)注解"></a>1. @MapperScan(“包路径”)注解</h3><p>​    <code>@MapperScan</code> 注解写在springboot启动类或mybatis配置类上，使用后可以自动扫描指定包下的所有 Mapper 接口类，该包下每个 Mapper 接口类上，不再需要写 <code>@Mapper</code> 注解</p><h3 id="2-ConditionalOnProperty注解"><a href="#2-ConditionalOnProperty注解" class="headerlink" title="2. @ConditionalOnProperty注解"></a>2. @ConditionalOnProperty注解</h3><p>​    <code>@ConditionalOnProperty注解</code>一般写在有 <code>@Configuration</code> 注解的配置类上或有<code>@Bean</code> 方法上，其作用是<strong>按配置文件（application.ynl）中的属性值是否存在</strong>来决定配置类或bean是否生效</p><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><p>​    name对应属性值，当yml中属性值存在，@ConditionalOnProperty注解下的配置类生效，当yml中属性值不存在，则配置类不生效</p><pre class="line-numbers language-none"><code class="language-none">@ConditionalOnProperty(name &#x3D; &quot;feature.captcha&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    对应yml</p><pre class="line-numbers language-none"><code class="language-none">feature:  captcha: xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h5><p>​    由于common模块中配置了MinioClient这个Bean，并且<strong>web-app模块</strong>依赖于<strong>common模块</strong>，因此在启动<strong>AppWebApplication</strong>时，SpringBoot会创建一个MinioClient实例，但是由于web-app模块的application.yml文件中并未提供MinioClient所需的参数（web-app模块暂时不需要使用MinioClient），因此MinioClient实例的创建会失败，进而导致AppWebApplication启动失败</p><p>​    解决：使用@ConditionalOnProperty注解，使得yml没有该属性配置时，MinioConfiguration不再创建，Bean不会再注入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">MinioProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"minio.endpoint"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MinioProperties</span> properties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MinioClient</span> <span class="token function">minioClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">MinioClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getAccessKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    要想使用时，yml配置应为（截自admin的application.yml）</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">minio</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.10.101<span class="token punctuation">:</span><span class="token number">9000</span>  <span class="token key atrule">access-key</span><span class="token punctuation">:</span> minioadmin  <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> minioadmin  <span class="token key atrule">bucket-name</span><span class="token punctuation">:</span> lease<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-移动端用户登录的实现（手机验证码）"><a href="#3-移动端用户登录的实现（手机验证码）" class="headerlink" title="3. 移动端用户登录的实现（手机验证码）"></a>3. 移动端用户登录的实现（手机验证码）</h3><h4 id="1-使用手机验证码的登录流程"><a href="#1-使用手机验证码的登录流程" class="headerlink" title="(1)使用手机验证码的登录流程"></a>(1)使用手机验证码的登录流程</h4><p><a href="https://imgse.com/i/pVnZx91"><img src="https://s21.ax1x.com/2025/06/28/pVnZx91.jpg" alt="登录流程"></a></p><p>​    根据上述登录流程，登录管理共需三个接口，分别是<strong>获取短信验证码2</strong>、<strong>登录4</strong>、<strong>查询登录用户的个人信息（和后台管理的差不多）7</strong>。除此之外，同样需要编写<code>HandlerInterceptor</code>来为所有受保护的接口增加验证JWT的逻辑</p><h4 id="2-获取短信验证码（阿里云）"><a href="#2-获取短信验证码（阿里云）" class="headerlink" title="(2)获取短信验证码（阿里云）"></a>(2)获取短信验证码（阿里云）</h4><p>​    从阿里云的sdk使用可以看出，要调用阿里云的短信服务需要：1.获取阿里云的client，2.创建sendSmsRequest对象，封装相关数据，并使用client发送，其中client可以使用spring容器进行管理，相关文档<a href="https://next.api.aliyun.com/api-tools/sdk/Dysmsapi?version=2017-05-25&language=java-tea&tab=primer-doc#doc-install-method">短信服务_SDK中心-阿里云</a></p><h5 id="短信验证码发送的实现步骤"><a href="#短信验证码发送的实现步骤" class="headerlink" title="短信验证码发送的实现步骤"></a>短信验证码发送的实现步骤</h5><p>​    1.引入阿里云的相关依赖</p><p>​    2.在application.yml中，配置调用阿里云的密钥信息（密钥在点头像-&gt;权限-&gt;AccessKey）</p><p>​    3.编写配置读取类，获得yml中的配置</p><p>​    4.编写client配置类，获得client</p><p>​    5.在service中封装SendSmsRequest，调用client发送该对象，实现短信的发送业务</p><p>​    1.引入阿里云的相关依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dysmsapi20170525<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在application.yml中，配置调用阿里云的密钥信息</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">aliyun</span><span class="token punctuation">:</span>  <span class="token key atrule">sms</span><span class="token punctuation">:</span>    <span class="token key atrule">access-key-id</span><span class="token punctuation">:</span> &lt;access<span class="token punctuation">-</span>key<span class="token punctuation">-</span>id<span class="token punctuation">></span>    <span class="token key atrule">access-key-secret</span><span class="token punctuation">:</span> &lt;access<span class="token punctuation">-</span>key<span class="token punctuation">-</span>secret<span class="token punctuation">></span>    <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> dysmsapi.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.编写配置读取类，获得yml中的配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//AliyunSMSProperties.java</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"aliyun.sms"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliyunSMSProperties</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeyId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeySecret<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> endpoint<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    4.编写client配置类，获得client，注意包应该为com.aliyun.dysmsapi20170525.Client;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//AliyunSmsConfiguration.java</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>dysmsapi20170525<span class="token punctuation">.</span></span><span class="token class-name">Client</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>teaopenapi<span class="token punctuation">.</span>models<span class="token punctuation">.</span></span><span class="token class-name">Config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnProperty</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">EnableConfigurationProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">AliyunSMSProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"aliyun.sms.endpoint"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliyunSmsConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AliyunSMSProperties</span> aliyunSMSProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Client</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setAccessKeyId</span><span class="token punctuation">(</span>aliyunSMSProperties<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setAccessKeySecret</span><span class="token punctuation">(</span>aliyunSMSProperties<span class="token punctuation">.</span><span class="token function">getAccessKeySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setEndpoint</span><span class="token punctuation">(</span>aliyunSMSProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    5.在service中封装SendSmsRequest，调用client发送该对象，实现短信的发送业务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SmsServiceImpl.java</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SmsService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Client</span> client<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SendSmsRequest</span> sendSmsRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendSmsRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sendSmsRequest<span class="token punctuation">.</span><span class="token function">setPhoneNumbers</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        sendSmsRequest<span class="token punctuation">.</span><span class="token function">setSignName</span><span class="token punctuation">(</span><span class="token string">"阿里云短信测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sendSmsRequest<span class="token punctuation">.</span><span class="token function">setTemplateCode</span><span class="token punctuation">(</span><span class="token string">"SMS_154950909"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sendSmsRequest<span class="token punctuation">.</span><span class="token function">setTemplateParam</span><span class="token punctuation">(</span><span class="token string">"&#123;\"code\":\""</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"\"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//调用阿里云API发送短信</span>            client<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span>sendSmsRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="后台登录验证码发送的实现"><a href="#后台登录验证码发送的实现" class="headerlink" title="后台登录验证码发送的实现"></a>后台登录验证码发送的实现</h5><p>​    1.需要生成随机验证码，并发送</p><p>​    2.以手机号为key，验证码为value，保存到redis中，并设置TTL</p><p>​    3.限制用户发送验证码的频率</p><p>​    创建工具类生成随机验证码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//CodeUtils.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeUtils</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    controller和service层代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//LoginController.java</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"login/getCode"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"获取短信验证码"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> phone<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    loginService<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//LoginServiceImpl.java</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SmsService</span> smsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token class-name">CodeUtils</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//防止盗刷，发送短信时先判断</span>        <span class="token class-name">Boolean</span> b <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//获取redis中key的ttl</span>            <span class="token class-name">Long</span> ttl <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//若小于60秒则禁止发短信</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">-</span>ttl <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>APP_SEND_SMS_TOO_OFTEN<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>APP_SEND_SMS_TOO_OFTEN<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//发送短信</span>        smsService<span class="token punctuation">.</span><span class="token function">sendCode</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存到redis中并设置过期时间（TTL）为10分钟</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> code<span class="token punctuation">,</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-登录与注册功能（二合一）"><a href="#3-登录与注册功能（二合一）" class="headerlink" title="(3)登录与注册功能（二合一）"></a>(3)登录与注册功能（二合一）</h4><h5 id="登录与注册的校验逻辑"><a href="#登录与注册的校验逻辑" class="headerlink" title="登录与注册的校验逻辑"></a>登录与注册的校验逻辑</h5><ul><li>前端发送手机号码<code>phone</code>和接收到的短信验证码<code>code</code>到后端</li><li>首先校验<code>phone</code>和<code>code</code>是否为空，若为空，直接响应<code>手机号码为空</code>或者<code>验证码为空</code>，若不为空则进入下步判断</li><li>根据<code>phone</code>从Redis中查询之前保存的验证码，若查询结果为空，则直接响应<code>验证码已过期</code> ，若不为空则进入下一步判断</li><li>比较前端发送的验证码和从Redis中查询出的验证码，若不同，则直接响应<code>验证码错误</code>，若相同则进入下一步判断</li><li>使用<code>phone</code>从数据库中查询用户信息，若查询结果为空，则创建新用户，并将用户保存至数据库，然后进入下一步判断</li><li>判断用户是否被禁用，若被禁，则直接响应<code>账号被禁用</code>，否则进入下一步</li><li>创建JWT并响应给前端</li></ul><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><p>​    controller和service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//LoginController.java</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">LoginVo</span> loginVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> jwt <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//LoginServiceImpl.java</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">LoginVo</span> loginVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loginVo<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>APP_LOGIN_PHONE_EMPTY<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>APP_LOGIN_PHONE_EMPTY<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loginVo<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>APP_LOGIN_CODE_EMPTY<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>APP_LOGIN_CODE_EMPTY<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>APP_LOGIN_CODE_EXPIRED<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>APP_LOGIN_CODE_EXPIRED<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loginVo<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loginVo<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>APP_LOGIN_CODE_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>APP_LOGIN_CODE_ERROR<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> phone <span class="token operator">=</span> loginVo<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span><span class="token operator">::</span><span class="token function">getPhone</span><span class="token punctuation">,</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> userInfoMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userInfo<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//这里必须得new，不然空指针异常</span>        userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfo<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">"新用户"</span><span class="token operator">+</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        userInfoMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LeaseException</span><span class="token punctuation">(</span>APP_ACCOUNT_DISABLED_ERROR<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>APP_ACCOUNT_DISABLED_ERROR<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//这里我也不太清楚他项目的逻辑为什么的phone为用户名，那个nickname当昵称吧</span>    <span class="token comment">//这里新用户为什么能获得到id是因为虽然没手动 setId()，但 MyBatis-Plus在insert(userInfo)之后，自动把数据库生成的ID填回了userInfo.id</span>    <span class="token keyword">return</span> <span class="token class-name">JwtUtils</span><span class="token punctuation">.</span><span class="token function">createJWT</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>userInfo<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-拦截器-对token进行校验"><a href="#4-拦截器-对token进行校验" class="headerlink" title="(4)拦截器-对token进行校验"></a>(4)拦截器-对token进行校验</h4><p>​    注意：使用拦截器后需要在knife4j的请求头上添加token键值对</p><h5 id="拦截器实现"><a href="#拦截器实现" class="headerlink" title="拦截器实现"></a>拦截器实现</h5><p>​    在<strong>web-app模块</strong>创建<code>com.rain.lease.web.app.custom.interceptor.AuthenticationInterceptor</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"access-token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Jws</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Claims</span><span class="token punctuation">></span></span> claimsJws <span class="token operator">=</span> <span class="token class-name">JwtUtils</span><span class="token punctuation">.</span><span class="token function">parseToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Claims</span> claims <span class="token operator">=</span> claimsJws<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> userId <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这个是common模块提供的专门实现login的类</span>        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这个类都是静态方法，也是common模块提供的</span>        <span class="token class-name">LoginUserHolder</span><span class="token punctuation">.</span><span class="token function">setLoginUser</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LoginUserHolder</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注册拦截器，在<strong>web-app模块</strong>创建<code>com.rain.lease.web.app.custom.config.WebMvcConfiguration</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationInterceptor</span> authenticationInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>authenticationInterceptor<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/app/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/app/login/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-查询登录用户的个人信息"><a href="#5-查询登录用户的个人信息" class="headerlink" title="(5)查询登录用户的个人信息"></a>(5)查询登录用户的个人信息</h4><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>​    controller和service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//LoginController.java</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"获取登录用户信息"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfoVo</span><span class="token punctuation">></span></span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token class-name">LoginUserHolder</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> userId <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserInfoVo</span> userInfoVo <span class="token operator">=</span> loginService<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>userInfoVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//LoginServiceImpl.java</span><span class="token keyword">public</span> <span class="token class-name">UserInfoVo</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> userInfoMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserInfoVo</span> userInfoVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfoVo</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>userInfo<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> userInfoVo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-分页查询房间列表（分页中使用-lt-collection-gt-）"><a href="#4-分页查询房间列表（分页中使用-lt-collection-gt-）" class="headerlink" title="4. 分页查询房间列表（分页中使用&lt;collection&gt; ）"></a>4. 分页查询房间列表（分页中使用<code>&lt;collection&gt;</code> ）</h3><p>​    使用Mybatis-Plus的分页插件进行分页查询时，如果结果需要使用<code>&lt;collection&gt;</code>进行映射，只能使用<a href="https://mybatis.org/mybatis-3/sqlmap-xml.html#nested-select-for-collection">嵌套查询（Nested Select for Collection）</a>，而不能使用<a href="https://mybatis.org/mybatis-3/sqlmap-xml.html#nested-results-for-collection">嵌套结果映射（Nested Results for Collection）</a></p><table><thead><tr><th>名称</th><th>描述</th><th>是否支持分页插件（MyBatis-Plus）</th></tr></thead><tbody><tr><td><strong>嵌套结果映射（Nested Results）</strong></td><td>用一条 SQL 联表查出所有数据，然后用 <code>&lt;collection&gt;</code> 自动封装集合</td><td>❌ 不支持</td></tr><tr><td><strong>嵌套查询映射（Nested Select）</strong></td><td>先查主表，再按主键去子表中查，使用 <code>&lt;collection select=&quot;...&quot;/&gt;</code> 查询集合</td><td>✅ 支持</td></tr></tbody></table><p>​    <code>注意：只要不分页，这两种方式（嵌套结果 &amp; 嵌套查询）在功能上确实没什么本质区别</code></p><h5 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h5><p>​    <code>详细使用见(2)，一定要注意全限定名的地方</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>collection    property<span class="token operator">=</span><span class="token string">"attrValueList"</span>    ofType<span class="token operator">=</span><span class="token string">"com.rain.AttrValue"</span>    column<span class="token operator">=</span><span class="token string">"id"</span>    select<span class="token operator">=</span><span class="token string">"selectAttrValuesByAttrKeyId"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>property=&quot;attrValueList&quot;</code>：表示VO 中的字段名</li><li><code>ofType=&quot;com.rain.AttrValue&quot;</code>：集合中的元素类型的全限定名</li><li><code>column=&quot;...&quot;</code> ：指定了从主查询结果中提取哪个字段，作为参数传给 <code>select=&quot;...&quot;</code> 子查询的方法</li><li><code>select=&quot;selectAttrValuesByAttrKeyId&quot;</code>：里面填子查询定义的id名</li></ul><h5 id="易错点：collection使用autoMapping后是否需要配置id"><a href="#易错点：collection使用autoMapping后是否需要配置id" class="headerlink" title="易错点：collection使用autoMapping后是否需要配置id"></a>易错点：collection使用autoMapping后是否需要配置id</h5><table><thead><tr><th>使用场景</th><th><code>&lt;collection&gt;</code> 需不需要 <code>&lt;id&gt;</code></th></tr></thead><tbody><tr><td>联表查询（一张结果表）(嵌套结果映射)</td><td>✅ 必须手动写 <code>&lt;id&gt;</code>，MyBatis 需要聚合</td></tr><tr><td>嵌套查询（select=”…”)</td><td>❌ 不需要写 <code>&lt;id&gt;</code>，MyBatis 已自动处理，但写了不会算错只影响别人阅读</td></tr></tbody></table><h4 id="1-图示说明：嵌套结果映射-amp-嵌套查询映射"><a href="#1-图示说明：嵌套结果映射-amp-嵌套查询映射" class="headerlink" title="(1)图示说明：嵌套结果映射&amp;嵌套查询映射"></a>(1)图示说明：嵌套结果映射&amp;嵌套查询映射</h4><p>​    注意：不想看原理记住这句话就行，MyBatis中，一对多的 <code>&lt;collection&gt;</code> 映射如果用于分页查询时，必须使用嵌套查询 ，否则分页乱套（适用Mybatis、MybatisPlus）</p><p>​    例：有<code>room_info</code>和<code>graph_info</code>两张表，其关系为一对多，如下</p><p><a href="https://imgse.com/i/pVuMaIU"><img src="https://s21.ax1x.com/2025/07/01/pVuMaIU.jpg" alt="两张表"></a></p><p>​    需要查询房间列表及其图片信息，期望返回的结果如下</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">201</span><span class="token punctuation">,</span>        <span class="token property">"rent"</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>        <span class="token property">"graphList"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://"</span><span class="token punctuation">,</span>                <span class="token property">"roomId"</span><span class="token operator">:</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://"</span><span class="token punctuation">,</span>                <span class="token property">"roomId"</span><span class="token operator">:</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"number"</span><span class="token operator">:</span> <span class="token number">202</span><span class="token punctuation">,</span>        <span class="token property">"rent"</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>        <span class="token property">"graphList"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://"</span><span class="token punctuation">,</span>                <span class="token property">"roomId"</span><span class="token operator">:</span> <span class="token number">2</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://"</span><span class="token punctuation">,</span>                <span class="token property">"roomId"</span><span class="token operator">:</span> <span class="token number">2</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="不分页时"><a href="#不分页时" class="headerlink" title="不分页时"></a>不分页时</h5><ul><li><p>嵌套结果映射</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectRoomPage<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RoomPageMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select ri.id room_id,           ri.number,           ri.rent,       gi.id graph_id,           gi.url,           gi.room_id    from room_info ri   left join graph_info gi on ri.id=gi.room_id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RoomPageMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RoomInfoVo<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>room_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>graphInfoList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GraphInfo<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>graph_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式的执行原理如下图所示</p><p><a href="https://imgse.com/i/pVuMsMR"><img src="https://s21.ax1x.com/2025/07/01/pVuMsMR.jpg" alt="嵌套结果映射（不分页）"></a></p></li><li><p>嵌套查询映射</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectRoomPage<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RoomPageMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,           number,           rent    from room_info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RoomPageMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RoomInfoVo<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>graphInfoList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GraphInfo<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGraphByRoomId<span class="token punctuation">"</span></span>  <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectGraphByRoomId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GraphInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,           url,       room_id    from graph_info    where room_id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这种方法使用两个独立的查询语句来获取一对多关系的数据。首先，Mybatis会执行主查询来获取<code>room_info</code>列表，然后对于每个<code>room_info</code>，Mybatis都会执行一次子查询来获取其对应的<code>graph_info</code>。</p><p><a href="https://imgse.com/i/pVuM6qx"><img src="https://s21.ax1x.com/2025/07/01/pVuM6qx.jpg" alt="嵌套查询映射（不分页）"></a></p></li></ul><h5 id="分页查询时：此时sql与上面一致"><a href="#分页查询时：此时sql与上面一致" class="headerlink" title="分页查询时：此时sql与上面一致"></a>分页查询时：此时sql与上面一致</h5><ul><li><p>嵌套结果映射</p><p><a href="https://imgse.com/i/pVuMRIO"><img src="https://s21.ax1x.com/2025/07/01/pVuMRIO.jpg" alt="嵌套结果映射（分页）"></a></p></li><li><p>嵌套查询映射</p><p><a href="https://imgse.com/i/pVuMhJe"><img src="https://s21.ax1x.com/2025/07/01/pVuMhJe.jpg" alt="嵌套查询映射（分页）"></a></p></li></ul><p>​    判断是否分页，看mapper方法中有没有page参数，传了就是分页，不传就是不分页</p><h4 id="2-分页查询房间列表-嵌套查询映射-实战（含排序）"><a href="#2-分页查询房间列表-嵌套查询映射-实战（含排序）" class="headerlink" title="(2)分页查询房间列表(嵌套查询映射)实战（含排序）"></a>(2)分页查询房间列表(嵌套查询映射)实战（含排序）</h4><p>​    嵌套查询映射实现的核心逻辑：在嵌套查询中，每一个 <code>&lt;collection&gt;</code> 都要单独写一个查询语句，查询语句的链接用where条件（子查询），是通过主查询（mapper类的info表以及其他非collection的表进行连接）查询出的select字段，最后这几个查询都通过resultMap进行组装</p><h5 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h5><p>​    核心：xml代码</p><p>​    注意：拼接时，#{}说用于占位符绑定参数，而${}用于字符串拼接（在order by 处有使用）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.app.mapper.RoomInfoMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RoomItemVoMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.app.vo.room.RoomItemVo<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apartmentInfo<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.model.entity.ApartmentInfo<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>apartment_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>graphVoList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.app.vo.graph.GraphVo<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GraphVoList<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>labelInfoList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.model.entity.LabelInfo<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LabelInfoList<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectPageVo<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RoomItemVoMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select ri.id,               ri.room_number,               ri.rent,               ai.id apartment_id,               ai.name,               ai.introduction,               ai.district_id,               ai.district_name,               ai.city_id,               ai.city_name,               ai.province_id,               ai.province_name,               ai.address_detail,               ai.latitude,               ai.longitude,               ai.phone,               ai.is_release        from room_info ri                 left join apartment_info ai on ri.apartment_id = ai.id and ai.is_deleted=0        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            ri.is_release = 1 and ri.is_deleted=0            and ri.id not in (select room_id from lease_agreement where is_deleted=0 and status in (2,5))            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.provinceId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and province_id = #&#123;queryVo.provinceId&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.cityId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and city_id = #&#123;queryVo.cityId&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.districtId!=null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and district_id = #&#123;queryVo.districtId&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.minRent != null and queryVo.maxRent != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and (ri.rent <span class="token entity named-entity" title="&gt;">&amp;gt;</span>= #&#123;queryVo.minRent&#125; and ri.rent <span class="token entity named-entity" title="&lt;">&amp;lt;</span>= #&#123;queryVo.maxRent&#125;)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.paymentTypeId != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and id in (select room_id from room_payment_type where is_deleted=0 and payment_type_id=#&#123;queryVo.paymentTypeId&#125;)            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryVo.orderType != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            order by ri.rent $&#123;queryVo.orderType&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GraphVoList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.app.vo.graph.GraphVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id graph_id,               name,               item_type,               item_id,               url        from graph_info gi        where is_deleted = 0          and gi.item_id = #&#123;id&#125;          and gi.item_type = 2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LabelInfoList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.model.entity.LabelInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id label_id,               type,               name        from label_info        where is_deleted = 0          and id in (select label_id                     from room_label                     where is_deleted = 0                       and room_id = #&#123;id&#125;)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    controller、service、mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//RoomController.java</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"分页查询房间列表"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"pageItem"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPage</span><span class="token punctuation">&lt;</span><span class="token class-name">RoomItemVo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">pageItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> <span class="token class-name">RoomQueryVo</span> queryVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomItemVo</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomItemVo</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> roomInfoService<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>queryVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//RoomInfoServiceImpl.java</span><span class="token keyword">public</span> <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomItemVo</span><span class="token punctuation">></span></span> <span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomItemVo</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token class-name">RoomQueryVo</span> queryVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> roomInfoMapper<span class="token punctuation">.</span><span class="token function">selectPageVo</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>queryVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//RoomInfoMapper.java</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomItemVo</span><span class="token punctuation">></span></span> <span class="token function">selectPageVo</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomItemVo</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token class-name">RoomQueryVo</span> queryVo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-浏览历史"><a href="#5-浏览历史" class="headerlink" title="5. 浏览历史"></a>5. 浏览历史</h3><p>​    浏览历史表，只要房间id、用户id和访问时间</p><h4 id="1-获取浏览历史（分页）"><a href="#1-获取浏览历史（分页）" class="headerlink" title="(1)获取浏览历史（分页）"></a>(1)获取浏览历史（分页）</h4><h5 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h5><p>​    核心：xml代码</p><p>​    注意：这里的room_id之所以需要使用result映射，不是实体类没有roomId，而是因为<code>&lt;collection&gt;</code> 中传入了room_id，Mybatis将其映射给了roomGraphVoList，从而导致实际映射时roomId为null，使用result映射可以解决该问题</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.app.mapper.BrowsingHistoryMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HistoryItemVoMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.app.vo.history.HistoryItemVo<span class="token punctuation">"</span></span> <span class="token attr-name">autoMapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>room_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roomId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roomGraphVoList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.app.vo.graph.GraphVo<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>room_id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GraphVoSelect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectPageH<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HistoryItemVoMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select bh.id,               bh.user_id,               bh.room_id,               bh.browse_time,               ri.room_number,               ri.rent,               ri.is_release,               ai.id apartment_id,               ai.name apartment_name,               ai.introduction,               ai.district_id,               ai.district_name,               ai.city_id,               ai.city_name,               ai.province_id,               ai.province_name,               ai.address_detail,               ai.latitude,               ai.longitude,               ai.phone,               ai.is_release        from browsing_history bh                 left join room_info ri on room_id = ri.id and ri.is_deleted = 0                 left join apartment_info ai on ri.apartment_id = ai.id and ai.is_deleted = 0        where bh.is_deleted = 0          and user_id = #&#123;userId&#125;        order by browse_time desc    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GraphVoSelect<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.rain.lease.web.app.vo.graph.GraphVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,               name,               item_type,               item_id,               url        from graph_info        where is_deleted = 0          and item_id = #&#123;room_id&#125;          and item_type = 2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    controller、service、mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//BrowsingHistoryController.java</span><span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"获取浏览历史"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"pageItem"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPage</span><span class="token punctuation">&lt;</span><span class="token class-name">HistoryItemVo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoryItemVo</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> userId <span class="token operator">=</span> <span class="token class-name">LoginUserHolder</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoryItemVo</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> browsingHistoryService<span class="token punctuation">.</span><span class="token function">selectPageH</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//BrowsingHistoryServiceImpl.java</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoryItemVo</span><span class="token punctuation">></span></span> <span class="token function">selectPageH</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoryItemVo</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoryItemVo</span><span class="token punctuation">></span></span> <span class="token function">selectPageH</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoryItemVo</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> browsingHistoryMapper<span class="token punctuation">.</span><span class="token function">selectPageH</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//BrowsingHistoryMapper.java</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoryItemVo</span><span class="token punctuation">></span></span> <span class="token function">selectPageH</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HistoryItemVo</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token class-name">Long</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-保存浏览历史-Async注解的使用"><a href="#2-保存浏览历史-Async注解的使用" class="headerlink" title="(2)保存浏览历史-@Async注解的使用"></a>(2)保存浏览历史-@Async注解的使用</h4><h5 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h5><p>​    保存浏览历史的这个动作应该在用户浏览房间详情时调用该方法，传递的参数有userId和roomId</p><h5 id="Async注解的使用与该功能代码实现"><a href="#Async注解的使用与该功能代码实现" class="headerlink" title="@Async注解的使用与该功能代码实现"></a>@Async注解的使用与该功能代码实现</h5><p>​    在roomController中有根据ID查询房间详细信息，其中调用的是service的getDetailById()方法，在方法最下面增加保存浏览历史的方法，需要注入history的service</p><p>​    根据ID查询房间详细信息的主要功能为查询，后面又增加了保存功能会影响查询的响应速度，所以，可以在调用保存的方法上增加异步注解，使用异步后，会另外开启一个线程执行保存浏览历史的方法，<code>注意：主线程的线程本地变量与新开的线程不共享</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//BrowsingHistoryServiceImpl.java</span><span class="token annotation punctuation">@Async</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveHistory</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"saveHistory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断用户是否首次浏览房间</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BrowsingHistory</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">BrowsingHistory</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">BrowsingHistory</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BrowsingHistory</span> browsingHistory <span class="token operator">=</span> browsingHistoryMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>browsingHistory<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//把浏览时间设置为当前时间</span>        browsingHistory<span class="token punctuation">.</span><span class="token function">setBrowseTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//更新这条浏览记录，这个方法是通过实体类的id进行更新</span>        browsingHistoryMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>browsingHistory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    browsingHistory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowsingHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    browsingHistory<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    browsingHistory<span class="token punctuation">.</span><span class="token function">setRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    browsingHistory<span class="token punctuation">.</span><span class="token function">setBrowseTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    browsingHistoryMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>browsingHistory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//RoomInfoServiceImpl.java的getDetailById(Long id)</span><span class="token comment">//保存浏览历史</span>browsingHistoryService<span class="token punctuation">.</span><span class="token function">saveHistory</span><span class="token punctuation">(</span><span class="token class-name">LoginUserHolder</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    使用@Async注解后，需要在springboot的启动类上添加@EnableAsync注解，开启异步支持</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.rain.lease.web.*.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableAsync</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppWebApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AppWebApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>至此，APP的业务逻辑完结</code></p><hr><h1 id="三、性能优化（redis缓存优化）"><a href="#三、性能优化（redis缓存优化）" class="headerlink" title="三、性能优化（redis缓存优化）"></a>三、性能优化（redis缓存优化）</h1><h3 id="1-redis缓存优化"><a href="#1-redis缓存优化" class="headerlink" title="1. redis缓存优化"></a>1. redis缓存优化</h3><h4 id="1-缓存优化的概述"><a href="#1-缓存优化的概述" class="headerlink" title="(1)缓存优化的概述"></a>(1)缓存优化的概述</h4><p>​    缓存优化的核心思想就是将一些原本保存在磁盘（例如MySQL）中的、经常访问并且查询开销比较大的数据，临时保存到内存（例如Redis）中。后序再访问相同数据时，就可直接从内存中获取结果，而无需再访问磁盘，由于内存的读写速度远高于磁盘，因此就能极大的提高程序的性能</p><p><a href="https://imgse.com/i/pVKFuB4"><img src="https://s21.ax1x.com/2025/07/03/pVKFuB4.jpg" alt="缓存优化图示"></a></p><p>​    使用缓存时，会面临一个问题：<strong>如何让数据库和缓存数据的一致</strong>，当数据库中的数据发生变化时，缓存中的数据也要同步更新，否则就会出现数据不一致的问题，解决该问题的方案有如下几个</p><ul><li>数据发生变化时，更新数据库的同时也更新缓存</li><li>数据发生变化时，更新数据库的同时删除缓存（本项目使用）</li></ul><p>​    在了解了缓存优化的核心思想后，我们以移动端中的<code>根据ID获取房间详情</code>接口为例，进行缓存优化。该接口涉及多表查询，查询时会多次访问数据库，查询代价较高，故可采取缓存优化，加快查询速度</p><p>​    <code>缓存优化是对service层进行优化</code></p><h4 id="2-根据ID获取房间详情（原service层方法）"><a href="#2-根据ID获取房间详情（原service层方法）" class="headerlink" title="(2)根据ID获取房间详情（原service层方法）"></a>(2)根据ID获取房间详情（原service层方法）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//RoomInfoServiceImpl.java</span><span class="token keyword">public</span> <span class="token class-name">RoomDetailVo</span> <span class="token function">getDetailById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.查询房间信息</span>    <span class="token class-name">RoomInfo</span> roomInfo <span class="token operator">=</span> roomInfoMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>roomInfo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.查询图片</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphVo</span><span class="token punctuation">></span></span> graphVoList <span class="token operator">=</span> graphInfoMapper<span class="token punctuation">.</span><span class="token function">selectListByItemTypeAndId</span><span class="token punctuation">(</span><span class="token class-name">ItemType</span><span class="token punctuation">.</span>ROOM<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.查询租期</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LeaseTerm</span><span class="token punctuation">></span></span> leaseTermList <span class="token operator">=</span> leaseTermMapper<span class="token punctuation">.</span><span class="token function">selectListByRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.查询配套</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FacilityInfo</span><span class="token punctuation">></span></span> facilityInfoList <span class="token operator">=</span> facilityInfoMapper<span class="token punctuation">.</span><span class="token function">selectListByRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.查询标签</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LabelInfo</span><span class="token punctuation">></span></span> labelInfoList <span class="token operator">=</span> labelInfoMapper<span class="token punctuation">.</span><span class="token function">selectListByRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6.查询支付方式</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentType</span><span class="token punctuation">></span></span> paymentTypeList <span class="token operator">=</span> paymentTypeMapper<span class="token punctuation">.</span><span class="token function">selectListByRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.查询基本属性</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrValueVo</span><span class="token punctuation">></span></span> attrValueVoList <span class="token operator">=</span> attrValueMapper<span class="token punctuation">.</span><span class="token function">selectListByRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//8.查询杂费信息</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FeeValueVo</span><span class="token punctuation">></span></span> feeValueVoList <span class="token operator">=</span> feeValueMapper<span class="token punctuation">.</span><span class="token function">selectListByApartmentId</span><span class="token punctuation">(</span>roomInfo<span class="token punctuation">.</span><span class="token function">getApartmentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//9.查询公寓信息</span>    <span class="token class-name">ApartmentItemVo</span> apartmentItemVo <span class="token operator">=</span> apartmentInfoService<span class="token punctuation">.</span><span class="token function">selectApartmentItemVoById</span><span class="token punctuation">(</span>roomInfo<span class="token punctuation">.</span><span class="token function">getApartmentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">RoomDetailVo</span> roomDetailVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoomDetailVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>roomInfo<span class="token punctuation">,</span> roomDetailVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomDetailVo<span class="token punctuation">.</span><span class="token function">setApartmentItemVo</span><span class="token punctuation">(</span>apartmentItemVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomDetailVo<span class="token punctuation">.</span><span class="token function">setGraphVoList</span><span class="token punctuation">(</span>graphVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomDetailVo<span class="token punctuation">.</span><span class="token function">setAttrValueVoList</span><span class="token punctuation">(</span>attrValueVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomDetailVo<span class="token punctuation">.</span><span class="token function">setFacilityInfoList</span><span class="token punctuation">(</span>facilityInfoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomDetailVo<span class="token punctuation">.</span><span class="token function">setLabelInfoList</span><span class="token punctuation">(</span>labelInfoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomDetailVo<span class="token punctuation">.</span><span class="token function">setPaymentTypeList</span><span class="token punctuation">(</span>paymentTypeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomDetailVo<span class="token punctuation">.</span><span class="token function">setFeeValueVoList</span><span class="token punctuation">(</span>feeValueVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomDetailVo<span class="token punctuation">.</span><span class="token function">setLeaseTermList</span><span class="token punctuation">(</span>leaseTermList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//保存浏览历史</span>    browsingHistoryService<span class="token punctuation">.</span><span class="token function">saveHistory</span><span class="token punctuation">(</span><span class="token class-name">LoginUserHolder</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> roomDetailVo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-缓存优化（根据ID获取房间详情）"><a href="#3-缓存优化（根据ID获取房间详情）" class="headerlink" title="(3)缓存优化（根据ID获取房间详情）"></a>(3)缓存优化（根据ID获取房间详情）</h4><p>​    首先存入Redis的数据，可以以房间id，即传过来的参数作为key。以方法返回值RoomDetailVo作为value</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>​    1.编写自定义配置类-RedisTemplate</p><p>​    2.在查询的方法中将查询结果保存至redis</p><p>​    3.在更新和删除方法中将redis中保存的数据清除</p><h5 id="自定义RedisTemplate"><a href="#自定义RedisTemplate" class="headerlink" title="自定义RedisTemplate"></a>自定义RedisTemplate</h5><p>​    <code>Spring-data-redis</code>提供了<code>StringRedisTemplate</code>和<code>RedisTemplate&lt;Object,Object&gt;</code>两个实例，但是两个实例均不满足当前需求，所以需要自定义RedisTemplate</p><p>​    在<strong>common模块</strong>中创建<code>com.rain.lease.common.redis.RedisConfiguration</code>类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">stringObjectRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接redis</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置key的序列化器</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置value的序列化器</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">java</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="为APP模块RoomController根据ID获取房间详情方法添加缓存逻辑（优化后的方法如下）"><a href="#为APP模块RoomController根据ID获取房间详情方法添加缓存逻辑（优化后的方法如下）" class="headerlink" title="为APP模块RoomController根据ID获取房间详情方法添加缓存逻辑（优化后的方法如下）"></a>为APP模块RoomController根据ID获取房间详情方法添加缓存逻辑（优化后的方法如下）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//RoomInfoServiceImpl.java</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">RoomDetailVo</span> <span class="token function">getDetailById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//首先查redis，若没有再去数据库查</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"room_detail_"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token class-name">RoomDetailVo</span> roomDetailVo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RoomDetailVo</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>roomDetailVo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.查询房间信息</span>        <span class="token class-name">RoomInfo</span> roomInfo <span class="token operator">=</span> roomInfoMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>roomInfo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.查询图片</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphVo</span><span class="token punctuation">></span></span> graphVoList <span class="token operator">=</span> graphInfoMapper<span class="token punctuation">.</span><span class="token function">selectListByItemTypeAndId</span><span class="token punctuation">(</span><span class="token class-name">ItemType</span><span class="token punctuation">.</span>ROOM<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.查询租期</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LeaseTerm</span><span class="token punctuation">></span></span> leaseTermList <span class="token operator">=</span> leaseTermMapper<span class="token punctuation">.</span><span class="token function">selectListByRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.查询配套</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FacilityInfo</span><span class="token punctuation">></span></span> facilityInfoList <span class="token operator">=</span> facilityInfoMapper<span class="token punctuation">.</span><span class="token function">selectListByRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.查询标签</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LabelInfo</span><span class="token punctuation">></span></span> labelInfoList <span class="token operator">=</span> labelInfoMapper<span class="token punctuation">.</span><span class="token function">selectListByRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.查询支付方式</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PaymentType</span><span class="token punctuation">></span></span> paymentTypeList <span class="token operator">=</span> paymentTypeMapper<span class="token punctuation">.</span><span class="token function">selectListByRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//7.查询基本属性</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttrValueVo</span><span class="token punctuation">></span></span> attrValueVoList <span class="token operator">=</span> attrValueMapper<span class="token punctuation">.</span><span class="token function">selectListByRoomId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//8.查询杂费信息</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FeeValueVo</span><span class="token punctuation">></span></span> feeValueVoList <span class="token operator">=</span> feeValueMapper<span class="token punctuation">.</span><span class="token function">selectListByApartmentId</span><span class="token punctuation">(</span>roomInfo<span class="token punctuation">.</span><span class="token function">getApartmentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//9.查询公寓信息</span>        <span class="token class-name">ApartmentItemVo</span> apartmentItemVo <span class="token operator">=</span> apartmentInfoService<span class="token punctuation">.</span><span class="token function">selectApartmentItemVoById</span><span class="token punctuation">(</span>roomInfo<span class="token punctuation">.</span><span class="token function">getApartmentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roomDetailVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoomDetailVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>roomInfo<span class="token punctuation">,</span> roomDetailVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        roomDetailVo<span class="token punctuation">.</span><span class="token function">setApartmentItemVo</span><span class="token punctuation">(</span>apartmentItemVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        roomDetailVo<span class="token punctuation">.</span><span class="token function">setGraphVoList</span><span class="token punctuation">(</span>graphVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>        roomDetailVo<span class="token punctuation">.</span><span class="token function">setAttrValueVoList</span><span class="token punctuation">(</span>attrValueVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>        roomDetailVo<span class="token punctuation">.</span><span class="token function">setFacilityInfoList</span><span class="token punctuation">(</span>facilityInfoList<span class="token punctuation">)</span><span class="token punctuation">;</span>        roomDetailVo<span class="token punctuation">.</span><span class="token function">setLabelInfoList</span><span class="token punctuation">(</span>labelInfoList<span class="token punctuation">)</span><span class="token punctuation">;</span>        roomDetailVo<span class="token punctuation">.</span><span class="token function">setPaymentTypeList</span><span class="token punctuation">(</span>paymentTypeList<span class="token punctuation">)</span><span class="token punctuation">;</span>        roomDetailVo<span class="token punctuation">.</span><span class="token function">setFeeValueVoList</span><span class="token punctuation">(</span>feeValueVoList<span class="token punctuation">)</span><span class="token punctuation">;</span>        roomDetailVo<span class="token punctuation">.</span><span class="token function">setLeaseTermList</span><span class="token punctuation">(</span>leaseTermList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把结果缓存到redis中</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>roomDetailVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//保存浏览历史</span>    browsingHistoryService<span class="token punctuation">.</span><span class="token function">saveHistory</span><span class="token punctuation">(</span><span class="token class-name">LoginUserHolder</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> roomDetailVo<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="为Admin模块RoomController保存与更新房间信息、根据ID删除房间service方法添加缓存删除逻辑（优化后的方法如下）"><a href="#为Admin模块RoomController保存与更新房间信息、根据ID删除房间service方法添加缓存删除逻辑（优化后的方法如下）" class="headerlink" title="为Admin模块RoomController保存与更新房间信息、根据ID删除房间service方法添加缓存删除逻辑（优化后的方法如下）"></a>为Admin模块RoomController保存与更新房间信息、根据ID删除房间service方法添加缓存删除逻辑（优化后的方法如下）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//优化后的保存与更新房间信息的方法</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrUpdateRoom</span><span class="token punctuation">(</span><span class="token class-name">RoomSubmitVo</span> roomSubmitVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> isUpdate <span class="token operator">=</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">saveOrUpdate</span><span class="token punctuation">(</span>roomSubmitVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//若为更新操作，则先删除与Room相关的各项信息列表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isUpdate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.删除原有graphInfoList</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphInfo</span><span class="token punctuation">></span></span> graphQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">GraphInfo</span><span class="token operator">::</span><span class="token function">getItemType</span><span class="token punctuation">,</span> <span class="token class-name">ItemType</span><span class="token punctuation">.</span>ROOM<span class="token punctuation">)</span><span class="token punctuation">;</span>        graphQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">GraphInfo</span><span class="token operator">::</span><span class="token function">getItemId</span><span class="token punctuation">,</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graphInfoService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>graphQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.删除原有roomAttrValueList</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomAttrValue</span><span class="token punctuation">></span></span> attrQueryMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attrQueryMapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomAttrValue</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roomAttrValueService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>attrQueryMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.删除原有roomFacilityList</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomFacility</span><span class="token punctuation">></span></span> facilityQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        facilityQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomFacility</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roomFacilityService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>facilityQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.删除原有roomLabelList</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomLabel</span><span class="token punctuation">></span></span> labelQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        labelQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomLabel</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roomLabelService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>labelQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.删除原有paymentTypeList</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomPaymentType</span><span class="token punctuation">></span></span> paymentQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paymentQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomPaymentType</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roomPaymentTypeService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>paymentQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.删除原有leaseTermList</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomLeaseTerm</span><span class="token punctuation">></span></span> termQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        termQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomLeaseTerm</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roomLeaseTermService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>termQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//删除缓存</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"room_detail_"</span><span class="token operator">+</span>roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//1.保存新的graphInfoList</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphVo</span><span class="token punctuation">></span></span> graphVoList <span class="token operator">=</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getGraphVoList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>graphVoList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphInfo</span><span class="token punctuation">></span></span> graphInfoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GraphVo</span> graphVo <span class="token operator">:</span> graphVoList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">GraphInfo</span> graphInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            graphInfo<span class="token punctuation">.</span><span class="token function">setItemType</span><span class="token punctuation">(</span><span class="token class-name">ItemType</span><span class="token punctuation">.</span>ROOM<span class="token punctuation">)</span><span class="token punctuation">;</span>            graphInfo<span class="token punctuation">.</span><span class="token function">setItemId</span><span class="token punctuation">(</span>roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            graphInfo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>graphVo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            graphInfo<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>graphVo<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            graphInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>graphInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        graphInfoService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>graphInfoList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.保存新的roomAttrValueList</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> attrValueIds <span class="token operator">=</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getAttrValueIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>attrValueIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomAttrValue</span><span class="token punctuation">></span></span> roomAttrValueList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> attrValueId <span class="token operator">:</span> attrValueIds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RoomAttrValue</span> roomAttrValue <span class="token operator">=</span> <span class="token class-name">RoomAttrValue</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roomId</span><span class="token punctuation">(</span>roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attrValueId</span><span class="token punctuation">(</span>attrValueId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            roomAttrValueList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>roomAttrValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        roomAttrValueService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>roomAttrValueList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//3.保存新的facilityInfoList</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> facilityInfoIds <span class="token operator">=</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getFacilityInfoIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>facilityInfoIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomFacility</span><span class="token punctuation">></span></span> roomFacilityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> facilityInfoId <span class="token operator">:</span> facilityInfoIds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RoomFacility</span> roomFacility <span class="token operator">=</span> <span class="token class-name">RoomFacility</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roomId</span><span class="token punctuation">(</span>roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">facilityId</span><span class="token punctuation">(</span>facilityInfoId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            roomFacilityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>roomFacility<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        roomFacilityService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>roomFacilityList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4.保存新的labelInfoList</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> labelInfoIds <span class="token operator">=</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getLabelInfoIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>labelInfoIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomLabel</span><span class="token punctuation">></span></span> roomLabelList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> labelInfoId <span class="token operator">:</span> labelInfoIds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RoomLabel</span> roomLabel <span class="token operator">=</span> <span class="token class-name">RoomLabel</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roomId</span><span class="token punctuation">(</span>roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">labelId</span><span class="token punctuation">(</span>labelInfoId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            roomLabelList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>roomLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        roomLabelService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>roomLabelList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//5.保存新的paymentTypeList</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> paymentTypeIds <span class="token operator">=</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getPaymentTypeIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>paymentTypeIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomPaymentType</span><span class="token punctuation">></span></span> roomPaymentTypeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> paymentTypeId <span class="token operator">:</span> paymentTypeIds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RoomPaymentType</span> roomPaymentType <span class="token operator">=</span> <span class="token class-name">RoomPaymentType</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roomId</span><span class="token punctuation">(</span>roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">paymentTypeId</span><span class="token punctuation">(</span>paymentTypeId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            roomPaymentTypeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>roomPaymentType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        roomPaymentTypeService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>roomPaymentTypeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//6.保存新的leaseTermList</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> leaseTermIds <span class="token operator">=</span> roomSubmitVo<span class="token punctuation">.</span><span class="token function">getLeaseTermIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>leaseTermIds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomLeaseTerm</span><span class="token punctuation">></span></span> roomLeaseTerms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> leaseTermId <span class="token operator">:</span> leaseTermIds<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">RoomLeaseTerm</span> roomLeaseTerm <span class="token operator">=</span> <span class="token class-name">RoomLeaseTerm</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roomId</span><span class="token punctuation">(</span>roomSubmitVo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leaseTermId</span><span class="token punctuation">(</span>leaseTermId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            roomLeaseTerms<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>roomLeaseTerm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        roomLeaseTermService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>roomLeaseTerms<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//优化后的根据ID删除房间的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeRoomById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.删除RoomInfo</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.删除graphInfoList</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GraphInfo</span><span class="token punctuation">></span></span> graphQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    graphQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">GraphInfo</span><span class="token operator">::</span><span class="token function">getItemType</span><span class="token punctuation">,</span> <span class="token class-name">ItemType</span><span class="token punctuation">.</span>ROOM<span class="token punctuation">)</span><span class="token punctuation">;</span>    graphQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">GraphInfo</span><span class="token operator">::</span><span class="token function">getItemId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    graphInfoService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>graphQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.删除attrValueList</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomAttrValue</span><span class="token punctuation">></span></span> attrQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    attrQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomAttrValue</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomAttrValueService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>attrQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.删除facilityInfoList</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomFacility</span><span class="token punctuation">></span></span> facilityQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    facilityQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomFacility</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomFacilityService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>facilityQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.删除labelInfoList</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomLabel</span><span class="token punctuation">></span></span> labelQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    labelQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomLabel</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomLabelService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>labelQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//6.删除paymentTypeList</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomPaymentType</span><span class="token punctuation">></span></span> paymentQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paymentQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomPaymentType</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomPaymentTypeService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>paymentQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//7.删除leaseTermList</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoomLeaseTerm</span><span class="token punctuation">></span></span> termQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    termQueryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">RoomLeaseTerm</span><span class="token operator">::</span><span class="token function">getRoomId</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    roomLeaseTermService<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>termQueryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"room_detail_"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用压力测试，测试添加缓存前后系统的性能</p><hr><h1 id="四、项目部署"><a href="#四、项目部署" class="headerlink" title="四、项目部署"></a>四、项目部署</h1><h3 id="1-Nginx的使用"><a href="#1-Nginx的使用" class="headerlink" title="1. Nginx的使用"></a>1. Nginx的使用</h3><h4 id="1-Nginx在项目部署的作用"><a href="#1-Nginx在项目部署的作用" class="headerlink" title="(1)Nginx在项目部署的作用"></a>(1)Nginx在项目部署的作用</h4><p>​    本项目使用虚拟机模拟服务器，完成前后端项目的部署，一共使用两台虚拟机分别部署前端和后端项目，具体的部署方案如下图所示：</p><p><a href="https://imgse.com/i/pVMwvLV"><img src="https://s21.ax1x.com/2025/07/07/pVMwvLV.jpg" alt="Nginx的作用"></a></p><p>​    图中，<code>server-01</code>用于部署移动端和后台管理系统的两个后端服务。<code>server02</code>部署Nginx，作为移动端和后台管理系统两个前端项目的web服务器，同时也作为两个后端服务的反向代理。也就是说Nginx作为所有请求的入口，若请求内容是静态资源，Nginx便直接返回；若请求的内容为动态资源（后端服务接口），Nginx便代理请求后端服务，然后将结果响应给客户端</p><h4 id="2-正向代理与反向代理"><a href="#2-正向代理与反向代理" class="headerlink" title="(2)正向代理与反向代理"></a>(2)正向代理与反向代理</h4><p>​    代理：是指在网络通信中，介于客户端和服务端之间的一个服务，客户端将请求发往代理服务，代理服务将请求转发到服务端，得到服务端响应后，再将结果响应为客户端，这一过程如下图所示：</p><p><a href="https://imgse.com/i/pVM0Ci4"><img src="https://s21.ax1x.com/2025/07/07/pVM0Ci4.jpg" alt="代理示意图"></a></p><p>​    代理的两种类型：正向代理和反向代理，两者的本质是相同的，都是位于客户端和服务端之间的一个”中间人“，只是两者代表的对象不同，正向代理是代表客户端向服务端发送请求，而反向代理是代表服务端接收客户端的请求</p><h5 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h5><p>​    某校园为了阻止学生沉迷于网络游戏，设计了一个防火墙，封锁了所有的游戏网站。聪明的小明同学，通过一个代理服务器，绕过了防火墙的封锁，这个代理服务器就是一个典型的正向代理</p><p>​    <a href="https://imgse.com/i/pVM01SA"><img src="https://s21.ax1x.com/2025/07/07/pVM01SA.jpg" alt="正向代理"></a></p><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h5><p>​    某电商平台由于日益增长的访问量，一台单一的后端服务器已经不能满足高并发的要求了，这时需要增设多个后端服务器，来分担压力。但是如何能够将客户端的请求均匀的分发到这多个后端服务器呢？一个最常用的方案便是使用代理服务，具体来讲，就是使用一个代理服务代表后端服务器接收请求，然后由代理服务将请求均匀的转发到多个后端服务器，这个代理服务就是一个典型的反向代理</p><p>​    <a href="https://imgse.com/i/pVM08yt"><img src="https://s21.ax1x.com/2025/07/07/pVM08yt.jpg" alt="反向代理"></a></p><h4 id="3-Nginx的安装"><a href="#3-Nginx的安装" class="headerlink" title="(3)Nginx的安装"></a>(3)Nginx的安装</h4><p>​    Nginx安装按图片的逻辑，需要在<code>server02</code>部署Nginx。Nginx官网有详细的安装步骤，具体内容可参考<a href="https://nginx.org/en/linux_packages.html">官方文档</a>，也可以直接按本文档的步骤安装</p><ol><li><p><strong>配置Nginx yum存储库</strong></p><p>创建<code>/etc/yum.repos.d/nginx.repo</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/yum.repos.d/nginx.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加如下内容</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[nginx-stable]</span><span class="token constant">name</span><span class="token attr-value"><span class="token punctuation">=</span>nginx stable repo</span><span class="token constant">baseurl</span><span class="token attr-value"><span class="token punctuation">=</span>http://nginx.org/packages/centos/$releasever/$basearch/</span><span class="token constant">gpgcheck</span><span class="token attr-value"><span class="token punctuation">=</span>1</span><span class="token constant">enabled</span><span class="token attr-value"><span class="token punctuation">=</span>1</span><span class="token constant">gpgkey</span><span class="token attr-value"><span class="token punctuation">=</span>https://nginx.org/keys/nginx_signing.key</span><span class="token constant">module_hotfixes</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token selector">[nginx-mainline]</span><span class="token constant">name</span><span class="token attr-value"><span class="token punctuation">=</span>nginx mainline repo</span><span class="token constant">baseurl</span><span class="token attr-value"><span class="token punctuation">=</span>http://nginx.org/packages/mainline/centos/$releasever/$basearch/</span><span class="token constant">gpgcheck</span><span class="token attr-value"><span class="token punctuation">=</span>1</span><span class="token constant">enabled</span><span class="token attr-value"><span class="token punctuation">=</span>0</span><span class="token constant">gpgkey</span><span class="token attr-value"><span class="token punctuation">=</span>https://nginx.org/keys/nginx_signing.key</span><span class="token constant">module_hotfixes</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>在线安装Nginx</strong></p><p>执行以下命令，安装Nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>启动Nginx</strong></p><p>执行以下命令启动Nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下命令查看Nginx运行状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下命令设置开机自启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>访问Nginx服务默认首页</strong></p><p>外部机，访问<code>http://192.168.10.102</code>，能访问到如下页面，则证明Nginx运行正常</p><p><a href="https://imgse.com/i/pVMBktg"><img src="https://s21.ax1x.com/2025/07/07/pVMBktg.png" alt="首页"></a></p></li></ol><h4 id="4-Nginx的重要目录、文件"><a href="#4-Nginx的重要目录、文件" class="headerlink" title="(4)Nginx的重要目录、文件"></a>(4)Nginx的重要目录、文件</h4><ol><li><strong>配置文件相关</strong>（几乎所有的功能通过配置文件实现）<ul><li><code>/etc/nginx/</code>：主要的Nginx配置文件目录</li><li><code>/etc/nginx/nginx.conf</code>：Nginx的主配置文件，包含全局配置信息</li></ul></li><li><strong>日志相关</strong><ul><li><code>/var/log/nginx/</code>：Nginx的日志文件目录，包括访问日志和错误日志</li><li><code>/var/log/nginx/access.log</code>：访问日志，记录所有进入服务器的请求</li><li><code>/var/log/nginx/error.log</code>：错误日志，记录服务器处理过程中的错误信息</li></ul></li></ol><h4 id="5-nginx-conf配置文件详述"><a href="#5-nginx-conf配置文件详述" class="headerlink" title="(5)nginx.conf配置文件详述"></a>(5)nginx.conf配置文件详述</h4><h5 id="nginx-conf配置文件的结构"><a href="#nginx-conf配置文件的结构" class="headerlink" title="nginx.conf配置文件的结构"></a>nginx.conf配置文件的结构</h5><blockquote><p>nginx.conf 每一项的格式为：参数名 空格 参数值 分号</p></blockquote><p>​    <code>nginx.conf</code>文件层次分明，整个文件分为多个区块（block），每个区块下可配置各种参数，也可包含其子级区块，具体结构如下图所示</p><p><a href="https://imgse.com/i/pVMBcjI"><img src="https://s21.ax1x.com/2025/07/07/pVMBcjI.jpg" alt="nginx.conf"></a></p><p>​    在图最下方<code>nginx.conf</code>通过<code> include /etc/nginx/conf.d/*.conf</code>引入了<code>/etc/nginx/conf.d</code>目录下的所有<code>.conf</code>文件，该目录下有个默认的配置文件-default.conf，其结构如下图所示</p><p>​    <a href="https://imgse.com/i/pVMBWHf"><img src="https://s21.ax1x.com/2025/07/07/pVMBWHf.png" alt="default.conf文件格式"></a></p><h5 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h5><pre class="line-numbers language-none"><code class="language-none">main（唯一）        ← 顶层配置，全局控制├── events（唯一）  ← 连接处理参数，一般不用动└── http（唯一）    ← HTTP 相关配置，可包含多个 server    ├── server（多个）    ← 每个 server 对应一个域名（或端口）    │   ├── location（多个） ← 每个 location 配 URL 路由规则    │   └── location（多个）    └── server（多个）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    nginx启动是先启动master process读取配置文件，然后启动工作进程（work process），工作进程越多，nginx的并发能力就越强</p><ul><li><p><strong>main block</strong></p><p><code>main block</code>位于配置文件的最外层，其包含了影响Nginx服务器整体行为的全局参数</p><ul><li><code>user</code>：定义Nginx工作进程（work process）的用户和用户组</li><li><code>worker_processes</code>：指定Nginx使用的工作进程数，auto则为当前电脑CPU的核数</li><li><code>error_log</code>：配置全局错误日志文件路径</li></ul></li><li><p><strong>events block（当前不展开讲）</strong></p><p><code>events block</code>位于<code>main block</code>中，用于配置Nginx服务器的事件处理机制，主要配置Nginx如何处理客户端连接。</p></li><li><p><strong>http block（密切相关）</strong></p><p><code>http block</code>位于<code>main block</code>中，用于配置HTTP服务器相关功能</p><ul><li><code>access_log</code>：指定访问日志的路径</li><li><code>log_format</code>：指定访问日志的格式</li></ul></li><li><p><strong>server block（可直接写，也可通过include引入）</strong></p><p>一般是一个server block放在一个.conf文件用include引入</p><p><code>server block</code>位于<code>http block</code>，用于配置虚拟主机（部署网站和项目），一个Nginx服务（master process）可包含多个虚拟主机，每个虚拟主机都可以独立的提供服务，因此借助Nginx，我们可以在一台服务器部署多个独立的网站，如下图所示</p><p>​    以下三个域名还是映射在同一个IP地址（放在同一个Nginx中），即一台服务器部署多个网站，当然，虽然能直接通过 IP+端口访问网站，但请求头的 Host 是 IP，Nginx 会尝试匹配 <code>server_name</code> 是 IP 的配置，找不到就走第一个 <code>server</code>（默认站点），不会自动识别你想访问哪个域名的站点，更不会串</p><p><a href="https://imgse.com/i/pVMD929"><img src="https://s21.ax1x.com/2025/07/07/pVMD929.png" alt="虚拟主机在nginx的配置"></a></p><p>每个虚拟主机使用一个<code>server block</code>进行配置，配置的内容包括</p><ul><li><code>listen</code>：虚拟主机监听的端口号。</li><li><code>server_name</code>：指定虚拟主机的域名或者IP。</li></ul></li><li><p><strong>location block</strong></p><p><code>location block</code>位于<code>server block</code>，用于配置请求的处理逻辑，一个<code>server block</code>中可以包含多个<code>location block</code>（<code>匹配路径按最优匹配</code>），例如</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> www<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span><span class="token keyword">index</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">root</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">location</span> <span class="token operator">/</span>api <span class="token punctuation">&#123;</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>backend<span class="token operator">-</span>api<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-Nginx的部署案例"><a href="#6-Nginx的部署案例" class="headerlink" title="(6)Nginx的部署案例"></a>(6)Nginx的部署案例</h4><h5 id="静态资源部署"><a href="#静态资源部署" class="headerlink" title="静态资源部署"></a>静态资源部署</h5><p>​    使用Nginx作为静态资源服务器。</p><p>​    项目资料中有一个简单的前端项目<code>hello-nginx</code>，其中只包含html、css等静态资源，现将其部署在<code>server02</code>上。</p><ol><li><p><strong>上传静态资源到服务器</strong></p><p>将<code>hello-nginx.zip</code>上传到<code>server02</code>服务器任意路径。</p></li><li><p><strong>解压<code>hello-nginx.zip</code>到<code>/usr/share/nginx/html</code>中</strong>：该路径是nginx指定的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> hello-nginx.zip -d /usr/share/nginx/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终的路径结构如下</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">&#x2F;usr└── share    └── nginx        └── html            └── hello-nginx                ├── css                │   └── style.css                ├── images                │   └── img.png                └── index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>配置Nginx虚拟主机</strong></p><p>虚拟主机的配置应位于<code>/etc/nginx/nginx.conf</code>的<strong>server block</strong>中，由于<code>/etc/nginx/nginx.conf</code>的<strong>http bolck</strong>中引入了<code>/etc/nginx/conf.d/*.conf</code>，所以虚拟主机在<code>/etc/nginx/conf.d/</code>目录下的任意<code>.conf</code>文件配置即可</p><ul><li><p>创建<code>/etc/nginx/conf.d/hello-nginx.conf</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/nginx/conf.d/hello-nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加如下内容</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  <span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.102</span><span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span>hello<span class="token operator">-</span>nginx <span class="token punctuation">&#123;</span>        <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>        <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新加载Nginx的配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl reload nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>访问项目</strong></p><p>访问路径为<a href="http://192.168.10.102:8080/hello-nginx%EF%BC%8C%E8%8B%A5%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F%EF%BC%8C%E5%8F%AF%E8%A7%81%E5%88%B0%E5%A6%82%E4%B8%8B%E9%A1%B5%E9%9D%A2">http://192.168.10.102:8080/hello-nginx，若部署成功，可见到如下页面</a></p><p><a href="https://imgse.com/i/pVMjfl4"><img src="https://s21.ax1x.com/2025/07/08/pVMjfl4.png" alt="页面图示"></a></p></li><li><p><strong>案例剖析</strong></p><ul><li><p><strong>匹配server</strong></p><p>由于Nginx中可存在多个虚拟主机的配置，所以接收到一个请求后，Nginx首先要确定请求交给哪个虚拟主机进行处理。这很显然是根据<code>server_name</code>和<code>listen</code>进行判断的。例如上述的请求路径<a href="http://192.168.10.102:8080/hello-nginx%EF%BC%8C%E5%B0%B1%E4%BC%9A%E5%8C%B9%E9%85%8D%E5%88%B0%E4%BB%A5%E4%B8%8B%E7%9A%84%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA">http://192.168.10.102:8080/hello-nginx，就会匹配到以下的虚拟主机</a></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  <span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.102</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>匹配location</strong></p><p>由于一个<strong>server block</strong>中可能包含多个<strong>location block</strong>，故Nginx在完成<strong>server</strong>匹配后，还要匹配<strong>location</strong>，<strong>location</strong>的匹配是根据请求路径进行判断的。例如以下写法<code>location</code>关键字后边的<code>/hello-nginx</code>就是匹配规则，它表达的含义是匹配以<code>/hello-nginx</code>为前缀的请求，例如上述的<a href="http://192.168.10.102:8080/hello-nginx%E8%AF%B7%E6%B1%82%E5%B0%B1%E4%BC%9A%E5%8C%B9%E9%85%8D%E5%88%B0%E8%AF%A5**location**%EF%BC%8C%E8%80%8C">http://192.168.10.102:8080/hello-nginx请求就会匹配到该**location**，而</a></p><p><a href="http://192.168.10.102:8080/nginx%E5%88%99%E4%B8%8D%E4%BC%9A%E3%80%82">http://192.168.10.102:8080/nginx则不会。</a></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span>hello<span class="token operator">-</span>nginx <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>定位文件</strong></p><p>完成<strong>location</strong>的匹配后，Nginx会以<strong>location block</strong>中的<code>root</code>作为根目录，然后查找请求路径对应的资源，例如以下配置</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span>hello<span class="token operator">-</span>nginx <span class="token punctuation">&#123;</span>    <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>    <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当请求<a href="http://192.168.10.102:8080/hello-nginx">http://192.168.10.102:8080/hello-nginx</a> 时，Ngxin会在<code>/usr/share/nginx/html/hello-nginx</code>路径中查找资源，由于该路径为<strong>目录</strong>（而非文件），故Nginx会在该目录下寻找<code>index</code>，也就是上面配置的<code>index.html</code>。然后将<code>index.html</code>响应给客户端。至此，该请求的处理就结束了。</p><p><strong>注意</strong>：上述提到的<strong>server_name</strong>和<strong>location</strong>均有多种匹配模式，例如精确匹配、前缀匹配、正则匹配，此处不再展开</p></li></ul></li></ol><h5 id="反向代理案例"><a href="#反向代理案例" class="headerlink" title="反向代理案例"></a>反向代理案例</h5><p>​    使用Nginx反向代理其他网站，比如<code>http://www.atguigu.com</code>。</p><ol><li><p><strong>配置虚拟主机</strong></p><p>创建<code>/etc/nginx/conf.d/hello-proxy.conf</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/nginx/conf.d/hello-proxy.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">9090</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  <span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.102</span><span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>重新加载Nginx配置文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl reload nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>观察代理效果</strong></p><p>使用浏览器访问<a href="http://192.168.10.102:9090，观察响应结果。">http://192.168.10.102:9090，观察响应结果。</a></p></li></ol><p><strong>注意</strong>：借助反向代理功能，Nginx可以实现负载均衡等高级功能，此处不再展开</p><h4 id="7-域名映射IP"><a href="#7-域名映射IP" class="headerlink" title="(7)域名映射IP"></a>(7)域名映射IP</h4><p>​    注意：一个IP可以映射多个域名</p><blockquote><p>192.168.10.102 lease.atguigu.com admin.lease.atguigu.com</p></blockquote><p>​    配置的域名通过Nginx的 <code>server_name</code> 进行区分，当你直接用 IP 访问 Nginx（比如 <code>http://192.168.10.102</code>），Nginx 会默认使用配置文件中第一个匹配该端口的 <code>server</code> block 进行响应，若你显式设置了 <code>default_server</code>，则以这个进行响应</p><h3 id="2-项目部署"><a href="#2-项目部署" class="headerlink" title="2. 项目部署"></a>2. 项目部署</h3><h4 id="1-后端项目（admin、App）的部署"><a href="#1-后端项目（admin、App）的部署" class="headerlink" title="(1)后端项目（admin、App）的部署"></a>(1)后端项目（admin、App）的部署</h4><p>​    <strong>后端程序部署的位置，是让它在服务器上以“服务”的形式运行起来</strong>，然后通过 Nginx 或 IP 地址对外提供接口</p><h5 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h5><p>​    使用IDEA的maven插件对项目进行打包，完成后，在<strong>web-admin</strong>和<strong>web-app</strong>模块的<code>target</code>目录下找到<code>web-admin-1.0-SNAPSHOT.jar</code>和<code>web-app-1.0-SNAPSHOT.jar</code>，打包步骤如下图所示</p><p><a href="https://imgse.com/i/pVQP1aj"><img src="https://s21.ax1x.com/2025/07/08/pVQP1aj.jpg" alt="打包，选择这两个点击运行"></a></p><h5 id="在要部署Linxu系统上安装JDK"><a href="#在要部署Linxu系统上安装JDK" class="headerlink" title="在要部署Linxu系统上安装JDK"></a>在要部署Linxu系统上安装JDK</h5><p>​    本项目采用JDK17</p><ol><li>获取JDK安装包：执行以下命令直接下载</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://download.oracle.com/java/17/archive/jdk-17.0.8_linux-x64_bin.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>解压JDK安装包：执行以下命令将jdk解压到<code>/opt</code>目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf jdk-17.0.8_linux-x64_bin.tar.gz -C /opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>测试JDK安装效果：执行以下命令，观察输出是否正常</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/jdk-17.0.8/bin/java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="上传jar包"><a href="#上传jar包" class="headerlink" title="上传jar包"></a>上传jar包</h5><p>​    将后端项目的两个jar包上传到<code>server01</code>服务器的<code>/opt/lease</code>目录下，若目录不存在，自行创建</p><p>​    <code>注意：jar包本质是可以通过java -jar 包名来启动</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;opt&#x2F;jdk-17.0.8&#x2F;bin&#x2F;java -jar &#x2F;opt&#x2F;lease&#x2F;web-admin-1.0-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="集成Systemd"><a href="#集成Systemd" class="headerlink" title="集成Systemd"></a>集成Systemd</h5><p>​    为方便项目的启动、停止或者重启，可以使用Systemd来管理后端服务的进程。</p><ul><li><p><strong>移动端集成Systemd</strong></p><p>创建<code>lease-app.service</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/systemd/system/lease-app.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>lease-app<span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">User</span><span class="token operator">=</span>root<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/opt/jdk-17.0.8/bin/java -jar /opt/lease/web-app-1.0-SNAPSHOT.jar <span class="token operator"><span class="token file-descriptor important">1</span>></span>/opt/lease/app.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token assign-left variable">SuccessExitStatus</span><span class="token operator">=</span><span class="token number">143</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>后台管理系统集成Systemd</strong></p><p>创建<code>lease-admin.service</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/systemd/system/lease-admin.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>lease-admin<span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">User</span><span class="token operator">=</span>root<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/opt/jdk-17.0.8/bin/java -jar /opt/lease/web-admin-1.0-SNAPSHOT.jar <span class="token operator"><span class="token file-descriptor important">1</span>></span>/opt/lease/admin.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token assign-left variable">SuccessExitStatus</span><span class="token operator">=</span><span class="token number">143</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5><p>​    执行以下命令启动两个后端项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start lease-appsystemctl start lease-admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-前端项目部署"><a href="#2-前端项目部署" class="headerlink" title="(2)前端项目部署"></a>(2)前端项目部署</h4><p>​    移动端和后台管理系统的前端项目均部署在<code>server02</code>的Nginx中，Nginx的配置思路如下图所示</p><p><a href="https://imgse.com/i/pVQPcz6"><img src="https://s21.ax1x.com/2025/07/08/pVQPcz6.png" alt="部署图示"></a></p><p>​    其中，静态资源和反向代理各代表一个locationblock</p><h4 id="2-1-移动端的前端部署"><a href="#2-1-移动端的前端部署" class="headerlink" title="(2.1)移动端的前端部署"></a>(2.1)移动端的前端部署</h4><h5 id="打包-1"><a href="#打包-1" class="headerlink" title="打包"></a>打包</h5><ol><li><p>明确前端请求的后端接口地址</p><p>根据图中部署规划，前端请求后台接口时走的是Nginx反向代理，也就是请求的地址得是Nginx的虚拟主机地址，所以需要修改<code>.env.production</code>文件中<code>VITE_APP_BASE_URL</code>环境变量的值，修改结果如下</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">VITE_APP_BASE_URL</span><span class="token attr-value"><span class="token punctuation">=</span>'http://lease.atguigu.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>构建项目</p><p>在项目的根目录执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看打包结果</p><p>项目的根目录出现<code>dist</code>目录，该目录包含所有前端静态资源，需要一起上传</p></li></ol><h5 id="在Linux系统部署前端dist文件"><a href="#在Linux系统部署前端dist文件" class="headerlink" title="在Linux系统部署前端dist文件"></a>在Linux系统部署前端dist文件</h5><ol><li><p>上传dist文件</p><p>将<code>dist</code>文件上传至<code>server02</code>服务器的<code>/usr/share/nginx/html/app</code>目录下。</p><p>最终的目录结构为</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">&#x2F;usr└── share    └── nginx        └── html            └── app                ├── static                └── index.html                └── ...              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编辑Nginx配置文件</p><p>创建<code>/etc/nginx/conf.d/app.conf</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/nginx/conf.d/app.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下：第一个location是获取前端静态资源，第二个location是向后台发送请求</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  lease<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">/</span>app<span class="token punctuation">;</span>        <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">location</span> <span class="token operator">/</span>app <span class="token punctuation">&#123;</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.101</span><span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新加载Nginx配置文件</p><p>执行以下命令重新加载配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl reload nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>访问项目</p><p>访问<a href="http://lease.atguigu.com/">http://lease.atguigu.com</a></p></li></ol><h4 id="2-2-后台管理系统的前端部署-与2-1一模一样"><a href="#2-2-后台管理系统的前端部署-与2-1一模一样" class="headerlink" title="(2.2)后台管理系统的前端部署-与2.1一模一样"></a>(2.2)后台管理系统的前端部署-与2.1一模一样</h4><h5 id="打包-2"><a href="#打包-2" class="headerlink" title="打包"></a>打包</h5><ol><li><p>明确前端请求的后端接口地址</p><p>请求的接口地址为<code>http://admin.lease.atguigu.com</code>，确保<strong>rentHouseAdmin</strong>项目中的<code>.env.production</code>文件中的<code>VITE_APP_BASE_URL</code>环境变量配置为如下内容</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">VITE_APP_BASE_URL</span><span class="token attr-value"><span class="token punctuation">=</span>'http://admin.lease.atguigu.com'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打包</p><p>在项目根目录执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看打包结果</p><p>根目录出现<code>dist</code>目录</p></li></ol><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><ol><li><p>上传dist文件</p><p>将<code>rentHouseAdmin</code>项目编译得到<code>dist</code>文件上传至<code>server02</code>服务器的<code>/usr/share/nginx/html/admin</code>目录下</p><p>最终的目录结构为</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">&#x2F;usr└── share    └── nginx        └── html            └── admin                ├── assets                └── index.html                └── ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编辑Nginx配置文件</p><p>创建<code>/etc/nginx/conf.d/admin.conf</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/nginx/conf.d/admin.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span>  admin<span class="token punctuation">.</span>lease<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token operator">/</span>admin<span class="token punctuation">;</span>        <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">location</span> <span class="token operator">/</span>admin <span class="token punctuation">&#123;</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.10</span><span class="token number">.101</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重新加载Nginx配置文件</p><p>执行以下命令重新加载配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl reload nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>访问项目</p><p>访问<a href="http://admin.lease.atguigu.com/">http://admin.lease.atguigu.com</a></p></li></ol><p><code>项目完结</code></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java项目对Knife4j的使用</title>
      <link href="/2025/05/22/Java%E9%A1%B9%E7%9B%AE%E5%AF%B9Knife4j%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/05/22/Java%E9%A1%B9%E7%9B%AE%E5%AF%B9Knife4j%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Knife4j快速入门"><a href="#1-Knife4j快速入门" class="headerlink" title="1. Knife4j快速入门"></a>1. Knife4j快速入门</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="(1)概述"></a>(1)概述</h4><p>​    Knife4j是一个用于生成和展示API文档的工具，同时它还提供了在线调试的功能，下图是其工作界面</p><p><a href="https://imgse.com/i/pExL5Sx"><img src="https://s21.ax1x.com/2025/05/21/pExL5Sx.png" alt="Knife4j使用图"></a></p><h5 id="了解："><a href="#了解：" class="headerlink" title="了解："></a>了解：</h5><ul><li>Knife4j有多个版本，最新版的Knife4j基于开源项目<code>springdoc-openapi</code>，这个开源项目的核心功能就是根据SpringBoot项目中的代码自动生成符合OpenAPI规范的接口信息</li><li>OpenAPI规范定义接口文档的内容和格式，其前身是<code>Swagger</code>规范</li></ul><h4 id="2-Knife4j在SpringBoot中的配置"><a href="#2-Knife4j在SpringBoot中的配置" class="headerlink" title="(2)Knife4j在SpringBoot中的配置"></a>(2)Knife4j在SpringBoot中的配置</h4><p>​    与SpringBoot的集成具体操作如下</p><ol><li><p><strong>创建SpringBoot项目</strong></p></li><li><p><strong>引入Maven 依赖</strong></p><p>Knife4j的依赖如下</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-openapi3-jakarta-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目完整的pom.xml文件如下</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.atguigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hello-knife4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hello-knife4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>hello-knife4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-openapi3-jakarta-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>创建配置类</strong></p><p>创建<code>com.atguigu.helloknife4j.config.Knife4jConfiguration</code>，内容如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Knife4jConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//包含文档的基本信息，接口文档标题、版本等</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">OpenAPI</span> <span class="token function">openAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OpenAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"hello-knife4j项目API"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"hello-knife4j项目的接口文档"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//对接口分组-名称为用户信息管理，所有/user/**下的接口全部放这个分组中</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">GroupedOpenApi</span> <span class="token function">userAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">GroupedOpenApi</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"用户信息管理"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">pathsToMatch</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对接口分组-与上一样</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">GroupedOpenApi</span> <span class="token function">systemAPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">GroupedOpenApi</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"产品信息管理"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">pathsToMatch</span><span class="token punctuation">(</span><span class="token string">"/product/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>启动项目</strong></p><p>启动SpringBoot项目，访问<a href="http://localhost:8080/doc.html%EF%BC%8C%E8%A7%82%E5%AF%9F%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3">http://localhost:8080/doc.html，观察接口文档</a></p></li></ol><h4 id="3-Knife4j的基本使用"><a href="#3-Knife4j的基本使用" class="headerlink" title="(3)Knife4j的基本使用"></a>(3)Knife4j的基本使用</h4><p>​    Knife4j的使用也十分简单，我们只需使用几个简单注解，对接口进行描述，Knife4j就能自动生成API文档了。具体操作如下</p><ol><li><p><strong>描述实体类</strong></p><p>创建<code>com.atguigu.helloknife4j.entity.User</code>，内容如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"用户信息实体"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"编号"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"用户姓名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"用户年龄"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Schema</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"用户邮箱"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识点</strong>：</p><p><code>@Schema</code>注解用于描述作为接口参数或者返回值的实体类的数据结构</p></li><li><p><strong>描述Controller接口</strong></p><p>创建<code>com.atguigu.helloknife4j.controller.HelloController</code>，内容如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Tag</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"用户信息管理"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Operation</span><span class="token punctuation">(</span>summary <span class="token operator">=</span> <span class="token string">"根据id获取用户信息"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getById"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Parameter</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"用户id"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"zhangsan@email.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>知识点</strong>：</p><p><code>@Tag</code>注解用于对接口进行分类，相同<code>Tag</code>的接口会放在同一个菜单。</p><p><code>@Operation</code>用于对接口进行描述。</p><p><code>@Parameter</code>用于对HTTP请求参数进行描述</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统部署Minio与Java对Minio的基本使用</title>
      <link href="/2025/05/22/Linux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2Minio%E4%B8%8EJava%E5%AF%B9Minio%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/05/22/Linux%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2Minio%E4%B8%8EJava%E5%AF%B9Minio%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-在Linux（centOS7）部署MinIO"><a href="#1-在Linux（centOS7）部署MinIO" class="headerlink" title="1. 在Linux（centOS7）部署MinIO"></a>1. 在Linux（centOS7）部署MinIO</h3><p>​    部署MinIO，安装方式采用rpm离线安装，具体步骤可参考<a href="https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html#minio-snsd">官方文档</a>。</p><ol><li><p><strong>获取MinIO安装包</strong></p><p>下载地址如下：<a href="https://dl.min.io/server/minio/release/linux-amd64/archive/minio-20230809233022.0.0.x86_64.rpm%EF%BC%8C%E9%80%9A%E8%BF%87%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%B0%86%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%8B%E8%BD%BD%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8">https://dl.min.io/server/minio/release/linux-amd64/archive/minio-20230809233022.0.0.x86_64.rpm，通过以下命令可直接将安装包下载至服务器</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.min.io/server/minio/release/linux-amd64/archive/minio-20230809233022.0.0.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：若下载缓慢，大家可直接使用课程资料中附带的安装包</p></li><li><p><strong>安装MinIO</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -ivh minio-20230809233022.0.0.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>集成Systemd</strong></p><ul><li><p><strong>Systemd概述</strong></p><p><code>Systemd</code>是一个广泛应用于Linux系统的系统初始化和服务管理器，其可以管理系统中的各种服务和进程，包括启动、停止和重启服务，除此之外，其还可以监测各服务的运行状态，并在服务异常退出时，自动拉起服务，以保证服务的稳定性。系统自带的防火墙服务<code>firewalld</code>，我们自己安装的<code>mysqld</code>和<code>redis</code>均是由<code>Systemd</code>进行管理的，此处将MinIO服务也交给Systemd管理</p></li><li><p><strong>编写MinIO服务配置文件</strong></p><p>Systemd所管理的服务需要由一个配置文件进行描述，这些配置文件均位于<code>/etc/systemd/system/</code>或者<code>/usr/lib/systemd/system/</code>目录下，下面创建MinIO服务的配置文件</p><p>执行以下命令创建并打开<code>minio.service</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/systemd/system/minio.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下，具体可参考MinIO<a href="https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html#create-the-systemd-service-file">官方文档</a></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[Unit]</span><span class="token constant">Description</span><span class="token attr-value"><span class="token punctuation">=</span>MinIO</span><span class="token constant">Documentation</span><span class="token attr-value"><span class="token punctuation">=</span>https://min.io/docs/minio/linux/index.html</span><span class="token constant">Wants</span><span class="token attr-value"><span class="token punctuation">=</span>network-online.target</span><span class="token constant">After</span><span class="token attr-value"><span class="token punctuation">=</span>network-online.target</span><span class="token constant">AssertFileIsExecutable</span><span class="token attr-value"><span class="token punctuation">=</span>/usr/local/bin/minio</span><span class="token selector">[Service]</span><span class="token constant">WorkingDirectory</span><span class="token attr-value"><span class="token punctuation">=</span>/usr/local</span><span class="token constant">ProtectProc</span><span class="token attr-value"><span class="token punctuation">=</span>invisible</span><span class="token constant">EnvironmentFile</span><span class="token attr-value"><span class="token punctuation">=</span>-/etc/default/minio</span><span class="token constant">ExecStartPre</span><span class="token attr-value"><span class="token punctuation">=</span>/bin/bash -c "if [ -z \"$&#123;MINIO_VOLUMES&#125;\" ]; then echo \"Variable MINIO_VOLUMES not set in /etc/default/minio\"; exit 1; fi"</span><span class="token constant">ExecStart</span><span class="token attr-value"><span class="token punctuation">=</span>/usr/local/bin/minio server $MINIO_OPTS $MINIO_VOLUMES</span><span class="token constant">Restart</span><span class="token attr-value"><span class="token punctuation">=</span>always</span><span class="token constant">LimitNOFILE</span><span class="token attr-value"><span class="token punctuation">=</span>65536</span><span class="token constant">TasksMax</span><span class="token attr-value"><span class="token punctuation">=</span>infinity</span><span class="token constant">TimeoutStopSec</span><span class="token attr-value"><span class="token punctuation">=</span>infinity</span><span class="token constant">SendSIGKILL</span><span class="token attr-value"><span class="token punctuation">=</span>no</span><span class="token selector">[Install]</span><span class="token constant">WantedBy</span><span class="token attr-value"><span class="token punctuation">=</span>multi-user.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：</p><p>重点关注上述文件中的以下内容即可</p><ul><li><code>EnvironmentFile</code>，该文件中可配置MinIO服务所需的各项参数</li><li><code>ExecStart</code>，该参数用于配置MinIO服务的启动命令，其中<code>$MINIO_OPTS</code>、<code>$MINIO_VOLUMES</code>，均引用于<code>EnvironmentFile</code>中的变量<ul><li><code>MINIO_OPTS</code>用于配置MinIO服务的启动选项，可省略不配置</li><li><code>MINIO_VOLUMES</code>用于配置MinIO服务的数据存储路径</li></ul></li><li><code>Restart</code>，表示自动重启</li></ul></li><li><p><strong>编写<code>EnvironmentFile</code>文件</strong></p><p>执行以下命令创建并打开<code>/etc/default/minio</code>文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/default/minio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下，具体可参考<a href="https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html#create-the-environment-variable-file">官方文档</a>。</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">MINIO_ROOT_USER</span><span class="token attr-value"><span class="token punctuation">=</span>minioadmin</span><span class="token constant">MINIO_ROOT_PASSWORD</span><span class="token attr-value"><span class="token punctuation">=</span>minioadmin</span><span class="token constant">MINIO_VOLUMES</span><span class="token attr-value"><span class="token punctuation">=</span>/data</span><span class="token constant">MINIO_OPTS</span><span class="token attr-value"><span class="token punctuation">=</span>"--console-address :9001"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><ul><li><p><code>MINIO_ROOT_USER</code>和<code>MINIO_ROOT_PASSWORD</code>为用于访问MinIO的用户名和密码，<strong>密码长度至少8位</strong></p></li><li><p><code>MINIO_VOLUMES</code>用于指定数据存储路径，需确保指定的路径是存在的，可执行以下命令创建该路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//在该 /usr/lib/systemd/system 目录下创建<span class="token function">mkdir</span> /data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-none"><code class="language-none">- &#96;MINIO_OPTS&#96;中的&#96;console-address&#96;,用于指定管理页面的地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>启动MinIO</strong></p><p>执行以下命令启动MinIO</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start minio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下命令查询运行状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status minio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置MinIO开机自启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> minio<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>访问MinIO管理页面</strong></p><p>管理页面的访问地址为：<code>http://192.168.10.101:9001</code></p><p><strong>注意</strong>：</p><p><code>ip</code>需要根据实际情况做出修改</p></li></ol><h3 id="2-MinIO的介绍和Java开发案例"><a href="#2-MinIO的介绍和Java开发案例" class="headerlink" title="2. MinIO的介绍和Java开发案例"></a>2. MinIO的介绍和Java开发案例</h3><h4 id="1-MinIO核心概念"><a href="#1-MinIO核心概念" class="headerlink" title="(1)MinIO核心概念"></a>(1)MinIO核心概念</h4><p>​    MinIO中的核心概念，这些概念在所有的对象存储服务中也都是通用的</p><ul><li><p><strong>对象（Object）</strong> </p><p>对象是实际的数据单元，例如我们上传的一个图片</p></li><li><p><strong>存储桶（Bucket）</strong></p><p>存储桶是用于组织对象的命名空间，类似于文件夹。每个存储桶可以包含多个对象</p></li><li><p><strong>端点（Endpoint）</strong> </p><p>端点是MinIO服务器的网络地址，用于访问存储桶和对象，例如<code>http://192.168.10.101:9000</code></p><p><strong>注意：</strong></p><p><code>9000</code>为MinIO的API的默认端口，前边配置的<code>9001</code>以为管理页面端口</p></li><li><p><strong>Access Key 和 Secret Key</strong></p><p><strong>Access Key</strong>是用于标识和验证访问者身份的唯一标识符，相当于用户名</p><p><strong>Secret Key</strong>是与<strong>Access Key</strong>关联的密码，用于验证访问者的身份</p></li></ul><h4 id="2-MinIO管理页面操作-图形化"><a href="#2-MinIO管理页面操作-图形化" class="headerlink" title="(2)MinIO管理页面操作(图形化)"></a>(2)MinIO管理页面操作(图形化)</h4><ol><li><p><strong>登录</strong></p><p>管理页面的地址为<a href="http://192.168.10.101:9001，登录的用户名和密码为部署时在`EnvironmentFile`文件中配置的如下参数">http://192.168.10.101:9001，登录的用户名和密码为部署时在`EnvironmentFile`文件中配置的如下参数</a></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">MINIO_ROOT_USER</span><span class="token attr-value"><span class="token punctuation">=</span>minioadmin</span><span class="token constant">MINIO_ROOT_PASSWORD</span><span class="token attr-value"><span class="token punctuation">=</span>minioadmin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>创建存储桶</strong></p><p><a href="https://imgse.com/i/pExILRS"><img src="https://s21.ax1x.com/2025/05/21/pExILRS.png" alt="创建桶"></a></p></li><li><p><strong>上传图片</strong></p><ul><li><p>找到目标桶</p><p><a href="https://imgse.com/i/pExIOxg"><img src="https://s21.ax1x.com/2025/05/21/pExIOxg.png" alt="选择桶"></a></p></li><li><p>上传图片</p><p><a href="https://imgse.com/i/pExIjMQ"><img src="https://s21.ax1x.com/2025/05/21/pExIjMQ.png" alt="上传图片"></a></p></li></ul></li><li><p><strong>访问图片</strong></p><ul><li><p><strong>图片URL</strong></p><p>由于MinIO提供了HTTP访问功能，所以可以通过浏览器直接访问对象。对象URL为MinIO的<code>Endpoint</code>+<code>对象的存储路径</code>，例如下图中的图片对象的URL为<a href="http://192.168.10.101:9000/test/%E5%85%AC%E5%AF%93-%E5%A4%96%E8%A7%82.jpg">http:192.168.10.101:9000/test/公寓-外观.jpg</a></p><p><a href="https://imgse.com/i/pExIvrj"><img src="https://s21.ax1x.com/2025/05/21/pExIvrj.png" alt="存储路径"></a></p></li><li><p><strong>访问权限</strong></p><p>不出意外的话，使用浏览器访问上述URL，会得到如下响应，很显然是没有访问权限</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Error</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Code</span><span class="token punctuation">></span></span>AccessDenied<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Code</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Message</span><span class="token punctuation">></span></span>Access Denied.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Message</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Key</span><span class="token punctuation">></span></span>公寓-外观.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Key</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BucketName</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BucketName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Resource</span><span class="token punctuation">></span></span>/test/公寓-外观.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RequestId</span><span class="token punctuation">></span></span>177BC92022FC5684<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RequestId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HostId</span><span class="token punctuation">></span></span>dd9025bab4ad464b049177c95eb6ebf374d3b3fd1af9251148b658df7ac2e3e8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HostId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Error</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若想继续访问图片，需要修改图片<strong>所在桶</strong>的访问权限，如下图所示</p><p><a href="https://imgse.com/i/pExIxqs"><img src="https://s21.ax1x.com/2025/05/21/pExIxqs.png" alt="访问权限"></a></p><p>如上图所示，可选的访问权限共有三个选项，分别是<code>Private</code>、<code>Public</code>和<code>Custom</code>，具体说明如下</p><ul><li><p><code>Private</code></p><p>只允许桶的所有者对该桶进行读写</p></li><li><p><code>Public</code></p><p>允许所有人对该桶进行读写</p></li><li><p><code>Custom</code></p><p>自定义访问权限</p></li></ul><p>若想将权限设置为只允许所有者写，但允许所有人读，就需要自定义访问权限。自定义访问权限，需要使用一个规定格式的JSON字符串进行描述，具体格式可参考<a href="https://min.io/docs/minio/linux/administration/identity-access-management/policy-based-access-control.html#policy-document-structure">官方文档</a></p><p>例如以下JSON字符串表达的含义是：允许(<code>Allow</code>)所有人(<code>*</code>)读取(<code>s3:GetObject</code>)指定桶(<code>test</code>)的所有内容</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"Statement"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span>    <span class="token property">"Action"</span> <span class="token operator">:</span> <span class="token string">"s3:GetObject"</span><span class="token punctuation">,</span>    <span class="token property">"Effect"</span> <span class="token operator">:</span> <span class="token string">"Allow"</span><span class="token punctuation">,</span>    <span class="token property">"Principal"</span> <span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span>    <span class="token property">"Resource"</span> <span class="token operator">:</span> <span class="token string">"arn:aws:s3:::test/*"</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"Version"</span> <span class="token operator">:</span> <span class="token string">"2012-10-17"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>test</code>桶访问权限设置为<code>Custom</code>，并添加上述内容</p><p><a href="https://imgse.com/i/pExoSZn"><img src="https://s21.ax1x.com/2025/05/21/pExoSZn.png" alt="自定义权限"></a></p><p>重新访问<a href="http://192.168.10.101:9000/test/%E5%85%AC%E5%AF%93-%E5%A4%96%E8%A7%82.jpg">http:192.168.10.101:9000/test/公寓-外观.jpg</a>，观察是否正常</p></li></ul></li></ol><h4 id="3-MinIO-Java-SDK"><a href="#3-MinIO-Java-SDK" class="headerlink" title="(3)MinIO Java SDK"></a>(3)MinIO Java SDK</h4><p>​    MinIO提供了多种语言的SDK供开发者使用，本项目需要用到Java SDK，下面通过一个简单案例熟悉一下其基本用法，具体内容可参考<a href="https://www.minio.org.cn/docs/minio/linux/developers/java/minio-java.html#">官方文档</a></p><ol><li><p><strong>创建一个Maven项目</strong></p></li><li><p><strong>引入如下依赖</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写如下内容</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//构造MinIO Client</span>            <span class="token class-name">MinioClient</span> minioClient <span class="token operator">=</span> <span class="token class-name">MinioClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span><span class="token string">"http://192.168.10.101:9000"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span><span class="token string">"minioadmin"</span><span class="token punctuation">,</span> <span class="token string">"minioadmin"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建hello-minio桶</span>            <span class="token keyword">boolean</span> found <span class="token operator">=</span> minioClient<span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span><span class="token class-name">BucketExistsArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">"hello-minio"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>found<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//创建hello-minio桶</span>                minioClient<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span><span class="token class-name">MakeBucketArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">"hello-minio"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置hello-minio桶的访问权限</span>                <span class="token class-name">String</span> policy <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                        &#123;                          "Statement" : [ &#123;                            "Action" : "s3:GetObject",                            "Effect" : "Allow",                            "Principal" : "*",                            "Resource" : "arn:aws:s3:::hello-minio/*"                          &#125; ],                          "Version" : "2012-10-17"                        &#125;"""</span><span class="token punctuation">;</span>                minioClient<span class="token punctuation">.</span><span class="token function">setBucketPolicy</span><span class="token punctuation">(</span><span class="token class-name">SetBucketPolicyArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">"hello-minio"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bucket 'hello-minio' already exists."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//上传图片</span>            minioClient<span class="token punctuation">.</span><span class="token function">uploadObject</span><span class="token punctuation">(</span>                    <span class="token class-name">UploadObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">"hello-minio"</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token string">"公寓-外观.jpg"</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">filename</span><span class="token punctuation">(</span><span class="token string">"D:\\workspace\\hello-minio\\src\\main\\resources\\公寓-外观.jpg"</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MinioException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error occurred: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行测试</strong></p><p>运行上述代码，然后查看MinIO管理页面，观察是否上传成功</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux04-部署MySQL、Redis</title>
      <link href="/2025/05/22/Linux04-%E9%83%A8%E7%BD%B2MySQL%E3%80%81Redis/"/>
      <url>/2025/05/22/Linux04-%E9%83%A8%E7%BD%B2MySQL%E3%80%81Redis/</url>
      
        <content type="html"><![CDATA[<h3 id="1-软件包查找"><a href="#1-软件包查找" class="headerlink" title="1. 软件包查找"></a>1. 软件包查找</h3><p>​    <a href="https://pkgs.org/"><strong>pkgs.org</strong></a> 是一个<strong>Linux 软件包索引网站</strong>，它提供了多个发行版（如 CentOS、RHEL、AlmaLinux、Debian、Ubuntu 等）的软件包（RPM、DEB 等）信息、下载地址和依赖详情</p><h3 id="2-部署MySQL"><a href="#2-部署MySQL" class="headerlink" title="2. 部署MySQL"></a>2. 部署MySQL</h3><p>​    在CentOS7部署MySQL，具体步骤可<a href="https://dev.mysql.com/doc/mysql-installation-excerpt/8.0/en/linux-installation-yum-repo.html">参考文档</a>。</p><ol><li><p><strong>安装MySQL yum库</strong></p><ul><li><p><strong>下载yum库</strong></p><p>下载地址为<a href="https://dev.mysql.com/downloads/repo/yum/%E3%80%82%E9%9C%80%E8%A6%81%E6%A0%B9%E6%8D%AE%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E7%89%88%E6%9C%AC%EF%BC%8CCentos7%E9%9C%80%E9%80%89%E6%8B%A9%60mysql80-community-release-el7-9.noarch.rpm%60%E3%80%82">https://dev.mysql.com/downloads/repo/yum/。需要根据操作系统选择相应版本，Centos7需选择`mysql80-community-release-el7-9.noarch.rpm`。</a></p><p>执行以下命令可直接下载到服务器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dev.mysql.com/get/mysql80-community-release-el7-9.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>安装yum库</strong></p><p>在上述<code>rpm</code>文件所在路径执行如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -ivh mysql80-community-release-el7-9.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><ol start="2"><li><p><strong>安装MySQL</strong></p><p>执行如下命令安装MySQL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>启动MySQL</strong></p><p>执行如下命令启动MySQL服务</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  执行以下命令查看MySQL运行状态</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="4"><li><p><strong>root用户相关配置</strong></p><ul><li><p><strong>查看root用户初始密码</strong></p><p>MySQL启动后会将root用户的初始密码写入日志，通过以下命令可以获取密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /var/log/mysqld.log <span class="token operator">|</span> <span class="token function">grep</span> password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>使用初始密码登录</strong></p><p>执行以下命令登录MySQL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -uroot -p<span class="token string">'password'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>修改root用户密码</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'Rain.123456'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：MySQL默认安装了<a href="https://dev.mysql.com/doc/refman/8.0/en/validate-password.html">validate_password</a> 插件，默认情况下，要求密码要包含大写字母、小写字母、数字和特殊符号，且密码长度最小为8。若需设置简单密码，可禁用该插件，或调整该插件的密码强度级别。</p></li><li><p><strong>授予root用户远程登录权限</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CREATE <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'Rain.123456'</span><span class="token punctuation">;</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> WITH GRANT OPTION<span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="3-部署Redis"><a href="#3-部署Redis" class="headerlink" title="3. 部署Redis"></a>3. 部署Redis</h3><p>​    在centOS7部署Redis服务，安装方式采用yum在线安装，安装版本为<code>redis-7.0.13</code>，具体步骤如下</p><ol><li><p><strong>安装Redis yum仓库</strong></p><ul><li><p><strong>下载yum仓库</strong></p><p>Redis所在的仓库为<strong>remi-release</strong>，下载地址为：<a href="http://rpms.famillecollet.com/enterprise/remi-release-7.rpm%EF%BC%8C%E5%8F%AF%E4%BD%BF%E7%94%A8%E5%A6%82%E4%B8%8B%E5%91%BD%E4%BB%A4%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">http://rpms.famillecollet.com/enterprise/remi-release-7.rpm，可使用如下命令直接下载到服务器</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://rpms.famillecollet.com/enterprise/remi-release-7.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>安装yum仓库</strong></p><p>执行如下命令进行安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -ivh remi-release-7.rpm --force --nodeps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p><strong>安装Reids</strong></p><p>执行以下命令安装Redis</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum --enablerepo<span class="token operator">=</span>remi -y <span class="token function">install</span> redis-7.0.14<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：<code>--enablerepo</code>选项的作用为启用一个仓库</p></li><li><p><strong>配置Redis允许远程访问</strong></p><p>Redis服务默认只允许本地访问，若需要进行远程访问，需要做出以下配置。</p><p>修改Redis配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改如下参数</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#监听所有网络接口，默认只监听localhost</span>bind 0.0.0.0<span class="token comment">#关闭保护模式，默认开启。开始保护模式后，远程访问必须进行认证后才能访问。</span>protected-mode no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>启动Redis</strong></p><p>执行以下命令启动Redis</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下命令查看Redis的运行状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以下命令设置Redis开机自启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux03-Linux系统高级配置及相关命令</title>
      <link href="/2025/05/18/Linux03-Linux%E7%B3%BB%E7%BB%9F%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/05/18/Linux03-Linux%E7%B3%BB%E7%BB%9F%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Linux终端的快捷操作"><a href="#1-Linux终端的快捷操作" class="headerlink" title="1. Linux终端的快捷操作"></a>1. Linux终端的快捷操作</h3><h4 id="1-强制停止（ctrl-c）"><a href="#1-强制停止（ctrl-c）" class="headerlink" title="(1) 强制停止（ctrl+c）"></a>(1) 强制停止（ctrl+c）</h4><ul><li>用于强制停止某些卡住的命令</li><li>退出当前命令的输入</li></ul><h4 id="2-退出或登出（ctrl-d）"><a href="#2-退出或登出（ctrl-d）" class="headerlink" title="(2) 退出或登出（ctrl+d）"></a>(2) 退出或登出（ctrl+d）</h4><ul><li>退出账户的登录(如：root用户)</li><li>退出编译器(注意：不能退出vi/vim)</li></ul><h4 id="3-光标移动快捷键"><a href="#3-光标移动快捷键" class="headerlink" title="(3) 光标移动快捷键"></a>(3) 光标移动快捷键</h4><ul><li>ctrl+a，跳到命令开头</li><li>ctrl+e，跳到命令结尾</li><li>ctrl+键盘左键，向左跳一个单词</li><li>ctrl+键盘右键，向右跳一个单词</li></ul><h4 id="4-清屏"><a href="#4-清屏" class="headerlink" title="(4) 清屏"></a>(4) 清屏</h4><ul><li>通过快捷键ctrl+l，可以清空终端内容</li><li>通过命令clear也可以得到同样效果</li></ul><h3 id="2-Linux的软件安装"><a href="#2-Linux的软件安装" class="headerlink" title="2. Linux的软件安装"></a>2. Linux的软件安装</h3><p>​    在软件安装中CentOS系统和Ubuntu是使用不同的包管理器</p><h4 id="1-CentOS的软件安装"><a href="#1-CentOS的软件安装" class="headerlink" title="(1)CentOS的软件安装"></a>(1)CentOS的软件安装</h4><p>​    yum：PRM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题，类似于Windows的微软商店</p><p>​    <strong>使用yum命令可以在CentOS的Linux环境下安装程序</strong></p><p>​    语法：<code>yum [-y] [install | remove | search] 软件名称</code></p><ul><li>-y：自动确认，无需手动确认安装或卸载过程</li><li>install：安装</li><li>remove：卸载</li><li>search：搜索网上有无这个软件</li></ul><p>​    注意：</p><ol><li>yum命令需要root权限，可以su切换到root，或使用sudo提取</li><li>yum命令需要联网</li></ol><h4 id="2-Ubuntu的软件安装"><a href="#2-Ubuntu的软件安装" class="headerlink" title="(2)Ubuntu的软件安装"></a>(2)Ubuntu的软件安装</h4><p>​    <strong>使用apt命令可以在Ubuntu的Linux环境下安装程序</strong></p><p>​    语法：<code>apt [-y] [install | remove | search] 软件名称</code></p><p>​    用法和yum一致，注意事项也一致</p><h3 id="3-Linux中服务的启动和关闭"><a href="#3-Linux中服务的启动和关闭" class="headerlink" title="3. Linux中服务的启动和关闭"></a>3. Linux中服务的启动和关闭</h3><p>​    Linux系统很多软件(内置或第三方)均支持使用systemctl命令控制：启动、停止、开机自启</p><p>​    <strong>能够被systemctl管理的软件，一般被称为：服务</strong></p><p>​    语法：<code>systemctl start | stop | status | enable | disable 服务名(内置、第三方)</code></p><ul><li>start：启动</li><li>stop：关闭</li><li>status：查看状态</li><li>enable：开启开机自启</li><li>disable：关闭开机自启</li></ul><h5 id="部分系统内置的服务-名-："><a href="#部分系统内置的服务-名-：" class="headerlink" title="部分系统内置的服务(名)："></a>部分系统内置的服务(名)：</h5><ul><li>NetworkManager：主网络服务</li><li>network：副网络服务</li><li>firewalld：防火墙服务</li><li>sshd，ssh服务：FinalShell远程登录Linux使用的服务</li></ul><p>​    <strong>注意：部分软件安装后没有自动集成到systemctl中，需要手动添加</strong></p><h3 id="4-IP地址和主机名"><a href="#4-IP地址和主机名" class="headerlink" title="4. IP地址和主机名"></a>4. IP地址和主机名</h3><h4 id="1-IP地址"><a href="#1-IP地址" class="headerlink" title="(1)IP地址"></a>(1)IP地址</h4><p>​    每一台联网的电脑都会有一个地址，用于和其他计算机进行通讯</p><p>​    IP地址主要有2个版本，V4版本和V6版本(V6很少用)</p><p>​    IPv4版本的地址格式是：a.b.c.d，其中abcd表示0~255的数字，如192.168.88.101就是一个标准的IP地址</p><p>​    <strong>可以通过命令：ifconfig，查看本机的ip地址，如无法使用ifconfig命令，可以安装：yum -y install net-tools</strong></p><h5 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title="特殊IP地址"></a>特殊IP地址</h5><ul><li>127.0.0.1，这个IP地址用于指代本机</li><li>0.0.0.0<ul><li>可以用于指代本机</li><li>可以在端口绑定中用来确定绑定关系</li><li>在一些IP地址限制中，表示所有IP的意思，如放行规则设置为0.0.0.0，表示允许任意IP访问</li></ul></li></ul><p>​    Ubuntu的系统可能不会自动获取IP地址，使用以下命令手动获取</p><blockquote><p>sudo dhclient ens33</p></blockquote><h4 id="2-主机名"><a href="#2-主机名" class="headerlink" title="(2)主机名"></a>(2)主机名</h4><p>​    每一台电脑除了对外联络地址(IP地址)以外，也可以有一个名字，称为主机名</p><p>​    无论是Windows或Linux系统，都可以给系统设置主机名</p><p><a href="https://imgse.com/i/pkoNpFO"><img src="https://s21.ax1x.com/2024/07/18/pkoNpFO.png" alt="主机名的查看"></a></p><h5 id="在Linux中修改主机名"><a href="#在Linux中修改主机名" class="headerlink" title="在Linux中修改主机名"></a>在Linux中修改主机名</h5><ul><li>查看主机名使用命令：<code>hostname</code></li><li>修改主机名使用命令：<code>hostnamectl set-hostname 新主机名</code></li></ul><h3 id="5-Linux的远程ssh连接"><a href="#5-Linux的远程ssh连接" class="headerlink" title="5. Linux的远程ssh连接"></a>5. Linux的远程ssh连接</h3><p>​    知道IP地址和端口，配置了Linux的ssh连接（默认打开）后，就可以实现ssh远程连接</p><h4 id="1-域名解析"><a href="#1-域名解析" class="headerlink" title="(1)域名解析"></a>(1)域名解析</h4><p>​    IP地址非常难记，事实上，我们一直都是通过字符化的地址去访问服务器，很少指定IP地址</p><p>​    <strong>例如：在浏览器输入<code>www.baidu.com</code>，会打开百度的网址，我们称为域名</strong></p><p><a href="https://imgse.com/i/pkTJzLt"><img src="https://s21.ax1x.com/2024/07/19/pkTJzLt.png" alt="访问流程图"></a></p><p>​    注意：因为域名解析是先查本机再联网去查所以可以进行如下操作：<br>​    可以通过修改Windows系统的host文件，添加虚拟机Linux的IP和主机名，这样FinalShell可以不需要IP地址而通过主机名连接</p><h4 id="2-配置主机名映射（windows系统）（可选）"><a href="#2-配置主机名映射（windows系统）（可选）" class="headerlink" title="(2)配置主机名映射（windows系统）（可选）"></a>(2)配置主机名映射（windows系统）（可选）</h4><p>​    Windows的修改</p><p><a href="https://imgse.com/i/pkTYsld"><img src="https://s21.ax1x.com/2024/07/20/pkTYsld.png" alt="位置"></a></p><p><a href="https://imgse.com/i/pkTY6OI"><img src="https://s21.ax1x.com/2024/07/20/pkTY6OI.png" alt="修改内容"></a></p><p>​    FinalShell中需要的修改，主机位置由ip地址改为刚刚配置的主机名centos</p><p><a href="https://imgse.com/i/pkTY4fg"><img src="https://s21.ax1x.com/2024/07/20/pkTY4fg.png" alt="把IP改为主机名"></a></p><h4 id="3-Linux系统固定IP地址-内网IP固定-（需要在NAT模式）"><a href="#3-Linux系统固定IP地址-内网IP固定-（需要在NAT模式）" class="headerlink" title="(3)Linux系统固定IP地址(内网IP固定)（需要在NAT模式）"></a>(3)Linux系统固定IP地址(内网IP固定)（需要在NAT模式）</h4><p>​    NAT模式下，虚拟机的IP地址，默认情况下是由虚拟DHCP服务自动分配的，虚拟机的IP地址不固定，这对于SSH远程访问也不友好，所以通常情况下，我们不使用虚拟DHCP服务，而是手动为虚拟机配置静态的IP地址。具体操作如下</p><p>​    <code>以下操作需要以root用户操作</code></p><ol><li><p>确定网络配置文件</p><p>在终端输入如下命令<code>ifconfig</code>命令，查看当前的网络接口，内容如下</p><pre class="line-numbers language-none"><code class="language-none">ens33: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 192.168.10.100  netmask 255.255.255.0  broadcast 192.168.10.255        inet6 fe80::5fdd:f01e:a4fb:966  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 00:0c:29:fc:a3:fe  txqueuelen 1000  (Ethernet)        RX packets 1526  bytes 136998 (133.7 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 1907  bytes 136735 (133.5 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags&#x3D;73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;        loop  txqueuelen 1000  (Local Loopback)        RX packets 68  bytes 5916 (5.7 KiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 68  bytes 5916 (5.7 KiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0virbr0: flags&#x3D;4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255        ether 52:54:00:ea:8a:fb  txqueuelen 1000  (Ethernet)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中ens33是目前的以太网接口，故其配置文件为<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>。</p></li><li><p>修改网络配置文件</p><p>打开配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">TYPE</span><span class="token attr-value"><span class="token punctuation">=</span>Ethernet</span><span class="token constant">PROXY_METHOD</span><span class="token attr-value"><span class="token punctuation">=</span>none</span><span class="token constant">BROWSER_ONLY</span><span class="token attr-value"><span class="token punctuation">=</span>no</span><span class="token constant">BOOTPROTO</span><span class="token attr-value"><span class="token punctuation">=</span>dhcp</span><span class="token constant">DEFROUTE</span><span class="token attr-value"><span class="token punctuation">=</span>yes</span><span class="token constant">IPV4_FAILURE_FATAL</span><span class="token attr-value"><span class="token punctuation">=</span>no</span><span class="token constant">IPV6INIT</span><span class="token attr-value"><span class="token punctuation">=</span>yes</span><span class="token constant">IPV6_AUTOCONF</span><span class="token attr-value"><span class="token punctuation">=</span>yes</span><span class="token constant">IPV6_DEFROUTE</span><span class="token attr-value"><span class="token punctuation">=</span>yes</span><span class="token constant">IPV6_FAILURE_FATAL</span><span class="token attr-value"><span class="token punctuation">=</span>no</span><span class="token constant">IPV6_ADDR_GEN_MODE</span><span class="token attr-value"><span class="token punctuation">=</span>stable-privacy</span><span class="token constant">NAME</span><span class="token attr-value"><span class="token punctuation">=</span>ens33</span><span class="token constant">UUID</span><span class="token attr-value"><span class="token punctuation">=</span>bf788989-e095-4e58-865a-e6b07248a514</span><span class="token constant">DEVICE</span><span class="token attr-value"><span class="token punctuation">=</span>ens33</span><span class="token constant">ONBOOT</span><span class="token attr-value"><span class="token punctuation">=</span>yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要修改的内容如下</p><ul><li><p>修改<code>BOOTPROTO</code>参数为<code>static</code></p></li><li><p>修改<code>ONBOOT</code>参数为<code>yes</code></p></li><li><p>增加如下内容</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token comment"># 子网IP</span><span class="token constant">IPADDR</span><span class="token attr-value"><span class="token punctuation">=</span>192.168.10.100</span><span class="token comment"># 子网掩码</span><span class="token constant">NETMASK</span><span class="token attr-value"><span class="token punctuation">=</span>255.255.255.0</span><span class="token comment"># 网关IP</span><span class="token constant">GATEWAY</span><span class="token attr-value"><span class="token punctuation">=</span>192.168.10.2</span><span class="token comment"># DNS在虚拟机中由网关代为转发</span><span class="token constant">DNS1</span><span class="token attr-value"><span class="token punctuation">=</span>192.168.10.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项</strong></p><p><code>IPADDR</code>需要位于VMnet8子网IP范围内，<code>GATEWAY</code>需要配置为的NAT服务的网关IP。</p></li></ul></li><li><p>重新启动网络服务</p><p> 在终端执行以下命令，重启network服务</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># systemctl restart network</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>观察网络配置是否生效</p><p>在终端执行<code>ifoconfig</code>命令，观察<code>ens33</code>的网络接口的IP地址是否为前文所配置的<code>IPADDR</code>。</p></li></ol><h3 id="5-服务器连接和文件下载"><a href="#5-服务器连接和文件下载" class="headerlink" title="5. 服务器连接和文件下载"></a>5. 服务器连接和文件下载</h3><h4 id="1-Linux测试服务器连接"><a href="#1-Linux测试服务器连接" class="headerlink" title="(1)Linux测试服务器连接"></a>(1)Linux测试服务器连接</h4><p>​    <strong>通过ping命令可以检查指定的网络服务器是否是可联通状态</strong></p><p>​    语法：<code>ping [-c num] ip或主机名</code></p><ul><li>-c：检查的次数，一般不使用-c选项，将无限次数持续检查</li><li>ip或主机名，被检查的服务器的ip地址或主机名地址</li></ul><h4 id="2-文件下载"><a href="#2-文件下载" class="headerlink" title="(2)文件下载"></a>(2)文件下载</h4><h5 id="wget实现文件下载（更适合下载文件（尤其是大文件或网站镜像））"><a href="#wget实现文件下载（更适合下载文件（尤其是大文件或网站镜像））" class="headerlink" title="wget实现文件下载（更适合下载文件（尤其是大文件或网站镜像））"></a>wget实现文件下载（更适合下载文件（尤其是大文件或网站镜像））</h5><p>​    wget是非交互式的文件下载器</p><p>​    <strong>通过wget命令可以在命令行内下载网络文件</strong></p><p>​    语法：<code>wget [-b] url</code></p><ul><li><p>-b：后台下载，会将日志写入到当前工作目录的wget-log文件</p></li><li><p>url：下载链接</p><p><strong>注意：无论下载是否完成，都会生成要下载的文件，如果下载未完成，请及时清理未完成的不可用文件</strong></p></li></ul><h5 id="curl实现文件下载（更适合调试-HTTP-接口、处理复杂请求）"><a href="#curl实现文件下载（更适合调试-HTTP-接口、处理复杂请求）" class="headerlink" title="curl实现文件下载（更适合调试 HTTP 接口、处理复杂请求）"></a>curl实现文件下载（更适合调试 HTTP 接口、处理复杂请求）</h5><p>​    <strong>通过curl命令可以发送http网络请求(GET、POST等)，可用于：下载(小)文件、获取信息(网页源代码)等</strong></p><p>​    语法：curl [-o] url</p><ul><li>-o：用于下载文件，当url是下载链接时，可以使用此选项保存文件</li><li>url：要发起请求的网络地址</li></ul><h3 id="6-端口与进程管理"><a href="#6-端口与进程管理" class="headerlink" title="6. 端口与进程管理"></a>6. 端口与进程管理</h3><h4 id="1-端口"><a href="#1-端口" class="headerlink" title="(1)端口"></a>(1)端口</h4><p>​    端口是设备与外界通讯交流的出入口。端口可以分为：物理端口和虚拟端口两类</p><ul><li>物理端口：又称为接口，是可见的端口，如USB、HDMI等</li><li>虚拟端口：指计算机内部的端口，是不可见的，是用来操作系统和外部进行交互使用的</li></ul><h5 id="计算机程序之间的通讯原理"><a href="#计算机程序之间的通讯原理" class="headerlink" title="计算机程序之间的通讯原理"></a>计算机程序之间的通讯原理</h5><p>​    通过IP只能锁定计算机，无法锁定具体的程序</p><p>​    通过端口可以锁定计算机上具体的程序，确保程序之间进行沟通</p><p>​    <strong>IP地址相当于小区地址，在小区内可以有许多住户（程序）而门牌号（端口）就是各个住户（程序）的联系地址</strong></p><h5 id="Linux系统的端口范围"><a href="#Linux系统的端口范围" class="headerlink" title="Linux系统的端口范围"></a>Linux系统的端口范围</h5><p>​    Linux系统是一个超大号小区，可以支持65535个端口，这6万多个端口分为3类进行使用</p><ul><li>公认端口：0~1023：通常用于一些系统内置或知名程序的预留使用，如SSH服务的22端口，HTTPS服务的443端口，非特殊需要，不要占用这个范围的端口</li><li>注册端口：1024~49151：通常可以随意使用，用于松散的绑定一些程序\服务</li><li>动态端口：49151~65535：通常不会固定绑定程序，而是当程序对外进行网络链接时(即出口)，用于临时使用</li></ul><p><a href="https://imgse.com/i/pk7FoT0"><img src="https://s21.ax1x.com/2024/07/21/pk7FoT0.png" alt="端口的作用(非真实微信)"></a></p><h5 id="端口号的查看"><a href="#端口号的查看" class="headerlink" title="端口号的查看"></a>端口号的查看</h5><p>​    <strong>通过nmap命令可以查看某台机器的哪些端口开着</strong></p><p>​    语法：<code>nmap IP地址</code></p><p>​    注意：nmap命令不是系统自带的需要安装：yum -y install nmap</p><p>​    <strong>通过netstat命令（监听本地机器）可以排查端口被哪个进程占用、本地服务是否监听</strong></p><p>​    语法：<code>netstat -anp | grep 端口(进程)号</code></p><p>​    注意：netstat命令不是系统自带的需要安装：yum -y install net-tools</p><p>​    区别</p><table><thead><tr><th>特性</th><th>nmap</th><th>netstat</th></tr></thead><tbody><tr><td><strong>作用范围</strong></td><td>扫描“别的机器”或本机的开放端口</td><td>查看“本机”当前网络连接和端口占用情况</td></tr><tr><td><strong>原理</strong></td><td>通过发送网络探测包判断目标 IP 的开放端口（外部扫描）</td><td>查看本地系统内核维护的网络连接表（内部查看）</td></tr><tr><td><strong>用途</strong></td><td>网络安全扫描、端口探测</td><td>排查端口占用、网络连接、查看服务监听情况</td></tr><tr><td><strong>权限要求</strong></td><td>非 root 只能做基础扫描，root 权限下功能更强</td><td>一般也需要 root 才能查看全部进程</td></tr><tr><td><strong>是否显示进程名</strong></td><td>不能直接看到服务名和进程（仅端口）</td><td>能看到进程 PID 和程序名（加 <code>-p</code> 参数）</td></tr></tbody></table><h4 id="2-进程管理"><a href="#2-进程管理" class="headerlink" title="(2)进程管理"></a>(2)进程管理</h4><p>​    程序运行在操作系统中是被操作系统管理的</p><p>​    为管理运行的程序，每个程序在运行的时候，便被操作系统注册为系统中的一个：进程，并会为每一个进程都分配一个独有的：进程ID</p><h5 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h5><p>​    <strong>通过ps命令可以查看Linux系统中的进程信息</strong></p><p>​    语法：<code>ps [-e -f]</code></p><ul><li><p>-e：显示出全部的进程</p></li><li><p>-f：以完全格式化的形式展示信息(展示全部信息)</p><p>固定用法为：<code>ps -ef</code>，列出全部进程的全部信息</p></li></ul><p>​    全部进程的全部信息如下图所示：</p><p><a href="https://imgse.com/i/pk7e6kn"><img src="https://s21.ax1x.com/2024/07/21/pk7e6kn.png" alt="**进程信息**"></a></p><p>​    上图从左到右依次为：</p><ul><li>UID：进程所属的用户ID</li><li>PID：进程的进程号ID</li><li>PPID：进程的父ID(启动此进程的其他进程)</li><li>C：此进程的CPU占用率(百分比)</li><li>STIME：进程的启动时间</li><li>TTY：启动此进程的终端序号，如显示<code>?</code> ，表示非终端启动</li><li>TIME：进程占用CPU的时间</li><li>CMD：进程对应的名称或启动路径或启动命令</li></ul><h5 id="ps的使用技巧"><a href="#ps的使用技巧" class="headerlink" title="ps的使用技巧"></a>ps的使用技巧</h5><p>​    配合grep可以查看想要查看的进程，例如</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;查看所有的Java进程ps -ef | grep java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h5><p>​    在Windows系统中，可以通过任务管理器选择进程，点击结束进程来关闭它</p><p>​    <strong>在Linux系统中，通过kill命令来终止进程</strong></p><p>​    语法：<code>kill [-9] 进程ID</code></p><ul><li>-9：表示强制终止进程，不使用选项会向进程发送信号要求其关闭，但是否关闭要看进程自身的处理机制</li></ul><h3 id="7-主机状态"><a href="#7-主机状态" class="headerlink" title="7. 主机状态"></a>7. 主机状态</h3><h4 id="1-查看系统资源占用"><a href="#1-查看系统资源占用" class="headerlink" title="(1)查看系统资源占用"></a>(1)查看系统资源占用</h4><p>​    <strong>通过top命令查看CPU、内存使用情况，类似Windows系统的任务管理器</strong></p><p>​    语法：<code>top</code></p><p>​    注意：界面默认每5秒刷新一次，按q或ctrl+c退出</p><p><a href="https://imgse.com/i/pk7Nfc4"><img src="https://s21.ax1x.com/2024/07/22/pk7Nfc4.png" alt="交互式选项"></a></p><p>​    </p><p><a href="https://imgse.com/i/pk7NhjJ"><img src="https://s21.ax1x.com/2024/07/22/pk7NhjJ.png" alt="非交互式选项"></a></p><h4 id="2-磁盘信息监控"><a href="#2-磁盘信息监控" class="headerlink" title="(2)磁盘信息监控"></a>(2)磁盘信息监控</h4><p>​    <strong>通过df命令可以查看硬盘的使用情况</strong></p><p>​    语法：<code>df [-h]</code></p><ul><li>-h，以更加人性化的单位显示</li></ul><p>​    <strong>通过iostat命令可以查看CPU、磁盘的相关信息</strong></p><p>​    语法：<code>iostat [-x] [num1] [num2]</code></p><ul><li>-x，显示更多信息</li><li>num1，数字，刷新间隔</li><li>num2，数字，刷新几次</li></ul><h4 id="3-网络状态监控"><a href="#3-网络状态监控" class="headerlink" title="(3)网络状态监控"></a>(3)网络状态监控</h4><p>​    <strong>通过sar命令可以查看网络的相关统计(sar命令非常复杂，这里仅简单用于统计网络)</strong></p><p>​    语法：<code>sar -n DEV [num1] [num2]</code></p><ul><li>-n，查看网络</li><li>DEV，查看网络接口</li><li>num1，刷新间隔(不填就查看一次结束)</li><li>num2，查看次数(不填无限次数)</li></ul><h3 id="8-环境变量"><a href="#8-环境变量" class="headerlink" title="8. 环境变量"></a>8. 环境变量</h3><p>​    <strong>通过env命令可以查看当前系统中记录的环境变量</strong></p><p>​    语法：<code>env</code></p><p>​    注意：环境变量是一种KeyValue结构</p><p>​    <strong>使用echo <code>$&#123;Key&#125;</code> 可以直接在命令行输出Value，即<code>$&#123;Key&#125;</code> 可以取到环境变量的值</strong></p><h5 id="Linux环境变量的自行设置"><a href="#Linux环境变量的自行设置" class="headerlink" title="Linux环境变量的自行设置"></a>Linux环境变量的自行设置</h5><ul><li><p>临时设置，语法：<code>export 变量名=变量值</code></p></li><li><p>永久生效</p><ul><li><p>针对当前用户生效，配置在当前用户的：vi ~/.bashrc在文件中加export 变量名=变量值；保存后通过语法：source .bashrc生效</p></li><li><p>针对所有用户生效，配置在系统的：vim /etc/profile 文件中加export 变量名=变量值；保存后通过语法：source /etc/profile生效</p></li></ul></li></ul><h3 id="9-Linux文件的压缩与解压"><a href="#9-Linux文件的压缩与解压" class="headerlink" title="9. Linux文件的压缩与解压"></a>9. Linux文件的压缩与解压</h3><h4 id="1-常用格式-tar和-gz"><a href="#1-常用格式-tar和-gz" class="headerlink" title="(1)常用格式.tar和.gz"></a>(1)常用格式.tar和.gz</h4><p>​    tar就是打包，gz才是压缩</p><ul><li>.tar，称为tarball，归档文件，即简单的将文件组装到一个.tar的文件内，并没有太多文件体积的减少，仅仅是简单的封装</li><li>.gz，常见的为.tar.gz，gzip压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积</li></ul><h5 id="书本语法"><a href="#书本语法" class="headerlink" title="书本语法"></a>书本语法</h5><p>​    针对上述两种格式，使用tar命令均可以进行压缩和解压缩的操作</p><p>​    打包：<code>tar [-c -f] 包名 文件1 文件2 ... 文件N</code></p><p>​    解包：<code>tar [-x -f] 包名 -C 指定目录</code></p><ul><li>-c，创建压缩文件，用于压缩模式</li><li>-v，显示压缩、解压过程，用于查看进度</li><li>-x，解压模式</li><li>-f，要创建的文件，或要解压的文件，-f选项<strong>必须在所有选项中位置处于最后一个</strong></li><li>-z，gzip模式。不使用-z就是普通的tarball格式，**-z选项一般使用时放在选项位第一个**</li><li>-C 指定目录，选择解压的目的地，用于解压模式，**-C要单独在后面列出，和解压所需的其他参数分开**</li></ul><h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><ol><li><p>压缩的例子：将1.txt，2.txt，3.txt压缩到test.tar文件内</p> <pre class="line-numbers language-none"><code class="language-none">tar -cvf test.tar 1.txt 2.txt 3.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解压的例子</p><ul><li><p>解压test.tar</p><pre class="line-numbers language-none"><code class="language-none">tar -xvf test.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解压test.tar到指定目录(/home/rain)</p><pre class="line-numbers language-none"><code class="language-none">tar -xvf test.tar -C &#x2F;home&#x2F;rain&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h4 id="2-ZIP格式的压缩和解压"><a href="#2-ZIP格式的压缩和解压" class="headerlink" title="(2)ZIP格式的压缩和解压"></a>(2)ZIP格式的压缩和解压</h4><h5 id="书本语法-1"><a href="#书本语法-1" class="headerlink" title="书本语法"></a>书本语法</h5><ul><li>压缩的语法：<code>zip [-r] xxx.zip 要压缩的文件路径</code><ul><li>-r，参数中有文件夹时使用</li></ul></li><li>解压的语法：<code>unzip xxx.zip [-d 目录]</code><ul><li>-d，指定解压去的目录。用法和上面的-C一样</li></ul></li></ul><h5 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h5><ol><li><p>压缩的例子：将file1.txt和file2.txt，压缩为first.zip</p> <pre class="line-numbers language-none"><code class="language-none">zip first.zip file1.txt file2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>解压缩的例子：将first.zip解压到zip目录</p><pre class="line-numbers language-none"><code class="language-none">mkdir zipunzip first.zip -d zip&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子网与子网掩码和DNS</title>
      <link href="/2025/05/17/%E5%AD%90%E7%BD%91%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E5%92%8CDNS/"/>
      <url>/2025/05/17/%E5%AD%90%E7%BD%91%E4%B8%8E%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E5%92%8CDNS/</url>
      
        <content type="html"><![CDATA[<h3 id="1-子网（Subnet）"><a href="#1-子网（Subnet）" class="headerlink" title="1. 子网（Subnet）"></a>1. 子网（Subnet）</h3><p>​    子网是大型网络被划分成多个较小网络的结果。划分子网的目的是为了更高效地利用 IP 地址和更灵活地进行网络管理。</p><p>​    <strong>在私有网络（内网）中，子网 IP 是可以自己定的</strong></p><blockquote><p>一个子网就是一个“IP 地址范围”，属于同一个“网络地址”</p></blockquote><h3 id="2-子网掩码（Subnet-Mask）"><a href="#2-子网掩码（Subnet-Mask）" class="headerlink" title="2. 子网掩码（Subnet Mask）"></a>2. 子网掩码（Subnet Mask）</h3><p>​    子网掩码的作用是标识IP 地址中哪些是网络位，哪些是主机位</p><p>​    子网掩码将一个 IP 地址分解成两部分：</p><pre class="line-numbers language-none"><code class="language-none">IP地址 &#x3D; 网络地址 + 主机地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>子网掩码与子网IP按位与之后得出网络地址，比较网络地址是否相等即可判断是否同一子网。</strong></p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul><li>32 位的二进制数</li><li>连续的 1 表示网络位，连续的 0 表示主机位</li><li>常见表示形式：<ul><li>点分十进制：<code>255.255.255.0</code></li><li>CIDR 表示法：<code>/24</code>，表示前 24 位是网络位</li></ul></li></ul><h5 id="子网掩码的使用："><a href="#子网掩码的使用：" class="headerlink" title="子网掩码的使用："></a>子网掩码的使用：</h5><ul><li>计算某个 IP 所在的网络地址</li><li>判断两个 IP 是否在同一子网</li><li>划分出多个子网段，方便管理和路由转发</li></ul><h3 id="3-子网划分的经典例子"><a href="#3-子网划分的经典例子" class="headerlink" title="3. 子网划分的经典例子"></a>3. 子网划分的经典例子</h3><h4 id="1-题目："><a href="#1-题目：" class="headerlink" title="(1)题目："></a>(1)题目：</h4><p>​    将 <code>192.168.1.0/24</code> 划分为 4 个子网，问每个子网的范围是多少？<code>192.168.1.62</code> 属于哪个子网？</p><h5 id="步骤-1：分析子网数量"><a href="#步骤-1：分析子网数量" class="headerlink" title="步骤 1：分析子网数量"></a>步骤 1：分析子网数量</h5><ul><li>原始：<code>/24</code> → 主机位 8 位，可容纳 2⁸ = 256 个地址</li><li>目标：分成 4 个子网 → 需要多用 2 位作为网络位（2² = 4）</li><li>新掩码：<code>/26</code> → 主机位变为 6 位 → 每个子网有 2⁶ = 64 个地址</li></ul><h5 id="步骤-2：列出子网范围（每个步长为-64）"><a href="#步骤-2：列出子网范围（每个步长为-64）" class="headerlink" title="步骤 2：列出子网范围（每个步长为 64）"></a>步骤 2：列出子网范围（每个步长为 64）</h5><table><thead><tr><th>子网编号</th><th>网络地址</th><th>可用主机范围</th><th>广播地址</th></tr></thead><tbody><tr><td>子网 1</td><td>192.168.1.0</td><td>192.168.1.1 ~ 62</td><td>192.168.1.63</td></tr><tr><td>子网 2</td><td>192.168.1.64</td><td>192.168.1.65 ~ 126</td><td>192.168.1.127</td></tr><tr><td>子网 3</td><td>192.168.1.128</td><td>192.168.1.129 ~ 190</td><td>192.168.1.191</td></tr><tr><td>子网 4</td><td>192.168.1.192</td><td>192.168.1.193 ~ 254</td><td>192.168.1.255</td></tr></tbody></table><h5 id="步骤-3：判断-IP-是否属于某个子网"><a href="#步骤-3：判断-IP-是否属于某个子网" class="headerlink" title="步骤 3：判断 IP 是否属于某个子网"></a>步骤 3：判断 IP 是否属于某个子网</h5><p>查找 <code>192.168.1.62</code> 属于哪个子网？</p><ul><li>它在范围 <code>192.168.1.1 ~ 62</code> 中</li><li>✅ 所以它属于子网 1，即 <code>192.168.1.0/26</code></li></ul><h4 id="2-用二进制演示子网划分（按位与）"><a href="#2-用二进制演示子网划分（按位与）" class="headerlink" title="(2)用二进制演示子网划分（按位与）"></a>(2)用二进制演示子网划分（按位与）</h4><p>IP1：192.168.1.62  </p><p>子网掩码：255.255.255.192（即 <code>/26</code>）</p><p>转成二进制：</p><pre class="line-numbers language-none"><code class="language-none">IP       : 11000000.10101000.00000001.00111110子网掩码 : 11111111.11111111.11111111.11000000按位与结果:         &#x3D; 11000000.10101000.00000001.00000000         &#x3D; 192.168.1.0 （这是网络地址）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看另一个 IP，例如：192.168.1.100：</p><pre class="line-numbers language-none"><code class="language-none">IP       : 11000000.10101000.00000001.01100100掩码     : 11111111.11111111.11111111.11000000结果     : 11000000.10101000.00000001.01000000         &#x3D; 192.168.1.64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="判断是否同一网段的口诀"><a href="#判断是否同一网段的口诀" class="headerlink" title="判断是否同一网段的口诀"></a>判断是否同一网段的口诀</h5><pre class="line-numbers language-none"><code class="language-none">IP1 &amp; 掩码 &#x3D;&#x3D; IP2 &amp; 掩码 → 同网段<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-DNS-与-hosts-区别"><a href="#4-DNS-与-hosts-区别" class="headerlink" title="4. DNS 与 hosts 区别"></a>4. DNS 与 hosts 区别</h2><table><thead><tr><th>项目</th><th>hosts（本地）</th><th>DNS（网络）</th></tr></thead><tbody><tr><td>本质</td><td>本地静态 IP 域名映射文件</td><td>分布式域名解析系统</td></tr><tr><td>作用</td><td>手动指定 IP</td><td>自动解析域名</td></tr><tr><td>优先级</td><td>高，系统先查 hosts</td><td>后查 DNS</td></tr><tr><td>控制权</td><td>本地用户控制</td><td>域名所有者控制</td></tr></tbody></table><blockquote><p>你可以把 DNS 理解为“云端大电话簿”，hosts 是你“本地私人通讯录”</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux02-Linux的权限设置与虚拟机网络配置</title>
      <link href="/2025/05/13/Linux02-Linux%E7%9A%84%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/05/13/Linux02-Linux%E7%9A%84%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Linux用户和权限"><a href="#1-Linux用户和权限" class="headerlink" title="1. Linux用户和权限"></a>1. Linux用户和权限</h3><h4 id="1-root用户和普通用户"><a href="#1-root用户和普通用户" class="headerlink" title="(1)root用户和普通用户"></a>(1)root用户和普通用户</h4><h5 id="root用户-超级管理员"><a href="#root用户-超级管理员" class="headerlink" title="root用户(超级管理员)"></a>root用户(超级管理员)</h5><p>​    在Linux系统中，拥有最大权限的账户名为：root(超级管理员)</p><p>​    无论是Windows、MacOS、Linux均采用多用户的管理模式进行权限管理</p><h5 id="普通用户"><a href="#普通用户" class="headerlink" title="普通用户"></a>普通用户</h5><p>​    普通用户的权限，在其HOME目录内是不受限制的，一旦出了HOME目录，大多数地方，普通用户仅有只读和执行权限，无修改权限</p><h5 id="su命令-用于切换到root用户"><a href="#su命令-用于切换到root用户" class="headerlink" title="su命令-用于切换到root用户"></a>su命令-用于切换到root用户</h5><p>​    su来自英文：Switch User</p><p>​    语法：<code>su [-] [用户名]</code></p><ul><li><code>-</code>符号是可选的表示是否在切换用户后加载环境变量(后续讲解)，建议带上</li><li>用户名，表示要切换的用户，省略表示切换到root</li><li>切换用户后，可以通过exit命令退回上一个用户，也可以使用快捷键：<code>ctrl+d</code></li></ul><h5 id="用户的切换"><a href="#用户的切换" class="headerlink" title="用户的切换"></a>用户的切换</h5><p>​    使用普通用户切换到其他用户需要输入密码，如切换到root用户</p><p>​    使用root用户切换到其他用户，无需密码，可以直接切换</p><h4 id="2-sudo命令的配置与使用"><a href="#2-sudo命令的配置与使用" class="headerlink" title="(2)sudo命令的配置与使用"></a>(2)sudo命令的配置与使用</h4><h5 id="sudo命令-用于为普通命令授权，临时以root身份执行"><a href="#sudo命令-用于为普通命令授权，临时以root身份执行" class="headerlink" title="sudo命令-用于为普通命令授权，临时以root身份执行"></a>sudo命令-用于为普通命令授权，临时以root身份执行</h5><p>​    语法：<code>sudo 其他命令</code>  </p><ul><li>在命令前带上sudo，视为这条命令临时赋予root权限</li><li><strong>并不是所有的用户都有权利使用sudo，我们需要为普通用户配置sudo认证</strong></li></ul><h5 id="为普通用户配置sudo认证"><a href="#为普通用户配置sudo认证" class="headerlink" title="为普通用户配置sudo认证"></a>为普通用户配置sudo认证</h5><p>​    1.切换到root用户，执行visudo命令，会自动通过vi打开：/etc/sudoers</p><p>​    2.在文件的最后添加</p><pre class="line-numbers language-none"><code class="language-none"># sudo 权限配置格式（写在 &#x2F;etc&#x2F;sudoers 或 &#x2F;etc&#x2F;sudoers.d&#x2F; 文件中）：&lt;用户名&gt;  ALL&#x3D;(ALL)  NOPASSWD: ALL# 例：zhangsan  ALL&#x3D;(ALL)  NOPASSWD: ALL# 解释：# &lt;用户名&gt;         → 要配置 sudo 权限的用户# ALL             → 适用于所有主机（单机就写 ALL）# (ALL)           → 可以切换成所有用户（包括 root）# NOPASSWD:       → 使用 sudo 不需要输入密码# ALL             → 可以运行所有命令# 注意事项：# - 空格必须正确，不能省略或乱加# - 括号必须用英文括号 ()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.最后通过wq保存退出</p><h3 id="2-用户、用户组"><a href="#2-用户、用户组" class="headerlink" title="2. 用户、用户组"></a>2. 用户、用户组</h3><p>​    在Linux系统中注册的个体称为一个<strong>用户</strong>，例如root和atguigu；每个用户都可以属于一个或多个<strong>用户组</strong>，每个文件或者目录都有一个所属用户和一个所属组。</p><h4 id="1-用户和用户组管理"><a href="#1-用户和用户组管理" class="headerlink" title="(1)用户和用户组管理"></a>(1)用户和用户组管理</h4><h5 id="用户组管理-需要root用户执行"><a href="#用户组管理-需要root用户执行" class="headerlink" title="用户组管理(需要root用户执行)"></a>用户组管理(需要root用户执行)</h5><ul><li><p>创建用户组</p><pre class="line-numbers language-none"><code class="language-none">groupadd 用户组名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除用户组</p><pre class="line-numbers language-none"><code class="language-none">groupdel 用户组名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="用户管理-需要root用户执行"><a href="#用户管理-需要root用户执行" class="headerlink" title="用户管理(需要root用户执行)"></a>用户管理(需要root用户执行)</h5><ul><li><p>创建用户</p><pre class="line-numbers language-none"><code class="language-none">useradd [-g -d] 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-g：指定用户的组，不指定-g，会在创建用户时同时创建一个同名组并将用户自动加入，指定-g时组需要已经存在</li><li>-d：指定用户HOME路径，不指定HOME目录默认在：/home/用户名</li></ul></li><li><p>删除用户</p><pre class="line-numbers language-none"><code class="language-none">userdel[-r] 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-r：删除用户的HOME目录。不使用-r在删除用户时，HOME目录保留</li></ul></li><li><p>查看用户所属组</p><pre class="line-numbers language-none"><code class="language-none">id [用户名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>用户名：被查看的用户名，不提供则查看自身</li></ul></li><li><p>修改用户所属组</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;将指定用户加入指定用户组usermod -aG 用户组 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="2-getent命令"><a href="#2-getent命令" class="headerlink" title="(2)getent命令"></a>(2)getent命令</h4><h5 id="getent命令-查看当前系统中有那些用户"><a href="#getent命令-查看当前系统中有那些用户" class="headerlink" title="getent命令-查看当前系统中有那些用户"></a>getent命令-查看当前系统中有那些用户</h5><p>​    语法：<code>getent passwd</code></p><p>​    返回的信息有七份，分别是：</p><p>​    用户名：密码(x)：用户ID：组ID：描述信息(无用)：HOME目录：执行终端(默认bash)</p><h5 id="getent命令-查看当前系统中有那些用户组"><a href="#getent命令-查看当前系统中有那些用户组" class="headerlink" title="getent命令-查看当前系统中有那些用户组"></a>getent命令-查看当前系统中有那些用户组</h5><p>​    语法：<code>getent group</code></p><p>​    返回信息有三份，分别为：</p><p>​    组名称：组认证(x)：组ID</p><h3 id="3-文件权限"><a href="#3-文件权限" class="headerlink" title="3. 文件权限"></a>3. 文件权限</h3><h4 id="1-查看文件权限信息"><a href="#1-查看文件权限信息" class="headerlink" title="(1)查看文件权限信息"></a>(1)查看文件权限信息</h4><p><a href="https://imgse.com/i/pkh6DyQ"><img src="https://s21.ax1x.com/2024/07/11/pkh6DyQ.png" alt="查看文件权限信息"></a></p><h5 id="权限细节"><a href="#权限细节" class="headerlink" title="权限细节"></a>权限细节</h5><p>​    注意：三个权限有冲突的话取并集</p><p><a href="https://imgse.com/i/pkh6LY6"><img src="https://s21.ax1x.com/2024/07/11/pkh6LY6.png" alt="权限细节"></a></p><h5 id="rwx的含义"><a href="#rwx的含义" class="headerlink" title="rwx的含义"></a>rwx的含义</h5><ul><li>r ：表示读取权限（read）</li><li>w ：表示写入权限（write）</li><li>x ：表示执行权限（execute）</li></ul><h5 id="针对文件和文件夹，rwx-的含义有细微区别："><a href="#针对文件和文件夹，rwx-的含义有细微区别：" class="headerlink" title="针对文件和文件夹，rwx 的含义有细微区别："></a>针对文件和文件夹，rwx 的含义有细微区别：</h5><ol><li><code>r</code> 权限</li></ol><ul><li>对文件：可以查看文件内容</li><li>对文件夹：可以查看文件夹内的文件列表（如 <code>ls</code> 命令）</li></ul><ol start="2"><li><code>w</code> 权限</li></ol><ul><li>对文件：可以修改该文件内容</li><li>对文件夹：可以在文件夹内创建、删除、重命名文件等操作</li></ul><ol start="3"><li><code>x</code> 权限</li></ol><ul><li>对文件：可以将该文件作为程序执行</li><li>对文件夹：可以进入该目录（<code>cd</code> 进入）</li></ul><h4 id="2-chmod-权限信息的修改"><a href="#2-chmod-权限信息的修改" class="headerlink" title="(2)chmod-权限信息的修改"></a>(2)chmod-权限信息的修改</h4><p>​    通过chmod命令可以修改文件、文件夹的权限信息</p><p>​    <strong>注意：只有文件、文件夹的所属用户或root用户可以修改</strong></p><p>​    语法：<code>chmod [-R] 权限 文件或文件夹</code></p><ul><li>-R：对文件夹内的全部内容应用同样的操作</li><li>权限：[u/g/o/a]=[r/w/x]<ul><li>u：user </li><li>g：group</li><li>o：order</li><li>a：all</li></ul></li></ul><p>​    示例：</p><ul><li>chmod u=rwx,g=rx,o=x  hello.txt，将文件权限修改为：rwxr-x–x<ul><li>其中：u表示user所属用户权限，g表示group组权限，o表示other其他用户权限</li></ul></li><li>chmod -R u=rwx,g=rx,o=x test，将文件夹test以及文件夹内全部内容权限设置为：rwxr-x–x</li></ul><p>​    除了上述写法，Linux也提供简化的写法，使用数字来代表，第一位数字表示用户权限，第二位表示用户组权限，第三位表示其他用户权限。</p><p>​    数字细节如下：</p><ul><li>0：无任何权限，即—</li><li>1：仅有x权限，即–x</li><li>2：仅有w权限，即-w-</li><li>3：有w和x权限，即-wx</li><li>4：仅有r权限，即r–</li><li>5：有r和x权限，即r-x</li><li>6：有r和w权限，即rw-</li><li>7：有全部权限，即rwx</li></ul><p>​    所以上述例子的chmod u=rwx,g=rx,o=x  hello.txt可以用数字表示为chmod 751  hello.txt</p><p>​    方便的记法可以记为：r记为4，w记为2，x记为1，需要时相加即可</p><h4 id="3-chown-文件、文件夹的所属用户和用户组的修改"><a href="#3-chown-文件、文件夹的所属用户和用户组的修改" class="headerlink" title="(3)chown-文件、文件夹的所属用户和用户组的修改"></a>(3)chown-文件、文件夹的所属用户和用户组的修改</h4><p>​    通过chown命令可以修改文件、文件夹的所属用户和用户组</p><p>​    <strong>注意：普通用户无法修改所属为其他用户或组，所以此命令只适用于root用户执行</strong></p><p>​    语法：<code>chown [-R] [用户] [:] [用户组] 文件或文件夹</code></p><ul><li>-R，同chmod，对文件夹内全部内容应用相同规则</li><li>用户，修改所属用户</li><li>用户组，修改所属用户组</li><li>:，用于分隔用户和用户组</li></ul><p>​    示例：</p><ul><li>chown root hello.txt，将hello.txt所属用户修改为root</li><li>chown :root hello.txt，将hello.txt所属用户组修改为root</li><li>chown root:rain hello.txt，将hello.txt所属用户修改为root，用户组修改为rain</li><li>chown -R root test，将文件夹test的所属用户修改为root并对文件夹内全部内容应用同样规则</li></ul><h3 id="4-互联网的网络连接（计网知识）"><a href="#4-互联网的网络连接（计网知识）" class="headerlink" title="4. 互联网的网络连接（计网知识）"></a>4. 互联网的网络连接（计网知识）</h3><p>​    真实的网络环境如下图所示：最底下的为网卡（有线或无线）</p><p><a href="https://imgse.com/i/pEjTtpD"><img src="https://s21.ax1x.com/2025/05/15/pEjTtpD.png" alt="互联网连接"></a></p><p>​    路由器一端（WAN口，Wide Area Network）连接互联网，另一端（Local Area Network，LAN）连接多个设备，这些设备组成一个局域网，局域网中的设备都通过路由器访问互联网</p><p>​    <em>交换机用于在LAN口不够时，但又需要有线连接，则使用其用于扩展LAN口</em></p><ul><li><p><strong>DHCP</strong></p><p>全称<strong>Dynamic Host Configuration Protocol</strong> ，动态主机配置协议，该协议用于给联网的设备自动分配（私网）IP地址和其他网络配置。家用路由器中一般就会集成DHCP服务，因此设备只要连接上路由器，便能自动获取IP地址等网络配置。</p></li><li><p><strong>NAT</strong></p><p>全称<strong>Network Address Translation</strong>，网络地址转换，该技术主要用于缓解IPv4地址短缺，有了NAT之后，可以令多个网络设备共享一个公网IP地址，家庭路由器中也都集成了该服务。</p></li></ul><h5 id="NAT工作原理"><a href="#NAT工作原理" class="headerlink" title="NAT工作原理"></a>NAT工作原理</h5><p>​    NAT设备（路由器）一端连接互联网，其具有一个公网IP，另一端连接一个局域网，局域网中的每个设备均只有一个私网IP。当局域网中的设备经过路由器向互联网中的其他设备发送数据时，NAT服务会将数据包的源地址由该设备的私网IP替换为路由器的公网IP，因此互联网中的其他设备看到源地址为路由器的公网IP，所以其返回数据时，就会把路由器的公网IP设置为目标地址，路由器接收到数据之后，NAT设备再将数据的目标地址由路由器的公网IP改为原设备的私网IP，最终数据就能返回到该设备了。具体流程如下图所示</p><p><a href="https://imgse.com/i/pEjbF0A"><img src="https://s21.ax1x.com/2025/05/15/pEjbF0A.png" alt="NAT工作图示"></a></p><p>​    <code>src是源IP地址，dest是目标IP地址</code></p><h3 id="5-虚拟机的网络模式"><a href="#5-虚拟机的网络模式" class="headerlink" title="5. 虚拟机的网络模式"></a>5. 虚拟机的网络模式</h3><h4 id="1-桥接模式"><a href="#1-桥接模式" class="headerlink" title="(1)桥接模式"></a>(1)桥接模式</h4><p>​    可以直接理解为<code>虚拟机直接接入到主机所在的网络（路由器）中</code>，若没有联网，则主机和虚拟机无法通信</p><p><a href="https://imgse.com/i/pEjbfnH"><img src="https://s21.ax1x.com/2025/05/15/pEjbfnH.png" alt="虚拟机桥接模式"></a></p><p>​    这种模式下，VMware虚拟出了一个交换机。首先，该虚拟交换机通过主机的物理网卡（<code>配置该模式时需要指定</code>）连接到主机所在的网络中，然后所有的虚拟机都通过虚拟交换机接入到主机所在网络中。所以在该模式下，虚拟机和主机位于同一网络中，因此在主机接入网络的前提下，虚拟机和物理机是可以互通的</p><h4 id="2-NAT模式"><a href="#2-NAT模式" class="headerlink" title="(2)NAT模式"></a>(2)NAT模式</h4><p>​    NAT模式下，主机和虚拟机并不是在同一网络下，所以主机是不能和虚拟机进行互通，此时会创建虚拟网卡，使用虚拟网卡（VMnet8）实现主机和虚拟机通信，此时通信不受联网影响</p><p><a href="https://imgse.com/i/pEjbT4P"><img src="https://s21.ax1x.com/2025/05/15/pEjbT4P.png" alt="虚拟机NAT模式"></a></p><p>​    这种模式下，VMware虚拟出了一个交换机，一个DHCP服务以及一个NAT服务，相当于构成了一个虚拟路由器。虚拟路由器通过主机的物理网卡连接到主机所在的网络，虚拟机则全部连接到虚拟路由器上，组成了一个子网。此时所有的虚拟机位于同一网络，因此彼此之间可以互通，但是主机不能与虚拟机互通</p><p>​    为使主机能够和虚拟机互通，VMware又在主机中虚拟出了一个网卡，并连接到了这个虚拟路由器中，这时主机便可虚拟机互通了</p><h4 id="3-仅主机模式"><a href="#3-仅主机模式" class="headerlink" title="(3)仅主机模式"></a>(3)仅主机模式</h4><p>​    仅主机模式如下图所示，虚拟出的网卡为（VMnet1）</p><p><a href="https://imgse.com/i/pEjqFvF"><img src="https://s21.ax1x.com/2025/05/15/pEjqFvF.png" alt="虚拟机仅主机模式"></a></p><p>​    这种模式，和NAT模式十分相似，唯一的区别是，虚拟路由器并未连接到主机所在的网络中，因此主机和虚拟机之间可以互通，但是虚拟机不能访问互联网</p><h4 id="4-网络模式的选择"><a href="#4-网络模式的选择" class="headerlink" title="(4)网络模式的选择"></a>(4)网络模式的选择</h4><p>​    为保证主机未联网的情况下，主机和虚拟机也能实现互通；同时保证主机联网的情况下虚拟机也能访问互联网，我们最好选择上述三种模式中的<code>NAT模式</code></p><h4 id="5-NAT模式在虚拟机的相关配置"><a href="#5-NAT模式在虚拟机的相关配置" class="headerlink" title="(5)NAT模式在虚拟机的相关配置"></a>(5)NAT模式在虚拟机的相关配置</h4><h5 id="VMware虚拟网络配置"><a href="#VMware虚拟网络配置" class="headerlink" title="VMware虚拟网络配置"></a>VMware虚拟网络配置</h5><p>​    1.点击VMware菜单栏中的<code>编辑</code>，选择<code>虚拟网络编辑器</code></p><p><a href="https://imgse.com/i/pEvtUun"><img src="https://s21.ax1x.com/2025/05/17/pEvtUun.png" alt="步骤1"></a></p><p>​    2.打开虚拟网络编辑器后，赋予管理员权限</p><p><a href="https://imgse.com/i/pEvtaBq"><img src="https://s21.ax1x.com/2025/05/17/pEvtaBq.png" alt="步骤2"></a></p><p>​    3.配置VMnet8子网</p><p><a href="https://imgse.com/i/pEvt0EV"><img src="https://s21.ax1x.com/2025/05/17/pEvt0EV.png" alt="步骤3"></a></p><p>​    4.打开NAT配置界面</p><p><a href="https://imgse.com/i/pEvtsCF"><img src="https://s21.ax1x.com/2025/05/17/pEvtsCF.png" alt="步骤4"></a></p><p>​    5.修改NAT配置：<code>NAT网关IP须位于VMnet8子网IP范围内</code></p><p><a href="https://imgse.com/i/pEvtD4U"><img src="https://s21.ax1x.com/2025/05/17/pEvtD4U.png" alt="步骤5"></a></p><h5 id="虚拟机选择网络模式"><a href="#虚拟机选择网络模式" class="headerlink" title="虚拟机选择网络模式"></a>虚拟机选择网络模式</h5><p>​    1.修改虚拟机所使用的网络模式</p><p><a href="https://imgse.com/i/pEvtcv9"><img src="https://s21.ax1x.com/2025/05/17/pEvtcv9.png" alt="1"></a></p><p>​    2.选择NAT模式</p><p><a href="https://imgse.com/i/pEvtRD1"><img src="https://s21.ax1x.com/2025/05/17/pEvtRD1.png" alt="2"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux01-Linux基础命令</title>
      <link href="/2025/05/11/Linux01-Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/05/11/Linux01-Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Linux的目录结构"><a href="#1-Linux的目录结构" class="headerlink" title="1. Linux的目录结构"></a>1. Linux的目录结构</h3><p>​    Linux的目录结构是一个树型结构</p><p>​    windows系统可以拥有多个盘符，如C盘、D盘、E盘，C、D、E分别为根目录，Linux没有盘符这个概念，只有一个根目录<code>/</code>，所有文件都在其下</p><h5 id="目录结构图"><a href="#目录结构图" class="headerlink" title="目录结构图"></a>目录结构图</h5><p><a href="https://imgse.com/i/pELBtVx"><img src="https://s21.ax1x.com/2025/05/08/pELBtVx.png" alt="Linux文件系统"></a></p><h5 id="各目录的作用"><a href="#各目录的作用" class="headerlink" title="各目录的作用"></a>各目录的作用</h5><p>​    目录前面加/表示在根目录下的该文件夹</p><table><thead><tr><th>目录</th><th>说明</th><th>作用</th></tr></thead><tbody><tr><td>/</td><td>根目录</td><td>根目录是整个文件系统的起点，所有其他目录和文件都位于根目录之下。</td></tr><tr><td>/home</td><td>家目录</td><td>每个用户的个人目录都位于这个目录下，通常以用户名命名。例如，用户<code>john</code>的主目录路径为<code>/home/john</code>。</td></tr><tr><td>/root</td><td>root用户的家目录</td><td>保存root用户的个人数据</td></tr><tr><td>/boot</td><td>引导文件所在目录</td><td>保存系统启动时所需的各种文件</td></tr><tr><td>/usr</td><td>User System Resources的简写，说法不唯一</td><td>存放用户可用的软件和程序文件，也包括了一些共享的数据和库文件。</td></tr><tr><td>/bin</td><td>binary的简写</td><td>存放系统的基本命令（如ls、cp等）和其余可执行文件。</td></tr><tr><td>/sbin</td><td>system binary的简写</td><td>存放系统管理和维护方面的二进制文件。</td></tr><tr><td>/etc</td><td>etcetera的简写</td><td>存放系统的配置文件，包括各种程序的配置文件和系统的全局配置文件。</td></tr><tr><td>/var</td><td>variable的简写</td><td>存放系统运行时产生的可变数据，如日志文件、数据库文件等。</td></tr><tr><td>/opt</td><td>optional的简写</td><td>存放一些可选的软件包，通常由用户自行安装。</td></tr><tr><td>/tmp</td><td>temporary的简写</td><td>存放临时文件，系统会定期清理该目录</td></tr></tbody></table><h3 id="2-Linux命令入门"><a href="#2-Linux命令入门" class="headerlink" title="2. Linux命令入门"></a>2. Linux命令入门</h3><p>​    <strong>Linux命令本体是一个个二进制可执行程序和Windows系统中的.exe文件是一个意思</strong></p><h4 id="1-Linux命令基础格式"><a href="#1-Linux命令基础格式" class="headerlink" title="(1) Linux命令基础格式"></a>(1) Linux命令基础格式</h4><p><a href="https://imgse.com/i/pFvqWjS"><img src="https://s21.ax1x.com/2024/04/15/pFvqWjS.png" alt="Linux命令基础格式"></a></p><h4 id="2-ls命令入门"><a href="#2-ls命令入门" class="headerlink" title="(2) ls命令入门"></a>(2) ls命令入门</h4><p>​    ls命令的作用：列出目录下的内容</p><p>​    语法细节：<code>ls [-a -l -h] [Linux路径]</code></p><p>​    直接使用ls命令本体表示：以平铺形式，列出当前工作目录下的内容</p><h4 id="3-HOME目录和工作目录"><a href="#3-HOME目录和工作目录" class="headerlink" title="(3) HOME目录和工作目录"></a>(3) HOME目录和工作目录</h4><p>​    home目录如下图所示：</p><p><a href="https://imgse.com/i/pFvLw80"><img src="https://s21.ax1x.com/2024/04/15/pFvLw80.png" alt="HOME目录"></a></p><p>​    Linux命令行在执行命令时，需要一个工作目录，打开命令行程序(终端)默认设置工作目录在用户的HOME目录</p><h4 id="4-ls名称的参数和选项的使用"><a href="#4-ls名称的参数和选项的使用" class="headerlink" title="(4) ls名称的参数和选项的使用"></a>(4) ls名称的参数和选项的使用</h4><ul><li>当ls不使用参数，表示列出当前工作目录的内容</li><li>当使用参数，ls命令的参数表示指定一个Linux路径，列出指定路径的内容</li></ul><h5 id="ls命令的可以使用选项"><a href="#ls命令的可以使用选项" class="headerlink" title="ls命令的可以使用选项"></a>ls命令的可以使用选项</h5><ul><li>-a选项，表示：all的意思，即列出全部文件(包含隐藏的文件/文件夹)</li><li>-l选项，表示：以列表(竖向排列)的形式展示内容，并展示更多信息</li><li>-h选项，表示：以易于阅读的形式，列出文件大小，如K、M、G；-h选项必须搭配-l选项使用</li></ul><h5 id="ls命令选项的组合使用"><a href="#ls命令选项的组合使用" class="headerlink" title="ls命令选项的组合使用"></a>ls命令选项的组合使用</h5><p>​    语法中的选项是可以组合使用的，可以多个一起使用，比如学习的-a和-l可以组合应用</p><p>​    写法：</p><ul><li><p>ls -l -a</p></li><li><p>ls -al</p></li><li><p>ls -la</p><p>这三种写法都是一样的，表示同时应用-l和-a的功能</p></li></ul><h3 id="3-目录切换相关命令-cd-pwd"><a href="#3-目录切换相关命令-cd-pwd" class="headerlink" title="3. 目录切换相关命令(cd/pwd)"></a>3. 目录切换相关命令(cd/pwd)</h3><p>​    <strong>可以通过cd命令更改当前所在的工作目录</strong></p><p>​    cd命令来自英文：Change Directory</p><p>​    语法：<code>cd [Linux路径]</code></p><ul><li>cd命令无需选项，只有参数，表示要切换到哪个目录下</li><li>cd命令直接执行，不写参数，表示回到用户的HOME目录</li></ul><p>​    <strong>可以通过pwd命令来查看当前所在的工作目录</strong></p><p>​    pwd命令来自：Print Work Directory</p><p>​    语法：<code>pwd</code></p><ul><li>pwd命令，无选项，无参数，可以直接使用，输入pwd即可</li></ul><h3 id="4-相对路径绝对路径和特殊路径符"><a href="#4-相对路径绝对路径和特殊路径符" class="headerlink" title="4. 相对路径绝对路径和特殊路径符"></a>4. 相对路径绝对路径和特殊路径符</h3><h5 id="cd命令的绝对路径与相对路径"><a href="#cd命令的绝对路径与相对路径" class="headerlink" title="cd命令的绝对路径与相对路径"></a>cd命令的绝对路径与相对路径</h5><ul><li>绝对路径：是以根目录为起点；cd /home/itheima/Desktop</li><li>相对路径：是以当前目录为起点；cd Desktop</li></ul><h5 id="返回上一级的两种方式"><a href="#返回上一级的两种方式" class="headerlink" title="返回上一级的两种方式"></a>返回上一级的两种方式</h5><ul><li>可以直接通过cd回到HOME目录</li><li>也可以通过特殊路径符来完成</li></ul><h5 id="特殊路径符："><a href="#特殊路径符：" class="headerlink" title="特殊路径符："></a>特殊路径符：</h5><ul><li><code>.</code> 表示当前目录，比如cd ./Desktop表示切换到当前目录下的Decktop目录内，和cd Desktop效果一致</li><li><code>..</code> 表示上一级目录，比如：cd.. 即可切换到上一级目录，cd ../..切换到上二级目录，依此类推</li><li>~ 表示HOME目录，比如：cd ~ 即可切换到HOME目录或cd ~/Decktop，切换到HOME内的Desktop目录</li></ul><h3 id="5-创建目录命令-mkdir"><a href="#5-创建目录命令-mkdir" class="headerlink" title="5. 创建目录命令(mkdir)"></a>5. 创建目录命令(mkdir)</h3><p>​    <strong>通过mkdir命令可以创建新的目录(文件夹)</strong></p><p>​    mkdir来自英文：Make Directory</p><p>​    语法：<code>mkdir [-p] Linux路径</code></p><ul><li>参数必填，表示Linux路径即要创建的文件夹的路径，相对路径或绝对路径均可</li><li>-p选项可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录(层级需要表现在Linux路径中)</li></ul><p>​    <strong>注意：创建文件夹需要修改权限，请确保操作均在HOME目录内，不要在HOME外操作涉及到权限问题，HOME外无法成功，后面有权限相关知识</strong></p><h3 id="6-文件操作命令-touch-cat-more"><a href="#6-文件操作命令-touch-cat-more" class="headerlink" title="6. 文件操作命令(touch,cat,more)"></a>6. 文件操作命令(touch,cat,more)</h3><p>​    <strong>通过touch命令创建文件(文件通过新建时的后缀加以区分)</strong></p><p>​    语法：<code>touch Linux路径</code></p><ul><li>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可使用</li><li>路径后面接<code>文件名.文件类型</code></li></ul><p>​    当前没有学习vi编辑器，无法向文件内编辑内容，所以可以通过图形化界面编辑</p><p>​    <strong>准备好文件内容后，可以通过cat查看内容</strong></p><p>​    语法：<code>cat Linux路径</code></p><ul><li>cat没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><p>​    <strong>more命令同样可以查看内容</strong></p><p>​    与cat不同之处是：</p><ul><li>cat是直接将内容全部显示出来</li><li>more支持翻页，如果文件内容过多，可以一页页的展示。通过单机空格翻页</li></ul><p>​    语法：<code>more Linux路径</code></p><ul><li>more没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li></ul><h3 id="7-文件操作命令-cp，mv，rm"><a href="#7-文件操作命令-cp，mv，rm" class="headerlink" title="7. 文件操作命令(cp，mv，rm)"></a>7. 文件操作命令(cp，mv，rm)</h3><p>​    <strong>通过cp命令可以复制文件或文件夹</strong></p><p>​    cp来自英文：copy</p><p>​    语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>-r选项，可选，复制文件夹使用，表示递归</li><li>参数1，Linux路径/文件夹或文件名，表示被复制的文件或文件夹</li><li>参数2，Linux路径/新的文件夹或文件名，表示要复制去的地方</li></ul><p>​    <strong>通过mv命令可以移动文件、文件夹</strong></p><p>​    mv命令来自英文：move</p><p>​    语法：<code>mv 参数1 参数2</code></p><ul><li>参数1，Linux路径/文件夹或文件名，表示被移动的文件或文件夹</li><li>参数2，Linux路径/[文件夹或文件名]，表示要移动去的地方，如果有改名则对文件进行改名，确保目标存在</li></ul><p>​    <strong>通过rm命令可以删除文件、文件夹</strong></p><p>​    rm命令来自英文：remove</p><p>​    语法：<code>rm[-r -f] 参数1 参数2 ... 参数n</code></p><ul><li>同cp命令一样，-r选项用于删除文件夹</li><li>-f表示force，强制删除(不会弹出提示确认信息)<ul><li>普通用户删除内容不会弹出提示，只有root管理员用户删除内容会有提示，所以root管理员需要使用-f</li><li>所以一般普通用户用不到-f选项</li></ul></li><li>参数1、参数2、… 、参数N表示要删除的文件或文件夹路径，按照空格隔开</li></ul><p>​    **rm命令支持通配符<code>*</code> ，用来做模糊匹配。符号<code>*</code> 表示通配符，即匹配任意内容(包含空)**，示例：</p><ul><li><code>test*</code>，表示匹配任何以test开头的内容</li><li><code>*test</code>，表示匹配任何以test结尾的内容</li><li><code>*test*</code>，表示匹配任何包含test的内容</li></ul><p>​    <strong>注意：普通用户使用su - root，密码是锁屏密码进入成为超级管理员，超级管理员使用exit退出成为普通用户</strong></p><p>​    rm是非常危险的命令当成为root管理员的使用不要执行<code>rm -rf /</code>或者<code>rm -rf /*</code>，效果等于Windows上执行C盘格式化</p><h3 id="8-查找命令-which、find"><a href="#8-查找命令-which、find" class="headerlink" title="8. 查找命令(which、find)"></a>8. 查找命令(which、find)</h3><p>​    <strong>通过which命令可以查看所使用的一系列命令的程序文件存放在哪里</strong></p><p>​    语法：<code>which 要查找的命令名</code></p><p>​    <strong>通过find命令可以搜索指定的文件</strong></p><p>​    find类似与Windows图形化界面中的搜索，如下图所示：</p><p><img src="https://pic.imgdb.cn/item/666192885e6d1bfa05dd7170.png" alt="Windows搜索"></p><h5 id="1-按文件名查找"><a href="#1-按文件名查找" class="headerlink" title="1.按文件名查找"></a>1.按文件名查找</h5><p>​    语法：<code>find 起始路径 -name &quot;被查找文件名&quot;</code></p><p>​    注意：<strong>起始路径表示从什么路径下开始搜索</strong>，为了能在整个系统完成搜索，可以进入root获取最大权限，<strong>被查找文件名支持使用通配符<code>*</code>来做模糊查询</strong></p><h5 id="2-按文件大小查找"><a href="#2-按文件大小查找" class="headerlink" title="2.按文件大小查找"></a>2.按文件大小查找</h5><p>​    语法：find 起始路径 -size +|-n[kMG]</p><ul><li>+、-表示大于和小于</li><li>n表示大小数字</li><li>kMG表示大小单位，k(小写字母)表示kb，M表示MB，G表示GB</li></ul><p>​    示例：</p><ul><li>查找小于10KB文件：find / -size -10k</li><li>查找大于100MB文件：find / -size +100M</li><li>查找大于1GB的文件：find / -size +1G</li></ul><h3 id="9-grep、wc和管道符"><a href="#9-grep、wc和管道符" class="headerlink" title="9. grep、wc和管道符"></a>9. grep、wc和管道符</h3><p>​    <strong>通过grep命令可以从文件中通过关键字过滤文件行，有结果会将包含关键字的行在黑窗口输出</strong></p><p>​    语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>-n，可选，表示在结果中显示匹配的行的行号</li><li>关键字，必填，表示过滤的关键字，带有空格或其他特殊符号，建议使用<code>&quot;&quot;</code>将关键字包围起来</li><li>文件路径，必填，表示要过滤内容的文件路径，可用管道符内容输入</li></ul><p>​    </p><p>​    <strong>通过wc命令可以统计文件的行数、单词数量等</strong></p><p>​    语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>-c，统计bytes数量</li><li>-m，统计字符数量</li><li>-l，统计行数</li><li>-w，统计单词数量</li><li>文件路径，被统计的文件，可用管道符内容输入</li></ul><p>​    <strong>管道符：|</strong></p><p>​    管道符的含义：将管道符左边命令的结果，作为右边命令的输入，如下图所示</p><p><img src="https://pic.imgdb.cn/item/6665a1155e6d1bfa05e3b1aa.png" alt="图示"></p><p>​    注意：所有在黑窗口打印内容的命令都可以和管道符搭配使用，如ls等</p><h3 id="10-echo、重定向符、tail"><a href="#10-echo、重定向符、tail" class="headerlink" title="10. echo、重定向符、tail"></a>10. echo、重定向符、tail</h3><p>​    <strong>通过echo命令可以在命令行内输出指定内容，有点像print方法</strong></p><p>​    语法：<code>echo 输出内容</code></p><ul><li>注意：复杂内容可以用<code>&quot;&quot;</code>包围</li></ul><p>​    通过反引号``` `(通常称为飘号)包围内容，被包围的内容会被当做命令执行，而非普通字符</p><pre class="line-numbers language-Linux" data-language="Linux"><code class="language-Linux">如：echo &#96;pwd&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>重定向符：<code>&gt;</code>和<code>&gt;&gt;</code></strong></p><ul><li><code>&gt;</code>：将左侧命令的结果，覆盖写入到符号右侧指定的文件中</li><li><code>&gt;&gt;</code>：将左侧命令的结果，追加写入到符号右侧指定的文件中</li></ul><pre class="line-numbers language-none"><code class="language-none">echo &quot;hello&quot; &gt; test.txt    &#x2F;&#x2F;文件内容被覆盖为helloecho &quot;world&quot; &gt;&gt; test.txt   &#x2F;&#x2F;文件内容换行追加写入world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    <strong>通过tail命令可以查看文件尾部内容（后10行），用于跟踪文件的最新更改</strong></p><p>​    语法：<code>tail [-f -n 数字] Linux路径/文件名</code></p><ul><li>Linux路径，表示被跟踪文件的路径</li><li>-f，表示持续跟踪，任何其他人变动文件内容都会被追踪到，并在你的电脑显示变动内容，<code>ctrl+c</code>结束跟踪</li><li>-n 数字，表示查看尾部多少行，不填默认10行 </li></ul><h3 id="11-vi编辑器"><a href="#11-vi编辑器" class="headerlink" title="11. vi编辑器"></a>11. vi编辑器</h3><p>​    vi/vim是Linux中最经典的文本编辑器，<strong>vi是命令行下对文本文件进行编辑的最佳选择</strong></p><p>​    vim是vi的加强版，兼容vi所有指令，不仅可以编辑文本，而且还具有shell程序编辑的功能，可以不同颜色的字体来辨别语法的正确性。</p><h5 id="vi-vim编辑器的三种工作模式"><a href="#vi-vim编辑器的三种工作模式" class="headerlink" title="vi\vim编辑器的三种工作模式"></a>vi\vim编辑器的三种工作模式</h5><ul><li><p>命令模式</p><p>命令模式下，所敲的按键编辑器都理解为命令，以命令驱动执行不同的功能，此模式下，不能自由进行文本编辑，通过<code>/文本</code>，可以搜索到文本内容</p></li><li><p>输入模式</p><p>也叫编辑模式、插入模式，此模式下，可以对文件内容进行自由编辑</p></li><li><p>底线命令模式</p><p>以<code>:</code>为开始，用于文件的保存和退出</p></li></ul><h5 id="三种工作模式图示"><a href="#三种工作模式图示" class="headerlink" title="三种工作模式图示"></a>三种工作模式图示</h5><p><a href="https://imgse.com/i/pkUce1J"><img src="https://s21.ax1x.com/2024/06/11/pkUce1J.png" alt="vi\vim三种工作模式"></a></p><h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><p>​    vi 文件路径</p><p>​    <strong>vim 文件路径</strong></p><p>​    因为vim兼容vi所有功能，推荐使用vim</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语雀01-MybatisPlus.md</title>
      <link href="/2025/05/03/%E8%AF%AD%E9%9B%8001-MybatisPlus/"/>
      <url>/2025/05/03/%E8%AF%AD%E9%9B%8001-MybatisPlus/</url>
      
        <content type="html"><![CDATA[<h3 id="一、MyBatis-Plus简介"><a href="#一、MyBatis-Plus简介" class="headerlink" title="一、MyBatis-Plus简介"></a>一、MyBatis-Plus简介</h3><h4 id="1-、简介"><a href="#1-、简介" class="headerlink" title="1 、简介"></a>1 、简介</h4><p>​    MyBatis-Plus （简称 MP）是一个 MyBatis的增强工具 ，在 MyBatis 的基础上 只做增强不做改变 ，为简化开发、提高效率而生 </p><h5 id="MybatisPlus的层级关系（共四层）"><a href="#MybatisPlus的层级关系（共四层）" class="headerlink" title="MybatisPlus的层级关系（共四层）"></a>MybatisPlus的层级关系（共四层）</h5><pre class="line-numbers language-none"><code class="language-none">Controller (控制层)   ↓Service (业务接口)   ↓ServiceImpl (业务实现)   ↓Mapper (数据库操作接口)   ↓Entity (实体类)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h5><p>​    我们的愿景是成为 MyBatis 最好的搭档，就像魂斗罗中的 1P、2P，基友搭配，效率翻倍。</p><h4 id="2-、特性"><a href="#2-、特性" class="headerlink" title="2 、特性"></a>2 、特性</h4><ul><li><strong>无侵入</strong> ：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong> ：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong> ：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong> ：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong> ：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong> ：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong> ：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong> ：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong> ：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong> ：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong> ：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong> ：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h4 id="3-、支持数据库"><a href="#3-、支持数据库" class="headerlink" title="3 、支持数据库"></a>3 、支持数据库</h4><p>​    任何能使用MyBatis进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</p><h4 id="4、框架结构"><a href="#4、框架结构" class="headerlink" title="4、框架结构"></a>4、框架结构</h4><p><a href="https://imgse.com/i/pEIR476"><img src="https://s21.ax1x.com/2025/04/23/pEIR476.png" alt="MybatisPlus框架结构"></a></p><h4 id="5、代码及文档地址"><a href="#5、代码及文档地址" class="headerlink" title="5、代码及文档地址"></a>5、代码及文档地址</h4><h5 id="官方地址-http-mp-baomidou-com"><a href="#官方地址-http-mp-baomidou-com" class="headerlink" title="官方地址: http://mp.baomidou.com"></a>官方地址: <a href="http://mp.baomidou.com/">http://mp.baomidou.com</a></h5><h5 id="代码发布地址"><a href="#代码发布地址" class="headerlink" title="代码发布地址:"></a>代码发布地址:</h5><h5 id="Github-https-github-com-baomidou-mybatis-plus"><a href="#Github-https-github-com-baomidou-mybatis-plus" class="headerlink" title="Github: https://github.com/baomidou/mybatis-plus"></a>Github: <a href="https://github.com/baomidou/mybatis-plus">https://github.com/baomidou/mybatis-plus</a></h5><h5 id="Gitee-https-gitee-com-baomidou-mybatis-plus"><a href="#Gitee-https-gitee-com-baomidou-mybatis-plus" class="headerlink" title="Gitee: https://gitee.com/baomidou/mybatis-plus"></a>Gitee: <a href="https://gitee.com/baomidou/mybatis-plus">https://gitee.com/baomidou/mybatis-plus</a></h5><h5 id="文档发布地址-https-baomidou-com-pages-24112f"><a href="#文档发布地址-https-baomidou-com-pages-24112f" class="headerlink" title="文档发布地址: https://baomidou.com/pages/24112f"></a>文档发布地址: <a href="https://baomidou.com/pages/24112f">https://baomidou.com/pages/24112f</a></h5><h3 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h3><h4 id="1-、开发环境"><a href="#1-、开发环境" class="headerlink" title="1 、开发环境"></a>1 、开发环境</h4><p>​    IDE：idea 2019.</p><p>​    JDK：JDK8+</p><p>​    构建工具：maven 3.5.4</p><p>​    MySQL版本：MySQL 5.7</p><p>​    Spring Boot：2.6.3</p><p>​    MyBatis-Plus：3.5.1</p><h4 id="2-、创建数据库及表"><a href="#2-、创建数据库及表" class="headerlink" title="2 、创建数据库及表"></a>2 、创建数据库及表</h4><h5 id="a-gt-创建表"><a href="#a-gt-创建表" class="headerlink" title="a&gt;创建表"></a>a&gt;创建表</h5><pre class="line-numbers language-none"><code class="language-none">CREATE DATABASE &#96;mybatis_plus&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8mb4 *&#x2F;; use &#96;mybatis_plus&#96;; CREATE TABLE &#96;user&#96; ( &#96;id&#96; bigint(20) NOT NULL COMMENT &#39;主键ID&#39;, &#96;name&#96; varchar(30) DEFAULT NULL COMMENT &#39;姓名&#39;, &#96;age&#96; int(11) DEFAULT NULL COMMENT &#39;年龄&#39;, &#96;email&#96; varchar(50) DEFAULT NULL COMMENT &#39;邮箱&#39;, PRIMARY KEY (&#96;id&#96;) ) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-gt-添加数据"><a href="#b-gt-添加数据" class="headerlink" title="b&gt;添加数据"></a>b&gt;添加数据</h5><pre class="line-numbers language-none"><code class="language-none">INSERT INTO user (id, name, age, email) VALUES (1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;), (2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;), (3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;), (4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;), (5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-、创建Spring-Boot工程"><a href="#3-、创建Spring-Boot工程" class="headerlink" title="3 、创建Spring Boot工程"></a>3 、创建Spring Boot工程</h4><h5 id="a-gt-初始化工程"><a href="#a-gt-初始化工程" class="headerlink" title="a&gt;初始化工程"></a>a&gt;初始化工程</h5><p>​    使用 Spring Initializr 快速初始化一个 Spring Boot 工程（不需要其他依赖）</p><h5 id="b-gt-引入依赖"><a href="#b-gt-引入依赖" class="headerlink" title="b&gt;引入依赖"></a>b&gt;引入依赖</h5><pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;&lt;scope&gt;test&lt;&#x2F;scope&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;&lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;&lt;version&gt;3.5.1&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;&lt;optional&gt;true&lt;&#x2F;optional&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;&lt;scope&gt;runtime&lt;&#x2F;scope&gt;&lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-gt-idea中安装lombok插件"><a href="#c-gt-idea中安装lombok插件" class="headerlink" title="c&gt;idea中安装lombok插件"></a>c&gt;idea中安装lombok插件</h5><p><a href="https://imgse.com/i/pEIWFjs"><img src="https://s21.ax1x.com/2025/04/23/pEIWFjs.png" alt="lombook安装"></a></p><h4 id="4-、编写代码"><a href="#4-、编写代码" class="headerlink" title="4 、编写代码"></a>4 、编写代码</h4><h5 id="a-gt-配置application-yml"><a href="#a-gt-配置application-yml" class="headerlink" title="a&gt;配置application.yml"></a>a&gt;配置application.yml</h5><pre class="line-numbers language-none"><code class="language-none">spring: # 配置数据源信息 datasource:  # 配置数据源类型  type: com.zaxxer.hikari.HikariDataSource  # 配置连接数据库信息  driver-class-name: com.mysql.cj.jdbc.Driver  url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_plus?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false  username: root  password: 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>1 、驱动类driver-class-name</p><p>spring boot 2.0（内置jdbc5驱动），驱动类使用：</p><p>driver-class-name: com.mysql.jdbc.Driver</p><p>spring boot 2.1及以上（内置jdbc8驱动），驱动类使用：</p><p>driver-class-name: com.mysql.cj.jdbc.Driver</p><p>否则运行测试用例的时候会有 WARN 信息</p><p>2 、连接地址url</p><p>MySQL5.7版本的url：</p><p>jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</p><p>MySQL8.0版本的url：</p><p>jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</p><p>否则运行测试用例报告如下错误：</p><p>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents more</p><h5 id="b-gt-添加实体"><a href="#b-gt-添加实体" class="headerlink" title="b&gt;添加实体"></a>b&gt;添加实体</h5><pre class="line-numbers language-none"><code class="language-none">@Data &#x2F;&#x2F;lombok注解其等价与@Getter、@Setter、@ToString、@EqualsAndHashCode、@RequiredArgsConstructorpublic class User &#123;private Long id;private String name;private Integer age;private String email;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    User类编译之后的结果：</p><p><a href="https://imgse.com/i/pEIWYE6"><img src="https://s21.ax1x.com/2025/04/23/pEIWYE6.png" alt="User类编译结果"></a></p><h5 id="c-gt-添加mapper"><a href="#c-gt-添加mapper" class="headerlink" title="c&gt;添加mapper"></a>c&gt;添加mapper</h5><p>​    BaseMapper是MyBatis-Plus提供的模板mapper，其中包含了基本的CRUD方法，泛型为操作的实体类型</p><pre class="line-numbers language-none"><code class="language-none">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="d-gt-启动类"><a href="#d-gt-启动类" class="headerlink" title="d&gt;启动类"></a>d&gt;启动类</h5><p>在Spring Boot启动类中添加@MapperScan注解，扫描mapper包，<code>该注解是MybatisPlus提供的，必须添加</code></p><p>​    注意：<code>@MapperScan</code> 注解既可以写在 <strong>Spring Boot 启动类</strong> 上，也可以写在 <strong>配置类</strong> 上。两者的本质作用是一样的：用于告诉 MyBatis 去扫描指定包路径下的 Mapper 接口</p><pre class="line-numbers language-none"><code class="language-none">@SpringBootApplication@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)public class MybatisplusApplication &#123;public static void main(String[] args) &#123;SpringApplication.run(MybatisplusApplication.class, args);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="e-gt-测试"><a href="#e-gt-测试" class="headerlink" title="e&gt;测试"></a>e&gt;测试</h5><pre class="line-numbers language-none"><code class="language-none">@SpringBootTestpublic class MybatisPlusTest &#123;@Autowiredprivate UserMapper userMapper;@Testpublic void testSelectList()&#123;&#x2F;&#x2F;selectList()：根据MP内置的条件构造器查询一个list集合，null表示没有条件，即查询所有userMapper.selectList(null).forEach(System.out::println);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h5><p><a href="https://imgse.com/i/pEIWaCD"><img src="https://s21.ax1x.com/2025/04/23/pEIWaCD.png" alt="结果"></a></p><h5 id="注意：对c"><a href="#注意：对c" class="headerlink" title="注意：对c"></a>注意：对c</h5><p>​    IDEA在 userMapper 处报错，因为找不到注入的对象，其是一个接口，因为类是动态创建的，但是程序可以正确的执行。</p><p>​    为了避免报错，可以在mapper接口上添加 @Repository 注解</p><pre class="line-numbers language-none"><code class="language-none">@Repositorypublic interface UserMapper extends BaseMapper&lt;User&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="f-gt-添加日志"><a href="#f-gt-添加日志" class="headerlink" title="f&gt;添加日志"></a>f&gt;添加日志</h5><p>​    在application.yml中配置日志输出</p><pre class="line-numbers language-none"><code class="language-none"># 配置MyBatis日志mybatis-plus: configuration:  log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    日志结果</p><p><a href="https://imgse.com/i/pEIWrDI"><img src="https://s21.ax1x.com/2025/04/23/pEIWrDI.png" alt="日志输出"></a></p><h3 id="三、基本CRUD"><a href="#三、基本CRUD" class="headerlink" title="三、基本CRUD"></a>三、基本CRUD</h3><h4 id="1-、BaseMapper"><a href="#1-、BaseMapper" class="headerlink" title="1 、BaseMapper"></a>1 、BaseMapper</h4><p>​    MyBatis-Plus中的基本CRUD在内置的BaseMapper中都已得到了实现，我们可以直接使用，接口如下：</p><pre class="line-numbers language-none"><code class="language-none">package com.baomidou.mybatisplus.core.mapper;public interface BaseMapper&lt;T&gt; extends Mapper&lt;T&gt; &#123;    &#x2F;**     * 插入一条记录     * @param entity 实体对象    *&#x2F;    int insert(T entity);    &#x2F;**     * 根据 ID 删除     * @param id 主键ID    *&#x2F;    int deleteById(Serializable id);    &#x2F;**     * 根据实体(ID)删除     * @param entity 实体对象     * @since 3.4.    *&#x2F;    int deleteById(T entity);    &#x2F;**     * 根据 columnMap 条件，删除记录     * @param columnMap 表字段 map 对象    *&#x2F;    int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);    &#x2F;**     * 根据 entity 条件，删除记录     * @param queryWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）    *&#x2F;    int delete(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);    &#x2F;**     * 删除（根据ID 批量删除）     * @param idList 主键ID列表(不能为 null 以及 empty)    *&#x2F;    int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);    &#x2F;**     * 根据 ID 修改     * @param entity 实体对象    *&#x2F;    int updateById(@Param(Constants.ENTITY) T entity);    &#x2F;**     * 根据 whereEntity 条件，更新记录     * @param entity 实体对象 (set 条件值,可以为 null)     * @param updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）    *&#x2F;    int update(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; updateWrapper);    &#x2F;**     * 根据 ID 查询     * @param id 主键ID    *&#x2F;    T selectById(Serializable id);    &#x2F;**     * 查询（根据ID 批量查询）     * @param idList 主键ID列表(不能为 null 以及 empty)    *&#x2F;    List&lt;T&gt; selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);    &#x2F;**     * 查询（根据 columnMap 条件）     * @param columnMap 表字段 map 对象    *&#x2F;    List&lt;T&gt; selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);    &#x2F;**     * 根据 entity 条件，查询一条记录     * &lt;p&gt;查询一条记录，例如 qw.last(&quot;limit 1&quot;) 限制取一条记录, 注意：多条数据会报异常&lt;&#x2F;p&gt;     * @param queryWrapper 实体对象封装操作类（可以为 null）    *&#x2F;    default T selectOne(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper) &#123;        List&lt;T&gt; ts &#x3D; this.selectList(queryWrapper);        if (CollectionUtils.isNotEmpty(ts)) &#123;            if (ts.size() !&#x3D; 1) &#123;                throw ExceptionUtils.mpe(&quot;One record is expected, but the query result is multiple records&quot;);            &#125;            return ts.get(0);        &#125;        return null;    &#125;    &#x2F;**     * 根据 Wrapper 条件，查询总记录数     * @param queryWrapper 实体对象封装操作类（可以为 null）    *&#x2F;    Long selectCount(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);    &#x2F;**     * 根据 entity 条件，查询全部记录     * @param queryWrapper 实体对象封装操作类（可以为 null）    *&#x2F;    List&lt;T&gt; selectList(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);    &#x2F;**     * 根据 Wrapper 条件，查询全部记录     * @param queryWrapper 实体对象封装操作类（可以为 null）    *&#x2F;    List&lt;Map&lt;String, Object&gt;&gt; selectMaps(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);    &#x2F;**     * 根据 Wrapper 条件，查询全部记录     * &lt;p&gt;注意： 只返回第一个字段的值&lt;&#x2F;p&gt;     * @param queryWrapper 实体对象封装操作类（可以为 null）    *&#x2F;    List&lt;Object&gt; selectObjs(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);    &#x2F;**     * 根据 entity 条件，查询全部记录（并翻页）     * @param page 分页查询条件（可以为 RowBounds.DEFAULT）     * @param queryWrapper 实体对象封装操作类（可以为 null）    *&#x2F;    &lt;P extends IPage&lt;T&gt;&gt; P selectPage(P page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);    &#x2F;**     * 根据 Wrapper 条件，查询全部记录（并翻页）     * @param page 分页查询条件     * @param queryWrapper 实体对象封装操作类    *&#x2F;    &lt;P extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; P selectMapsPage(P page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-、MybatisPlus插入-演示"><a href="#2-、MybatisPlus插入-演示" class="headerlink" title="2 、MybatisPlus插入-演示"></a>2 、MybatisPlus插入-演示</h4><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testInsert()&#123;User user &#x3D; new User(null, &quot;张三&quot;, 23 , &quot;zhangsan@atguigu.com&quot;);&#x2F;&#x2F;INSERT INTO user ( id, name, age, email ) VALUES ( ?, ?, ?,? )int result &#x3D; userMapper.insert(user);System.out.println(&quot;受影响行数：&quot;+result);&#x2F;&#x2F;1475754982694199298System.out.println(&quot;id自动获取：&quot;+user.getId());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    最终执行的结果，所获取的id为 1475754982694199298</p><p>​    这是因为MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id，<strong>所以在创建表时，id需要为bigint类型，创建实体类时id需要为Long类型</strong></p><h4 id="3-、MybatisPlus删除-演示"><a href="#3-、MybatisPlus删除-演示" class="headerlink" title="3 、MybatisPlus删除-演示"></a>3 、MybatisPlus删除-演示</h4><h5 id="a-gt-通过id删除记录"><a href="#a-gt-通过id删除记录" class="headerlink" title="a&gt;通过id删除记录"></a>a&gt;通过id删除记录</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testDeleteById()&#123;&#x2F;&#x2F;通过id删除用户信息&#x2F;&#x2F;DELETE FROM user WHERE id&#x3D;?int result &#x3D; userMapper.deleteById(1475754982694199298L);System.out.println(&quot;受影响行数：&quot;+result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-gt-通过map设置的条件删除记录"><a href="#b-gt-通过map设置的条件删除记录" class="headerlink" title="b&gt;通过map设置的条件删除记录"></a>b&gt;通过map设置的条件删除记录</h5><p>​    把map中条件都满足的数据进行删除</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testDeleteByMap()&#123;&#x2F;&#x2F;根据map集合中所设置的条件删除记录&#x2F;&#x2F;DELETE FROM user WHERE name &#x3D;? AND age &#x3D;?Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();map.put(&quot;age&quot;, 23 );map.put(&quot;name&quot;, &quot;张三&quot;);int result &#x3D; userMapper.deleteByMap(map);System.out.println(&quot;受影响行数：&quot;+result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-gt-通过id批量删除记录"><a href="#c-gt-通过id批量删除记录" class="headerlink" title="c&gt;通过id批量删除记录"></a>c&gt;通过id批量删除记录</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testDeleteBatchIds()&#123;&#x2F;&#x2F;通过多个id批量删除&#x2F;&#x2F;执行的sql为：DELETE FROM user WHERE id IN (? ,? ,? )List&lt;Long&gt; idList &#x3D; Arrays.asList(1L, 2L, 3L);int result &#x3D; userMapper.deleteBatchIds(idList);System.out.println(&quot;受影响行数：&quot;+result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-、MybatisPlus修改-演示"><a href="#4-、MybatisPlus修改-演示" class="headerlink" title="4 、MybatisPlus修改-演示"></a>4 、MybatisPlus修改-演示</h4><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testUpdateById()&#123;User user &#x3D; new User(4L, &quot;admin&quot;, 22 , null); &#x2F;&#x2F;为空的email不会进行修改&#x2F;&#x2F;UPDATE user SET name&#x3D;?, age&#x3D;? WHERE id&#x3D;?int result &#x3D; userMapper.updateById(user);System.out.println(&quot;受影响行数：&quot;+result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-、MybatisPlus查询-演示"><a href="#5-、MybatisPlus查询-演示" class="headerlink" title="5 、MybatisPlus查询-演示"></a>5 、MybatisPlus查询-演示</h4><h5 id="a-gt-根据id查询用户信息"><a href="#a-gt-根据id查询用户信息" class="headerlink" title="a&gt;根据id查询用户信息"></a>a&gt;根据id查询用户信息</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testSelectById()&#123;&#x2F;&#x2F;根据id查询用户信息&#x2F;&#x2F;SELECT id,name,age,email FROM user WHERE id&#x3D;?User user &#x3D; userMapper.selectById(4L);System.out.println(user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-gt-根据多个id查询多个用户信息"><a href="#b-gt-根据多个id查询多个用户信息" class="headerlink" title="b&gt;根据多个id查询多个用户信息"></a>b&gt;根据多个id查询多个用户信息</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testSelectBatchIds()&#123;&#x2F;&#x2F;根据多个id查询多个用户信息&#x2F;&#x2F;SELECT id,name,age,email FROM user WHERE id IN (? ,? )List&lt;Long&gt; idList &#x3D; Arrays.asList(4L, 5L);List&lt;User&gt; list &#x3D; userMapper.selectBatchIds(idList);list.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-gt-通过map设置的条件查询用户信息"><a href="#c-gt-通过map设置的条件查询用户信息" class="headerlink" title="c&gt;通过map设置的条件查询用户信息"></a>c&gt;通过map设置的条件查询用户信息</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testSelectByMap()&#123;&#x2F;&#x2F;通过map条件查询用户信息&#x2F;&#x2F;SELECT id,name,age,email FROM user WHERE name &#x3D;? AND age &#x3D;?Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();map.put(&quot;age&quot;, 22 );map.put(&quot;name&quot;, &quot;admin&quot;);List&lt;User&gt; list &#x3D; userMapper.selectByMap(map);list.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="d-gt-查询所有数据"><a href="#d-gt-查询所有数据" class="headerlink" title="d&gt;查询所有数据"></a>d&gt;查询所有数据</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testSelectList()&#123;&#x2F;&#x2F;查询所有用户信息&#x2F;&#x2F;SELECT id,name,age,email FROM user&#x2F;&#x2F;需要传条件构造器，为null表示查全部List&lt;User&gt; list &#x3D; userMapper.selectList(null);list.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    通过观察BaseMapper中的方法，大多方法中都有Wrapper类型的形参，此为条件构造器，可针对于SQL语句设置不同的条件，若没有条件，则可以为该形参赋值null，即查询（删除/修改）所有数据</p><h4 id="6-、通用Service"><a href="#6-、通用Service" class="headerlink" title="6 、通用Service"></a>6 、通用Service</h4><h5 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h5><ul><li>通用 Service CRUD 封装IService接口，进一步封装 CRUD 采用 get 查询单行 remove 删除 list 查询集合 page 分页 前缀命名方式区分 Mapper 层避免混淆</li><li>泛型 T 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承Mybatis-Plus 提供的基类</li><li>官网地址：<a href="https://baomidou.com/pages/49cc81/#service-crud-%E6%8E%A5%E5%8F%A3">https://baomidou.com/pages/49cc81/#service-crud-%E6%8E%A5%E5%8F%A3</a></li></ul><h5 id="a-gt-IService"><a href="#a-gt-IService" class="headerlink" title="a&gt;IService"></a>a&gt;IService</h5><p>​    MyBatis-Plus中有一个接口 IService和其实现类 ServiceImpl，封装了常见的业务层逻辑，接口如下</p><pre class="line-numbers language-none"><code class="language-none">package com.baomidou.mybatisplus.extension.service;public interface IService&lt;T&gt; &#123;    &#x2F;&#x2F; 默认批处理大小    int DEFAULT_BATCH_SIZE &#x3D; 1000;    &#x2F;&#x2F; 插入一条数据    default boolean save(T entity) &#123;        return SqlHelper.retBool(this.getBaseMapper().insert(entity));    &#125;    &#x2F;&#x2F; 批量插入（默认批次大小）    @Transactional(rollbackFor &#x3D; &#123;Exception.class&#125;)    default boolean saveBatch(Collection&lt;T&gt; entityList) &#123;        return this.saveBatch(entityList, 1000);    &#125;    &#x2F;&#x2F; 批量插入（自定义批次大小）    boolean saveBatch(Collection&lt;T&gt; entityList, int batchSize);    &#x2F;&#x2F; 批量保存或更新（默认批次大小）    @Transactional(rollbackFor &#x3D; &#123;Exception.class&#125;)    default boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList) &#123;        return this.saveOrUpdateBatch(entityList, 1000);    &#125;    &#x2F;&#x2F; 批量保存或更新（自定义批次大小）    boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList, int batchSize);    &#x2F;&#x2F; 根据主键删除一条记录    default boolean removeById(Serializable id) &#123;        return SqlHelper.retBool(this.getBaseMapper().deleteById(id));    &#125;    &#x2F;&#x2F; 根据主键删除（带填充功能，暂不支持）    default boolean removeById(Serializable id, boolean useFill) &#123;        throw new UnsupportedOperationException(&quot;不支持的方法!&quot;);    &#125;    &#x2F;&#x2F; 根据实体主键值删除记录    default boolean removeById(T entity) &#123;        return SqlHelper.retBool(this.getBaseMapper().deleteById(entity));    &#125;    &#x2F;&#x2F; 根据 Map 条件删除记录    default boolean removeByMap(Map&lt;String, Object&gt; columnMap) &#123;        Assert.notEmpty(columnMap, &quot;error: columnMap must not be empty&quot;, new Object[0]);        return SqlHelper.retBool(this.getBaseMapper().deleteByMap(columnMap));    &#125;    &#x2F;&#x2F; 根据 Wrapper 条件构造器删除记录    default boolean remove(Wrapper&lt;T&gt; queryWrapper) &#123;        return SqlHelper.retBool(this.getBaseMapper().delete(queryWrapper));    &#125;    &#x2F;&#x2F; 根据主键集合批量删除    default boolean removeByIds(Collection&lt;?&gt; list) &#123;        return CollectionUtils.isEmpty(list) ? false : SqlHelper.retBool(this.getBaseMapper().deleteBatchIds(list));    &#125;    &#x2F;&#x2F; 批量删除（是否使用填充）    @Transactional(rollbackFor &#x3D; &#123;Exception.class&#125;)    default boolean removeByIds(Collection&lt;?&gt; list, boolean useFill) &#123;        if (CollectionUtils.isEmpty(list)) &#123;            return false;        &#125; else &#123;            return useFill ? this.removeBatchByIds(list, true) : SqlHelper.retBool(this.getBaseMapper().deleteBatchIds(list));        &#125;    &#125;    &#x2F;&#x2F; 批量删除（默认批次大小）    @Transactional(rollbackFor &#x3D; &#123;Exception.class&#125;)    default boolean removeBatchByIds(Collection&lt;?&gt; list) &#123;        return this.removeBatchByIds(list, 1000);    &#125;    &#x2F;&#x2F; 批量删除（默认批次+使用填充）    @Transactional(rollbackFor &#x3D; &#123;Exception.class&#125;)    default boolean removeBatchByIds(Collection&lt;?&gt; list, boolean useFill) &#123;        return this.removeBatchByIds(list, 1000, useFill);    &#125;    &#x2F;&#x2F; 批量删除（自定义批次大小）    default boolean removeBatchByIds(Collection&lt;?&gt; list, int batchSize) &#123;        throw new UnsupportedOperationException(&quot;不支持的方法!&quot;);    &#125;    &#x2F;&#x2F; 批量删除（自定义批次大小 + 填充）    default boolean removeBatchByIds(Collection&lt;?&gt; list, int batchSize, boolean useFill) &#123;        throw new UnsupportedOperationException(&quot;不支持的方法!&quot;);    &#125;    &#x2F;&#x2F; 根据主键更新记录    default boolean updateById(T entity) &#123;        return SqlHelper.retBool(this.getBaseMapper().updateById(entity));    &#125;    &#x2F;&#x2F; 使用 Wrapper 条件更新，entity 传 null    default boolean update(Wrapper&lt;T&gt; updateWrapper) &#123;        return this.update((Object)null, updateWrapper);    &#125;    &#x2F;&#x2F; 条件更新：Wrapper 指定条件，entity 提供更新值    default boolean update(T entity, Wrapper&lt;T&gt; updateWrapper) &#123;        return SqlHelper.retBool(this.getBaseMapper().update(entity, updateWrapper));    &#125;    &#x2F;&#x2F; 批量更新（默认批次大小）    @Transactional(rollbackFor &#x3D; &#123;Exception.class&#125;)    default boolean updateBatchById(Collection&lt;T&gt; entityList) &#123;        return this.updateBatchById(entityList, 1000);    &#125;    &#x2F;&#x2F; 批量更新（自定义批次大小）    boolean updateBatchById(Collection&lt;T&gt; entityList, int batchSize);    &#x2F;&#x2F; 保存或更新单条记录，传入id为更新，不传id为保存    boolean saveOrUpdate(T entity);    &#x2F;&#x2F; 根据主键查询记录    default T getById(Serializable id) &#123;        return (T)this.getBaseMapper().selectById(id);    &#125;    &#x2F;&#x2F; 根据主键集合批量查询    default List&lt;T&gt; listByIds(Collection&lt;? extends Serializable&gt; idList) &#123;        return this.getBaseMapper().selectBatchIds(idList);    &#125;    &#x2F;&#x2F; 根据字段 map 查询    default List&lt;T&gt; listByMap(Map&lt;String, Object&gt; columnMap) &#123;        return this.getBaseMapper().selectByMap(columnMap);    &#125;    &#x2F;&#x2F; 查询一条记录（默认允许为空）    default T getOne(Wrapper&lt;T&gt; queryWrapper) &#123;        return (T)this.getOne(queryWrapper, true);    &#125;    &#x2F;&#x2F; 查询一条记录，是否抛异常由参数控制    T getOne(Wrapper&lt;T&gt; queryWrapper, boolean throwEx);    &#x2F;&#x2F; 查询一条记录并返回 Map    Map&lt;String, Object&gt; getMap(Wrapper&lt;T&gt; queryWrapper);    &#x2F;&#x2F; 查询一条记录并通过 mapper 转换返回值    &lt;V&gt; V getObj(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper);    &#x2F;&#x2F; 查询总记录数    default long count() &#123;        return this.count(Wrappers.emptyWrapper());    &#125;    &#x2F;&#x2F; 条件查询总数    default long count(Wrapper&lt;T&gt; queryWrapper) &#123;        return SqlHelper.retCount(this.getBaseMapper().selectCount(queryWrapper));    &#125;    &#x2F;&#x2F; 条件查询列表    default List&lt;T&gt; list(Wrapper&lt;T&gt; queryWrapper) &#123;        return this.getBaseMapper().selectList(queryWrapper);    &#125;    &#x2F;&#x2F; 查询所有记录    default List&lt;T&gt; list() &#123;        return this.list(Wrappers.emptyWrapper());    &#125;    &#x2F;&#x2F; 分页 + 条件查询    default &lt;E extends IPage&lt;T&gt;&gt; E page(E page, Wrapper&lt;T&gt; queryWrapper) &#123;        return (E)this.getBaseMapper().selectPage(page, queryWrapper);    &#125;    &#x2F;&#x2F; 简单分页查询    default &lt;E extends IPage&lt;T&gt;&gt; E page(E page) &#123;        return (E)this.page(page, Wrappers.emptyWrapper());    &#125;    &#x2F;&#x2F; 条件查询并返回 Map 列表    default List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper) &#123;        return this.getBaseMapper().selectMaps(queryWrapper);    &#125;    &#x2F;&#x2F; 查询所有并返回 Map 列表    default List&lt;Map&lt;String, Object&gt;&gt; listMaps() &#123;        return this.listMaps(Wrappers.emptyWrapper());    &#125;    &#x2F;&#x2F; 查询所有对象    default List&lt;Object&gt; listObjs() &#123;        return this.listObjs(Function.identity());    &#125;    &#x2F;&#x2F; 查询所有对象并映射    default &lt;V&gt; List&lt;V&gt; listObjs(Function&lt;? super Object, V&gt; mapper) &#123;        return this.&lt;V&gt;listObjs(Wrappers.emptyWrapper(), mapper);    &#125;    &#x2F;&#x2F; 条件查询对象列表    default List&lt;Object&gt; listObjs(Wrapper&lt;T&gt; queryWrapper) &#123;        return this.&lt;Object&gt;listObjs(queryWrapper, Function.identity());    &#125;    &#x2F;&#x2F; 条件查询对象并映射    default &lt;V&gt; List&lt;V&gt; listObjs(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper) &#123;        return (List)this.getBaseMapper().selectObjs(queryWrapper).stream().filter(Objects::nonNull).map(mapper).collect(Collectors.toList());    &#125;    &#x2F;&#x2F; 分页查询并返回 Map 列表    default &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; E pageMaps(E page, Wrapper&lt;T&gt; queryWrapper) &#123;        return (E)this.getBaseMapper().selectMapsPage(page, queryWrapper);    &#125;    &#x2F;&#x2F; 分页 Map 查询（无条件）    default &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; E pageMaps(E page) &#123;        return (E)this.pageMaps(page, Wrappers.emptyWrapper());    &#125;    &#x2F;&#x2F; 获取底层 Mapper    BaseMapper&lt;T&gt; getBaseMapper();    &#x2F;&#x2F; 获取实体类的 Class 对象    Class&lt;T&gt; getEntityClass();    &#x2F;&#x2F; 返回 Query 链式封装器    default QueryChainWrapper&lt;T&gt; query() &#123;        return ChainWrappers.queryChain(this.getBaseMapper());    &#125;    &#x2F;&#x2F; 返回 LambdaQuery 链式封装器    default LambdaQueryChainWrapper&lt;T&gt; lambdaQuery() &#123;        return ChainWrappers.lambdaQueryChain(this.getBaseMapper(), this.getEntityClass());    &#125;    &#x2F;&#x2F; 返回 LambdaQuery 链式封装器，基于实体初始化    default LambdaQueryChainWrapper&lt;T&gt; lambdaQuery(T entity) &#123;        return ChainWrappers.lambdaQueryChain(this.getBaseMapper(), entity);    &#125;    &#x2F;&#x2F; Kotlin 风格查询封装器    default KtQueryChainWrapper&lt;T&gt; ktQuery() &#123;        return ChainWrappers.ktQueryChain(this.getBaseMapper(), this.getEntityClass());    &#125;    &#x2F;&#x2F; Kotlin 风格更新封装器    default KtUpdateChainWrapper&lt;T&gt; ktUpdate() &#123;        return ChainWrappers.ktUpdateChain(this.getBaseMapper(), this.getEntityClass());    &#125;    &#x2F;&#x2F; 普通链式更新封装器    default UpdateChainWrapper&lt;T&gt; update() &#123;        return ChainWrappers.updateChain(this.getBaseMapper());    &#125;    &#x2F;&#x2F; Lambda 链式更新封装器    default LambdaUpdateChainWrapper&lt;T&gt; lambdaUpdate() &#123;        return ChainWrappers.lambdaUpdateChain(this.getBaseMapper());    &#125;    &#x2F;&#x2F; 先尝试更新，不成功再插入    default boolean saveOrUpdate(T entity, Wrapper&lt;T&gt; updateWrapper) &#123;        return this.update(entity, updateWrapper) || this.saveOrUpdate(entity);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-gt-创建Service接口和实现类"><a href="#b-gt-创建Service接口和实现类" class="headerlink" title="b&gt;创建Service接口和实现类"></a>b&gt;创建Service接口和实现类</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * UserService继承IService模板提供的基础功能 *&#x2F;public interface UserService extends IService&lt;User&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * ServiceImpl实现了IService，提供了IService中基础功能的实现 * 若ServiceImpl无法满足业务需求，则可以使用自定的UserService定义方法，并在实现类中实现 *&#x2F;@Servicepublic class UserServiceImpl extends ServiceImpl&lt;UserMapper, User&gt; implementsUserService &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-gt-测试查询记录数"><a href="#c-gt-测试查询记录数" class="headerlink" title="c&gt;测试查询记录数"></a>c&gt;测试查询记录数</h5><pre class="line-numbers language-none"><code class="language-none">@Autowiredprivate UserService userService;@Testpublic void testGetCount()&#123;long count &#x3D; userService.count();System.out.println(&quot;总记录数：&quot; + count);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="d-gt-测试批量插入"><a href="#d-gt-测试批量插入" class="headerlink" title="d&gt;测试批量插入"></a>d&gt;测试批量插入</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testSaveBatch()&#123;&#x2F;&#x2F; SQL长度有限制，海量数据插入单条SQL无法实行，&#x2F;&#x2F; 因此MP将批量插入放在了通用Service中实现，而不是通用MapperArrayList&lt;User&gt; users &#x3D; new ArrayList&lt;&gt;();for (int i &#x3D; 0 ; i &lt; 5 ; i++) &#123;User user &#x3D; new User();user.setName(&quot;ybc&quot; + i);user.setAge( 20 + i);users.add(user);&#125;&#x2F;&#x2F;SQL:INSERT INTO t_user ( username, age ) VALUES ( ?,? )userService.saveBatch(users);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="e-gt-当前只做这两个方法作为样例"><a href="#e-gt-当前只做这两个方法作为样例" class="headerlink" title="e&gt;当前只做这两个方法作为样例"></a>e&gt;当前只做这两个方法作为样例</h5><p>​    <strong>具体的所有方法可以打开类的structure进行查看</strong></p><h3 id="四、Mybatis和MybatisPlus的混合开发"><a href="#四、Mybatis和MybatisPlus的混合开发" class="headerlink" title="四、Mybatis和MybatisPlus的混合开发"></a>四、Mybatis和MybatisPlus的混合开发</h3><h4 id="1、开发步骤"><a href="#1、开发步骤" class="headerlink" title="1、开发步骤"></a>1、开发步骤</h4><p>​    1.在application.yml中进行配置（这是默认配置可以省略）：<code>mybatis-plus.plus.mapper-location=classpath*:/mapper/**/*.xml</code></p><p>​    2.在resource目录创建mapper，然后再写mapper类的映射文件xxxx.xml(Mybatis)</p><p>​    3.找到开发目录mapper包，这个就是mybatisPlus的那个包，对要的那个类定义需要的接口</p><p>​    4.在xxxx.xml中配置该接口的sql</p><h4 id="2、项目结构图"><a href="#2、项目结构图" class="headerlink" title="2、项目结构图"></a>2、项目结构图</h4><p><a href="https://imgse.com/i/pEoRjZq"><img src="https://s21.ax1x.com/2025/04/25/pEoRjZq.png" alt="样例"></a></p><h3 id="五、MybatisPlus常用注解"><a href="#五、MybatisPlus常用注解" class="headerlink" title="五、MybatisPlus常用注解"></a>五、MybatisPlus常用注解</h3><h4 id="1-、-TableName"><a href="#1-、-TableName" class="headerlink" title="1 、@TableName"></a>1 、@TableName</h4><p>​    经过以上的测试，在使用MyBatis-Plus实现基本的CRUD时，我们并没有指定要操作的表，只是在Mapper接口继承BaseMapper时，设置了泛型User，而操作的表为user表</p><p>​    由此得出结论，MyBatis-Plus在确定操作的表时，由BaseMapper的泛型决定，即实体类型决定，且默认操作的表名和实体类型的类名一致</p><h5 id="a-gt-问题"><a href="#a-gt-问题" class="headerlink" title="a&gt;问题"></a>a&gt;问题</h5><p>​    若实体类类型的类名和要操作的表的表名不一致，会出现什么问题？</p><p>​    我们将表user更名为t_user，测试查询功能</p><p>​    程序抛出异常，Table ‘mybatis_plus.user’ doesn’t exist，因为现在的表名为t_user，而默认操作的表名和实体类型的类名一致，即user表</p><p><a href="https://imgse.com/i/pEomJ5d"><img src="https://s21.ax1x.com/2025/04/24/pEomJ5d.png" alt="异常"></a></p><h5 id="b-gt-TableName解决"><a href="#b-gt-TableName解决" class="headerlink" title="b&gt;@TableName解决"></a>b&gt;@TableName解决</h5><p>​    <code>@TableName</code>：写在实体类上，用于为实体类指定对应的数据库表名</p><p><a href="https://imgse.com/i/pEomN8I"><img src="https://s21.ax1x.com/2025/04/24/pEomN8I.png" alt="实体类"></a></p><h5 id="c-gt-通过全局配置解决问题"><a href="#c-gt-通过全局配置解决问题" class="headerlink" title="c&gt;通过全局配置解决问题"></a>c&gt;通过全局配置解决问题</h5><p>​    在开发的过程中，我们经常遇到以上的问题，即实体类所对应的表都有固定的前缀，例如<code>t_</code>或<code>tbl_</code></p><p>​    此时，可以使用MyBatis-Plus提供的全局配置，为实体类所对应的表名设置默认的前缀，那么就不需要在每个实体类上通过@TableName标识实体类对应的表</p><p>​    在SpringBoot的配置文件：application.yml中进行配置</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;application.ymlmybatis-plus: configuration: # 配置MyBatis日志 log-impl: org.apache.ibatis.logging.stdout.StdOutImplglobal-config: db-config:  # 配置MyBatis-Plus操作表的统一前缀  table-prefix: t_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-、-TableId"><a href="#2-、-TableId" class="headerlink" title="2 、@TableId"></a>2 、@TableId</h4><p>​    MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id</p><h5 id="a-gt-问题-1"><a href="#a-gt-问题-1" class="headerlink" title="a&gt;问题"></a>a&gt;问题</h5><p>​    若实体类和表中表示主键的不是id，而是其他字段，例如uid，MyBatis-Plus会自动识别uid为主键列吗？</p><p>​    我们实体类中的属性id改为uid，将表中的字段id也改为uid，测试添加功能</p><p>​    程序抛出异常，Field ‘uid’ doesn’t have a default value，说明MyBatis-Plus没有将uid作为主键</p><p><a href="https://imgse.com/i/pEomhrT"><img src="https://s21.ax1x.com/2025/04/24/pEomhrT.png" alt="异常"></a></p><h5 id="b-gt-TableId解决"><a href="#b-gt-TableId解决" class="headerlink" title="b&gt;@TableId解决"></a>b&gt;@TableId解决</h5><p>​    <code>@TableId</code>：写在实体类的属性上，告诉MybatisPlus标识该属性是对应的数据库字段的主键，并可指定主键自动生成策略（如自动增长、UUID等）</p><p><a href="https://imgse.com/i/pEou54J"><img src="https://s21.ax1x.com/2025/04/24/pEou54J.png" alt="实体类"></a></p><h5 id="c-gt-TableId里的value属性"><a href="#c-gt-TableId里的value属性" class="headerlink" title="c&gt;@TableId里的value属性"></a>c&gt;@TableId里的value属性</h5><p>​    value属性对应表中的字段名</p><h5 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h5><p>​    若实体类中主键对应的属性为id，而表中表示主键的字段为uid，此时若只在属性id上添加注解@TableId，则抛出异常Unknown column ‘id’ in ‘field list’，即MyBatis-Plus仍然会将id作为表的主键操作，而表中表示主键的是字段uid</p><p>​    此时需要通过@TableId注解的value属性，指定表中的主键字段，@TableId(“uid”)或@TableId(value=”uid”)</p><p><a href="https://imgse.com/i/pEoujED"><img src="https://s21.ax1x.com/2025/04/24/pEoujED.png" alt="异常"></a></p><h5 id="d-gt-TableId的type属性"><a href="#d-gt-TableId的type属性" class="headerlink" title="d&gt;@TableId的type属性"></a>d&gt;@TableId的type属性</h5><p>​    type属性用来定义主键生成的策略</p><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><p>​    1.<code>@TableId(type = IdType.AUTO)</code> 是告诉 MyBatis-Plus 主键使用自增策略，<strong>但是否真的能自增，取决于数据库字段是否设置了 <code>AUTO_INCREMENT</code>，两者需配合使用</strong></p><p>​    2.如果在new实体时已经传递了id那么@TableId将会失效，以你new时的id值为参数存入数据库</p><h5 id="常用的主键策略："><a href="#常用的主键策略：" class="headerlink" title="常用的主键策略："></a>常用的主键策略：</h5><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><strong>IdType.ASSIGN_ID</strong>（默认）</td><td>基于雪花算法的策略生成数据id，与数据库id是否设置自增无关。</td></tr><tr><td><strong>IdType.AUTO</strong></td><td>使用数据库的自增策略，注意，该类型请确保数据库设置了id自增，否则无效。</td></tr></tbody></table><h5 id="配置全局主键策略："><a href="#配置全局主键策略：" class="headerlink" title="配置全局主键策略："></a>配置全局主键策略：</h5><pre class="line-numbers language-none"><code class="language-none">mybatis-plus: configuration:  # 配置MyBatis日志  log-impl: org.apache.ibatis.logging.stdout.StdOutImpl global-config:  db-config:   # 配置MyBatis-Plus操作表的默认前缀   table-prefix: t_   # 配置MyBatis-Plus的主键策略   id-type: auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="e-gt-雪花算法"><a href="#e-gt-雪花算法" class="headerlink" title="e&gt;雪花算法"></a>e&gt;雪花算法</h5><h6 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h6><p>​    需要选择合适的方案去应对数据规模的增长，以应对逐渐增长的访问压力和数据量</p><p>​    数据库的扩展方式主要包括：业务分库、主从复制，数据库分表</p><h6 id="数据库分表"><a href="#数据库分表" class="headerlink" title="数据库分表"></a>数据库分表</h6><p>​    将不同业务数据分散存储到不同的数据库服务器，能够支撑百万甚至千万用户规模的业务，但如果业务继续发展，同一业务的单表数据也会达到单台数据库服务器的处理瓶颈。例如，淘宝的几亿用户数据，如果全部存放在一台数据库服务器的一张表中，肯定是无法满足性能要求的，此时就需要对单表数据进行拆分。</p><p>单表数据拆分有两种方式：垂直分表和水平分表。示意图如下：</p><p><a href="https://imgse.com/i/pEouvUe"><img src="https://s21.ax1x.com/2025/04/24/pEouvUe.png" alt="pEouvUe.png"></a></p><h6 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h6><p>​    垂直分表适合将表中某些不常用且占了大量空间的列拆分出去。</p><p>​    例如，前面示意图中的 nickname 和 description 字段，假设我们是一个婚恋网站，用户在筛选其他用户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展示，一般不会在业务查询中用到。description 本身又比较长，因此我们可以将这两个字段独立到另外一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。</p><h6 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h6><p>​    水平分表适合表行数特别大的表，有的公司要求单表行数超过 5000 万就必须进行分表，这个数字可以作为参考，但并不是绝对标准，关键还是要看表的访问性能。对于一些比较复杂的表，可能超过 1000万就要分表了；而对于一些简单的表，即使存储数据超过 1 亿行，也可以不分表。但不管怎样，当看到表的数据量达到千万级别时，作为架构师就要警觉起来，因为这很可能是架构的性能瓶颈或者隐患。</p><p>​    水平分表相比垂直分表，会引入更多的复杂性，例如要求全局唯一的数据id该如何处理</p><h6 id="主键自增"><a href="#主键自增" class="headerlink" title="主键自增"></a>主键自增</h6><p>​    ①以最常见的用户 ID 为例，可以按照 1000000 的范围大小进行分段，1 ~ 999999 放到表 1 中，1000000 ~ 1999999 放到表 2 中，以此类推。</p><p>​    ②复杂点：分段大小的选取。分段太小会导致切分后子表数量过多，增加维护复杂度；分段太大可能会导致单表依然存在性能问题，一般建议分段大小在 100 万至 2000 万之间，具体需要根据业务选取合适的分段大小。</p><p>​    ③优点：可以随着数据的增加平滑地扩充新的表。例如，现在的用户是 100 万，如果增加到 1000 万，只需要增加新的表就可以了，原有的数据不需要动。</p><p>​    ④缺点：分布不均匀。假如按照 1000 万来进行分表，有可能某个分段实际存储的数据量只有 1 条，而另外一个分段实际存储的数据量有 1000 万条。</p><h6 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h6><p>​    ①同样以用户 ID 为例，假如我们一开始就规划了 10 个数据库表，可以简单地用 user_id % 10 的值来表示数据所属的数据库表编号，ID 为 985 的用户放到编号为 5 的子表中，ID 为 10086 的用户放到编号为 6 的子表中。</p><p>​    ②复杂点：初始表数量的确定。表数量太多维护比较麻烦，表数量太少又可能导致单表性能存在问题。</p><p>​    ③优点：表分布比较均匀。</p><p>​    ④缺点：扩充新的表很麻烦，所有数据都要重分布。</p><h6 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h6><p>​    雪花算法是由Twitter公布的分布式主键生成算法，它能够保证不同表的主键的不重复性，以及相同表的主键的有序性。</p><p>①核心思想：</p><p>​    长度共64bit（一个long型）。</p><p>​    首先是一个符号位，1bit标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是 0 ，负数是 1 ，所以id一般是正数，最高位是 0 。</p><p>​    41bit时间截(毫秒级)，存储的是时间截的差值（当前时间截 - 开始时间截)，结果约等于69.73年。</p><p>​    10bit作为机器的ID（ 5 个bit是数据中心， 5 个bit的机器ID，可以部署在 1024 个节点）。</p><p>​    12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID）。</p><p><a href="https://imgse.com/i/pEoKSCd"><img src="https://s21.ax1x.com/2025/04/24/pEoKSCd.png" alt="pEoKSCd.png"></a></p><p>②优点：整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞，并且效率较高。</p><h4 id="3-、-TableField"><a href="#3-、-TableField" class="headerlink" title="3 、@TableField"></a>3 、@TableField</h4><p>​    @TableField：写在类的字段上，用于设置除主键以外字段其对应数据库表字段名（设置时要与数据库中字段一模一样，不要被情况1误导）</p><p>​    经过以上的测试，我们可以发现，MyBatis-Plus在执行SQL语句时，要保证实体类中的属性名和表中的字段名一致</p><p>​    如果实体类中的属性名和字段名不一致的情况，会出现什么问题呢？</p><h5 id="a-gt-情况-1"><a href="#a-gt-情况-1" class="headerlink" title="a&gt;情况 1"></a>a&gt;情况 1</h5><p>​    若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格</p><p>​    例如实体类属性userName，表中字段user_name</p><p>​    此时MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格</p><p>​    相当于在MyBatis中配置</p><h5 id="b-gt-情况-2"><a href="#b-gt-情况-2" class="headerlink" title="b&gt;情况 2"></a>b&gt;情况 2</h5><p>​    若实体类中的属性和表中的字段不满足情况 1</p><p>​    例如实体类属性name，表中字段username</p><p>​    此时需要在实体类属性上使用<code>@TableField(&quot;username&quot;)</code>设置属性所对应的字段名</p><p><a href="https://imgse.com/i/pEoKCvt"><img src="https://s21.ax1x.com/2025/04/24/pEoKCvt.png" alt="实体类"></a></p><h4 id="4-、-TableLogic"><a href="#4-、-TableLogic" class="headerlink" title="4 、@TableLogic"></a>4 、@TableLogic</h4><h5 id="a-gt-逻辑删除"><a href="#a-gt-逻辑删除" class="headerlink" title="a&gt;逻辑删除"></a>a&gt;逻辑删除</h5><ul><li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</li><li>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</li><li>使用场景：可以进行数据恢复</li></ul><h5 id="b-gt-实现逻辑删除"><a href="#b-gt-实现逻辑删除" class="headerlink" title="b&gt;实现逻辑删除"></a>b&gt;实现逻辑删除</h5><p>step1： 数据库中创建逻辑删除状态列，需要给<code>设置默认值为 0</code>，不然插入数据后该字段为null则无法查询出该数据</p><p><a href="https://imgse.com/i/pEoKEVS"><img src="https://s21.ax1x.com/2025/04/24/pEoKEVS.png" alt="步骤1"></a></p><p>step2： 实体类中添加逻辑删除属性</p><p><a href="https://imgse.com/i/pEoKZ5Q"><img src="https://s21.ax1x.com/2025/04/24/pEoKZ5Q.png" alt="实体类"></a></p><p>step3： 测试</p><p>​    在Service层测试删除功能，但真正执行的是修改</p><p>​    UPDATE t_user SET is_deleted=1 WHERE id=? AND is_deleted=0</p><p>​    在Service层测试查询功能，被逻辑删除的数据默认不会被查询</p><p>​    SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0</p><h5 id="注意事项1：关于逻辑删除是否需要配置（被逻辑删除的字段不会被查询）"><a href="#注意事项1：关于逻辑删除是否需要配置（被逻辑删除的字段不会被查询）" class="headerlink" title="注意事项1：关于逻辑删除是否需要配置（被逻辑删除的字段不会被查询）"></a>注意事项1：关于逻辑删除是否需要配置（被逻辑删除的字段不会被查询）</h5><p>MybatisPlus 3.3.x 及以下版本</p><ul><li>默认支持逻辑删除，不需要在 <code>application.yml</code> 配置</li><li>固定：未删除为0，已删除为1，使用 <code>@TableLogic</code> 注解生效</li><li>不支持自定义</li></ul><p>MybatisPlus 3.4.x 及以上版本</p><ul><li><p>官方推荐在 <code>application.yml</code> 中显式配置逻辑删除的取值（非强制）</p></li><li><p>只要你字段值是 0/1且字段上加了 <code>@TableLogic</code>不配置yml也能用，但要自定义删除标识的值，就必须配置，否则无效</p></li><li><p>application.yml配置结构</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;application.ymlmybatis-plus:  global-config:    db-config:      logic-delete-field: 要识别的字段名(Java) # 全局逻辑删除的实体字段名(配置后可以不配置@TableLogic注解)，这句非必须      logic-delete-value: 1 # 逻辑已删除值(默认为 1)      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="注意事项2"><a href="#注意事项2" class="headerlink" title="注意事项2"></a>注意事项2</h5><p>​    逻辑删除功能只对Mybatis-Plus自动注入的sql（mybatisPlus提供的API）起效，也就是说，对于手动在<code>Mapper.xml</code>文件配置的sql不会生效，需要单独考虑</p><h3 id="六、条件构造器和常用接口"><a href="#六、条件构造器和常用接口" class="headerlink" title="六、条件构造器和常用接口"></a>六、条件构造器和常用接口</h3><h4 id="1-、wapper介绍"><a href="#1-、wapper介绍" class="headerlink" title="1 、wapper介绍"></a>1 、wapper介绍</h4><p><a href="https://imgse.com/i/pEoKn8s"><img src="https://s21.ax1x.com/2025/04/24/pEoKn8s.png" alt="wappper"></a></p><ul><li>Wrapper ： 条件构造抽象类，最顶端父类<ul><li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<ul><li>QueryWrapper ： 查询条件封装</li><li>UpdateWrapper ： Update 条件封装</li><li>AbstractLambdaWrapper ： 使用Lambda 语法<ul><li>LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper</li><li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li></ul></li></ul></li></ul></li></ul><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><table><thead><tr><th>操作</th><th>方法</th><th>是否用 Wrapper</th><th>使用的 Wrapper 类型</th><th>常用写法示例</th><th>说明</th></tr></thead><tbody><tr><td><strong>新增</strong></td><td><code>insert()</code></td><td>❌ 不使用</td><td>无</td><td><code>userMapper.insert(user)</code></td><td>通过实体类插入数据</td></tr><tr><td><strong>查询</strong></td><td><code>selectList() selectOne() selectCount()</code> 等</td><td>✅ 是</td><td><code>QueryWrapper</code> / <code>LambdaQueryWrapper</code></td><td><code>queryWrapper.eq(&quot;age&quot;, 20)</code></td><td>用来构造 <code>WHERE</code> 条件</td></tr><tr><td><strong>更新</strong></td><td><code>update(entity, wrapper)</code></td><td>✅ 是</td><td>✅推荐用：<code>UpdateWrapper</code> / <code>LambdaUpdateWrapper</code>⚠也可用：<code>QueryWrapper</code></td><td><code>updateWrapper.eq(&quot;id&quot;, 1).set(&quot;name&quot;, &quot;张三&quot;) userMapper.update(null, updateWrapper)</code></td><td>如果用实体做更新值，要用 <code>QueryWrapper</code>；如果用 <code>.set()</code> 更新字段，建议用 <code>UpdateWrapper</code></td></tr><tr><td><strong>删除</strong></td><td><code>delete(wrapper)</code></td><td>✅ 是</td><td><code>QueryWrapper</code> / <code>LambdaQueryWrapper</code></td><td><code>queryWrapper.eq(&quot;status&quot;, &quot;inactive&quot;)</code></td><td>删除操作只需要条件，用查询型 Wrapper 即可</td></tr></tbody></table><h4 id="2-、QueryWrapper"><a href="#2-、QueryWrapper" class="headerlink" title="2 、QueryWrapper"></a>2 、QueryWrapper</h4><p>​    <code>queryWrapper.xxx()</code> 系列方法不返回“值”，因为它们通过链式调用不断累加 SQL 条件，返回的是构建器自身（this），而非最终结果。另外<code>Wrapper</code> 的链式调用<strong>不是必须连续一条链写到底</strong>，完全可以分开写，只要作用在同一个 <code>Wrapper</code> 对象上即可</p><h5 id="a-gt-例-1-：组装查询条件"><a href="#a-gt-例-1-：组装查询条件" class="headerlink" title="a&gt;例 1 ：组装查询条件"></a>a&gt;例 1 ：组装查询条件</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test01()&#123;&#x2F;&#x2F;查询用户名包含a，年龄在 20 到 30 之间，并且邮箱不为null的用户信息&#x2F;&#x2F;SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (username LIKE? AND age BETWEEN? AND? AND email IS NOT NULL)QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();queryWrapper.like(&quot;username&quot;, &quot;a&quot;).between(&quot;age&quot;, 20 , 30 ).isNotNull(&quot;email&quot;);List&lt;User&gt; list &#x3D; userMapper.selectList(queryWrapper);list.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-gt-例-2-：组装排序条件"><a href="#b-gt-例-2-：组装排序条件" class="headerlink" title="b&gt;例 2 ：组装排序条件"></a>b&gt;例 2 ：组装排序条件</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test02()&#123;&#x2F;&#x2F;按年龄降序查询用户，如果年龄相同则按id升序排列&#x2F;&#x2F;SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 ORDER BY age DESC,id ASCQueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();queryWrapper.orderByDesc(&quot;age&quot;).orderByAsc(&quot;id&quot;);List&lt;User&gt; users &#x3D; userMapper.selectList(queryWrapper);users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-gt-例-3-：组装删除条件"><a href="#c-gt-例-3-：组装删除条件" class="headerlink" title="c&gt;例 3 ：组装删除条件"></a>c&gt;例 3 ：组装删除条件</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test03()&#123;&#x2F;&#x2F;删除email为空的用户&#x2F;&#x2F;DELETE FROM t_user WHERE (email IS NULL)QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();queryWrapper.isNull(&quot;email&quot;);&#x2F;&#x2F;条件构造器也可以构建删除语句的条件int result &#x3D; userMapper.delete(queryWrapper);System.out.println(&quot;受影响的行数：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="d-gt-例-4-：使用QueryWrapper实现修改功能"><a href="#d-gt-例-4-：使用QueryWrapper实现修改功能" class="headerlink" title="d&gt;例 4 ：使用QueryWrapper实现修改功能"></a>d&gt;例 4 ：使用QueryWrapper实现修改功能</h5><p>​    需要传递两个参数，1.要修改的实体的内容，2. 满足什么条件就进行修改</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test04() &#123;QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();&#x2F;&#x2F;将（年龄大于 20 并且用户名中包含有a）或邮箱为null的用户信息修改&#x2F;&#x2F;UPDATE t_user SET age&#x3D;?, email&#x3D;? WHERE (username LIKE? AND age &gt;? OR email IS NULL)queryWrapper.like(&quot;username&quot;, &quot;a&quot;).gt(&quot;age&quot;, 20 ).or().isNull(&quot;email&quot;);&#x2F;&#x2F;在实体类中设置要修改的属性值User user &#x3D; new User();user.setAge( 18 );user.setEmail(&quot;user@atguigu.com&quot;);int result &#x3D; userMapper.update(user, queryWrapper);System.out.println(&quot;受影响的行数：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="条件优先级（指执行顺序）更改后的实现"><a href="#条件优先级（指执行顺序）更改后的实现" class="headerlink" title="条件优先级（指执行顺序）更改后的实现"></a>条件优先级（指执行顺序）更改后的实现</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test04() &#123;QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();&#x2F;&#x2F;将用户名中包含有a并且（年龄大于 20 或邮箱为null）的用户信息修改&#x2F;&#x2F;UPDATE t_user SET age&#x3D;?, email&#x3D;? WHERE (username LIKE? AND (age &gt;? OR email IS NULL))&#x2F;&#x2F;lambda表达式内的逻辑优先运算queryWrapper.like(&quot;username&quot;, &quot;a&quot;)&#x2F;&#x2F;i表示条件构造器.and(i -&gt; i.gt(&quot;age&quot;, 20 ).or().isNull(&quot;email&quot;));User user &#x3D; new User();user.setAge( 18 );user.setEmail(&quot;user@atguigu.com&quot;);int result &#x3D; userMapper.update(user, queryWrapper);System.out.println(&quot;受影响的行数：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="e-gt-例-5-：组装select子句：只显示表头的几个需要的字段"><a href="#e-gt-例-5-：组装select子句：只显示表头的几个需要的字段" class="headerlink" title="e&gt;例 5 ：组装select子句：只显示表头的几个需要的字段"></a>e&gt;例 5 ：组装select子句：只显示表头的几个需要的字段</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test05() &#123;&#x2F;&#x2F;查询用户信息的username和age字段&#x2F;&#x2F;SELECT username,age FROM t_userQueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();queryWrapper.select(&quot;username&quot;, &quot;age&quot;);&#x2F;&#x2F;selectMaps()返回Map集合列表，通常配合select()使用，避免User对象中没有被查询到的列值为nullList&lt;Map&lt;String, Object&gt;&gt; maps &#x3D; userMapper.selectMaps(queryWrapper);maps.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="f-gt-例-6-：实现子查询"><a href="#f-gt-例-6-：实现子查询" class="headerlink" title="f&gt;例 6 ：实现子查询"></a>f&gt;例 6 ：实现子查询</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test06() &#123;&#x2F;&#x2F;查询id小于等于 3 的用户信息&#x2F;&#x2F;SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE (id IN (select id from t_user where id &lt;&#x3D; 3))QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();queryWrapper.inSql(&quot;id&quot;, &quot;select id from t_user where id &lt;&#x3D; 3&quot;);List&lt;User&gt; list &#x3D; userMapper.selectList(queryWrapper);list.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-、UpdateWrapper"><a href="#3-、UpdateWrapper" class="headerlink" title="3 、UpdateWrapper"></a>3 、UpdateWrapper</h4><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test07() &#123;&#x2F;&#x2F;将（年龄大于 20 或邮箱为null）并且用户名中包含有a的用户信息修改&#x2F;&#x2F;组装set子句以及修改条件UpdateWrapper&lt;User&gt; updateWrapper &#x3D; new UpdateWrapper&lt;&gt;();&#x2F;&#x2F;lambda表达式内的逻辑优先运算updateWrapper.set(&quot;age&quot;, 18 ).set(&quot;email&quot;, &quot;user@atguigu.com&quot;).like(&quot;username&quot;, &quot;a&quot;).and(i -&gt; i.gt(&quot;age&quot;, 20 ).or().isNull(&quot;email&quot;));&#x2F;&#x2F;这里必须要创建User对象，否则无法应用自动填充。如果没有自动填充，可以设置为null&#x2F;&#x2F;UPDATE t_user SET username&#x3D;?, age&#x3D;?,email&#x3D;? WHERE (username LIKE? AND(age &gt;? OR email IS NULL))&#x2F;&#x2F;User user &#x3D; new User();&#x2F;&#x2F;user.setName(&quot;张三&quot;);&#x2F;&#x2F;int result &#x3D; userMapper.update(user, updateWrapper);&#x2F;&#x2F;UPDATE t_user SET age&#x3D;?,email&#x3D;? WHERE (username LIKE? AND (age &gt;? ORemail IS NULL))&#x2F;&#x2F;这里不需要实体类对象，所以是nullint result &#x3D; userMapper.update(null, updateWrapper);System.out.println(result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-、模拟开发中条件的组装情况"><a href="#4-、模拟开发中条件的组装情况" class="headerlink" title="4 、模拟开发中条件的组装情况"></a>4 、模拟开发中条件的组装情况</h4><p>​    在真正开发的过程中，组装条件是常见的功能，而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p><h5 id="思路一：使用if判断"><a href="#思路一：使用if判断" class="headerlink" title="思路一：使用if判断"></a>思路一：使用if判断</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test08() &#123;&#x2F;&#x2F;定义查询条件，有可能为null（用户未输入或未选择）String username &#x3D; null;Integer ageBegin &#x3D; 10 ;Integer ageEnd &#x3D; 24 ;QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();&#x2F;&#x2F;StringUtils.isNotBlank()判断某字符串是否不为空且长度不为 0 且不由空白符(whitespace)构成if(StringUtils.isNotBlank(username))&#123;queryWrapper.like(&quot;username&quot;,&quot;a&quot;);&#125;if(ageBegin !&#x3D; null)&#123;queryWrapper.ge(&quot;age&quot;, ageBegin);&#125;if(ageEnd !&#x3D; null)&#123;queryWrapper.le(&quot;age&quot;, ageEnd);&#125;&#x2F;&#x2F;SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE (age &gt;&#x3D; ? AND age &lt;&#x3D; ?)List&lt;User&gt; users &#x3D; userMapper.selectList(queryWrapper);users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="思路二：使用condition，其是方法里的参数"><a href="#思路二：使用condition，其是方法里的参数" class="headerlink" title="思路二：使用condition，其是方法里的参数"></a>思路二：使用condition，其是方法里的参数</h5><p>​    上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test08UseCondition() &#123;&#x2F;&#x2F;定义查询条件，有可能为null（用户未输入或未选择）String username &#x3D; null;Integer ageBegin &#x3D; 10 ;Integer ageEnd &#x3D; 24 ;QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();&#x2F;&#x2F;StringUtils.isNotBlank()判断某字符串是否不为空且长度不为 0 且不由空白符(whitespace)构成queryWrapper.like(StringUtils.isNotBlank(username), &quot;username&quot;, &quot;a&quot;).ge(ageBegin !&#x3D; null, &quot;age&quot;, ageBegin).le(ageEnd !&#x3D; null, &quot;age&quot;, ageEnd);&#x2F;&#x2F;SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE (age &gt;&#x3D; ? AND age &lt;&#x3D; ?)List&lt;User&gt; users &#x3D; userMapper.selectList(queryWrapper);users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-、LambdaQueryWrapper"><a href="#5-、LambdaQueryWrapper" class="headerlink" title="5 、LambdaQueryWrapper"></a>5 、LambdaQueryWrapper</h4><p>​    使用其可以防止写数据库字名时写错的可能，用的是实体类中某属性，而不是写数据库列名</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test09() &#123;&#x2F;&#x2F;定义查询条件，有可能为null（用户未输入）String username &#x3D; &quot;a&quot;;Integer ageBegin &#x3D; 10 ;Integer ageEnd &#x3D; 24 ;LambdaQueryWrapper&lt;User&gt; queryWrapper &#x3D; new LambdaQueryWrapper&lt;&gt;();&#x2F;&#x2F;避免使用字符串表示字段，防止运行时错误queryWrapper.like(StringUtils.isNotBlank(username), User::getName, username).ge(ageBegin !&#x3D; null, User::getAge, ageBegin).le(ageEnd !&#x3D; null, User::getAge, ageEnd);List&lt;User&gt; users &#x3D; userMapper.selectList(queryWrapper);users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-、LambdaUpdateWrapper"><a href="#6-、LambdaUpdateWrapper" class="headerlink" title="6 、LambdaUpdateWrapper"></a>6 、LambdaUpdateWrapper</h4><p>​    使用其可以防止写数据库列名时写错的可能</p><pre class="line-numbers language-none"><code class="language-none">@Testpublic void test10() &#123;&#x2F;&#x2F;组装set子句LambdaUpdateWrapper&lt;User&gt; updateWrapper &#x3D; new LambdaUpdateWrapper&lt;&gt;();updateWrapper.set(User::getAge, 18 ).set(User::getEmail, &quot;user@atguigu.com&quot;).like(User::getName, &quot;a&quot;).and(i -&gt; i.lt(User::getAge, 24 ).or().isNull(User::getEmail));&#x2F;&#x2F;lambda表达式内的逻辑优先运算User user &#x3D; new User();int result &#x3D; userMapper.update(user, updateWrapper);System.out.println(&quot;受影响的行数：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7、区别"><a href="#7、区别" class="headerlink" title="7、区别"></a>7、区别</h4><p>​    只写Query，update同理</p><table><thead><tr><th>Wrapper 类型</th><th>字段写法</th><th>容错性</th></tr></thead><tbody><tr><td><code>QueryWrapper</code></td><td>字段名用 <strong>字符串</strong> 表示</td><td><strong>不安全，易写错</strong></td></tr><tr><td><code>LambdaQueryWrapper</code></td><td>字段名用 <strong>lambda 表达式</strong></td><td><strong>安全，支持重构检查</strong></td></tr></tbody></table><p>​    </p><h5 id="区别的样例"><a href="#区别的样例" class="headerlink" title="区别的样例"></a>区别的样例</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; QueryWrapper（字段名写错编译不报错，运行才出问题）queryWrapper.like(&quot;username&quot;, &quot;Tom&quot;);&#x2F;&#x2F; LambdaQueryWrapper（字段名通过 getter 方法引用，类型安全）lambdaQueryWrapper.like(User::getUsername, &quot;Tom&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、插件-以实现分页查询"><a href="#七、插件-以实现分页查询" class="headerlink" title="七、插件-以实现分页查询"></a>七、插件-以实现分页查询</h3><h4 id="1-、分页插件"><a href="#1-、分页插件" class="headerlink" title="1 、分页插件"></a>1 、分页插件</h4><p>​    MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p><h5 id="核心步骤"><a href="#核心步骤" class="headerlink" title="核心步骤"></a>核心步骤</h5><p>​    1.定义page，page&lt;要分页的类名&gt; page = new page()</p><p>​    2.使用service层或mapper层的方法执行page，当多参数时使用@Param注解</p><p>​    注意：page可以在service层定义，然后mapper层调用</p><h5 id="分页插件的使用的区别"><a href="#分页插件的使用的区别" class="headerlink" title="分页插件的使用的区别"></a>分页插件的使用的区别</h5><table><thead><tr><th>使用位置</th><th>使用方式</th><th>场景适用</th><th>是否需要自定义 SQL</th></tr></thead><tbody><tr><td>Mapper 层</td><td><code>selectPage(page, wrapper)</code> 或 自定义 SQL</td><td>复杂查询、自定义分页</td><td>需要时写 XML</td></tr><tr><td>Service 层</td><td><code>page(page, wrapper)</code></td><td>简单分页、业务调用更高层封装</td><td>否（适用于标准分页）</td></tr></tbody></table><p>​    注意：Mybatis Plus的<code>BaseMapper</code>和<code>ServiceImpl</code>均提供了常用的分页查询的方法，例如：</p><ul><li><p><code>BaseMapper</code>的分页查询：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>ServiceImpl</code>的分页查询：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 无条件分页查询</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> page<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 条件分页查询</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="a-gt-添加配置类"><a href="#a-gt-添加配置类" class="headerlink" title="a&gt;添加配置类"></a>a&gt;添加配置类</h5><pre class="line-numbers language-none"><code class="language-none">@Configuration@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)  &#x2F;&#x2F;可以将主类中的注解移到此处，这个是扫描MybatisPlus注解的注解public class MybatisPlusConfig &#123;@Beanpublic MybatisPlusInterceptor mybatisPlusInterceptor() &#123;MybatisPlusInterceptor interceptor &#x3D; new MybatisPlusInterceptor();&#x2F;&#x2F;添加内部插件，DBType为设置数据库类型interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));return interceptor;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-gt-测试类"><a href="#b-gt-测试类" class="headerlink" title="b&gt;测试类"></a>b&gt;测试类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//设置分页参数，初始页码1，每页显示条数5</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进行查询，第二个参数是条件构造器，需要加条件用queryWrapper或lambdaQueryWrapper加</span>userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取分页数据</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前页："</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每页显示的条数："</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总记录数："</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总页数："</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有上一页："</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否有下一页："</span><span class="token operator">+</span>page<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h5><p>​    User(id=1, name=Jone, age=18, email= <a href="mailto:&#x74;&#101;&#x73;&#x74;&#x31;&#64;&#98;&#x61;&#x6f;&#109;&#105;&#x64;&#x6f;&#x75;&#x2e;&#99;&#x6f;&#x6d;">&#x74;&#101;&#x73;&#x74;&#x31;&#64;&#98;&#x61;&#x6f;&#109;&#105;&#x64;&#x6f;&#x75;&#x2e;&#99;&#x6f;&#x6d;</a>, isDeleted=0) </p><p>​    User(id=2, name=Jack, age=20, email= <a href="mailto:&#x74;&#x65;&#115;&#116;&#50;&#x40;&#98;&#97;&#x6f;&#109;&#105;&#x64;&#x6f;&#117;&#46;&#x63;&#x6f;&#109;">&#x74;&#x65;&#115;&#116;&#50;&#x40;&#98;&#97;&#x6f;&#109;&#105;&#x64;&#x6f;&#117;&#46;&#x63;&#x6f;&#109;</a>, isDeleted=0) </p><p>​    User(id=3, name=Tom, age=28, email= <a href="mailto:&#116;&#101;&#x73;&#x74;&#51;&#64;&#x62;&#x61;&#x6f;&#x6d;&#x69;&#100;&#x6f;&#117;&#46;&#99;&#x6f;&#109;">&#116;&#101;&#x73;&#x74;&#51;&#64;&#x62;&#x61;&#x6f;&#x6d;&#x69;&#100;&#x6f;&#117;&#46;&#99;&#x6f;&#109;</a>, isDeleted=0) </p><p>​    User(id=4, name=Sandy, age=21, email= <a href="mailto:&#116;&#101;&#x73;&#116;&#52;&#64;&#98;&#x61;&#111;&#109;&#x69;&#100;&#x6f;&#117;&#x2e;&#x63;&#111;&#x6d;">&#116;&#101;&#x73;&#116;&#52;&#64;&#98;&#x61;&#111;&#109;&#x69;&#100;&#x6f;&#117;&#x2e;&#x63;&#111;&#x6d;</a>, isDeleted=0) </p><p>​    User(id=5, name=Billie, age=24, email= test5@ba omidou.com, isDeleted=0) </p><p>​    当前页：1 每页显示的条数：5 总记录数：17 总页数：4 是否有上一 页：false 是否有下一页：true</p><h4 id="2-、xml自定义分页"><a href="#2-、xml自定义分页" class="headerlink" title="2 、xml自定义分页"></a>2 、xml自定义分页</h4><p>​    自定义分页，只需要在mapper层的方法，将page对象作为参数传，然后在xml中实现这个带page的方法，即可实现自定义分页</p><h5 id="a-gt-UserMapper中定义接口方法"><a href="#a-gt-UserMapper中定义接口方法" class="headerlink" title="a&gt;UserMapper中定义接口方法"></a>a&gt;UserMapper中定义接口方法</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * 根据年龄查询用户列表，分页显示 * @param page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位 * @param age 年龄 * @return*&#x2F;&#x2F;&#x2F;@Param是Mybatis的注解，在传输多参数是使用Page&lt;User&gt; selectPageVo(@Param(&quot;page&quot;) Page&lt;User&gt; page, @Param(&quot;age&quot;)Integer age);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-gt-UserMapper-xml中编写SQL"><a href="#b-gt-UserMapper-xml中编写SQL" class="headerlink" title="b&gt;UserMapper.xml中编写SQL"></a>b&gt;UserMapper.xml中编写SQL</h5><pre class="line-numbers language-none"><code class="language-none">&lt;!--IPage&lt;User&gt; selectPageVo(Page&lt;User&gt; page, Integer age);--&gt;&lt;select id&#x3D;&quot;selectPageVo&quot; resultType&#x3D;&quot;com.xxx.User&quot;&gt;SELECT id,username,age,email FROM t_user WHERE age # &#123;age&#125;&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意</strong>：<code>Mapper.xml</code>中的SQL只需实现查询<code>list</code>的逻辑即可，无需关注分页的逻辑</p><h5 id="c-gt-测试"><a href="#c-gt-测试" class="headerlink" title="c&gt;测试"></a>c&gt;测试</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testSelectPageVo()&#123;&#x2F;&#x2F;设置分页参数Page&lt;User&gt; page &#x3D; new Page&lt;&gt;( 1 , 5 );userMapper.selectPageVo(page, 20 );&#x2F;&#x2F;获取分页数据List&lt;User&gt; list &#x3D; page.getRecords();list.forEach(System.out::println);System.out.println(&quot;当前页：&quot;+page.getCurrent());System.out.println(&quot;每页显示的条数：&quot;+page.getSize());System.out.println(&quot;总记录数：&quot;+page.getTotal());System.out.println(&quot;总页数：&quot;+page.getPages());System.out.println(&quot;是否有上一页：&quot;+page.hasPrevious());System.out.println(&quot;是否有下一页：&quot;+page.hasNext());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h5><p>User(id=3, name=Tom, age=28, email= <a href="mailto:&#x74;&#101;&#x73;&#116;&#51;&#x40;&#x62;&#x61;&#x6f;&#x6d;&#x69;&#x64;&#x6f;&#x75;&#x2e;&#99;&#111;&#109;">&#x74;&#101;&#x73;&#116;&#51;&#x40;&#x62;&#x61;&#x6f;&#x6d;&#x69;&#x64;&#x6f;&#x75;&#x2e;&#99;&#111;&#109;</a>, isDeleted=null) </p><p>User(id=4, name=Sandy, age=21, email= <a href="mailto:&#x74;&#101;&#x73;&#x74;&#52;&#x40;&#x62;&#97;&#x6f;&#109;&#x69;&#100;&#x6f;&#117;&#x2e;&#99;&#x6f;&#x6d;">&#x74;&#101;&#x73;&#x74;&#52;&#x40;&#x62;&#97;&#x6f;&#109;&#x69;&#100;&#x6f;&#117;&#x2e;&#99;&#x6f;&#x6d;</a>, isDeleted=null) </p><p>User(id=5, name=Billie, age=24, email= <a href="mailto:&#x74;&#x65;&#x73;&#x74;&#53;&#x40;&#x62;&#97;&#x6f;&#x6d;&#105;&#100;&#x6f;&#x75;&#46;&#x63;&#x6f;&#x6d;">&#x74;&#x65;&#x73;&#x74;&#53;&#x40;&#x62;&#97;&#x6f;&#x6d;&#105;&#100;&#x6f;&#x75;&#46;&#x63;&#x6f;&#x6d;</a>, isDeleted=null) </p><p>User(id=8, name=ybc1, age=21, email=null, isDeleted=null) </p><p>User(id=9, name=ybc2, age=22, email=null, isDeleted=null) </p><p>当前 页：1 每页显示的条数：5 总记录数：12 总页数：3 是否有上一页：false 是否有下一页：true</p><h4 id="3-、乐观锁"><a href="#3-、乐观锁" class="headerlink" title="3 、乐观锁"></a>3 、乐观锁</h4><h5 id="a-gt-场景"><a href="#a-gt-场景" class="headerlink" title="a&gt;场景"></a>a&gt;场景</h5><p>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小 李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太 高，可能会影响销量。又通知小王，你把商品价格降低30元。 此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王 也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50=150元存入了数据 库；小王将商品减了30元，并将100-30=70元存入了数据库。是的，如果没有锁，小李的操作就 完全被小王的覆盖了。 现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1万多。</p><h5 id="b-gt-乐观锁与悲观锁"><a href="#b-gt-乐观锁与悲观锁" class="headerlink" title="b&gt;乐观锁与悲观锁"></a>b&gt;乐观锁与悲观锁</h5><p>上面的故事，如果是乐观锁，小王保存价格前，会检查下价格是否被人修改过了。如果被修改过 了，则重新取出的被修改后的价格，150元，这样他会将120元存入数据库。 如果是悲观锁，小李取出数据后，小王只能等小李操作完之后，才能对价格进行操作，也会保证 最终的价格是120元。</p><h5 id="c-gt-模拟修改冲突"><a href="#c-gt-模拟修改冲突" class="headerlink" title="c&gt;模拟修改冲突"></a>c&gt;模拟修改冲突</h5><h6 id="数据库中增加商品表"><a href="#数据库中增加商品表" class="headerlink" title="数据库中增加商品表"></a>数据库中增加商品表</h6><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE t_product(id BIGINT( 20 ) NOT NULL COMMENT &#39;主键ID&#39;,NAME VARCHAR( 30 ) NULL DEFAULT NULL COMMENT &#39;商品名称&#39;,price INT( 11 ) DEFAULT 0 COMMENT &#39;价格&#39;,VERSION INT( 11 ) DEFAULT 0 COMMENT &#39;乐观锁版本号&#39;,PRIMARY KEY (id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h6><pre class="line-numbers language-none"><code class="language-none">INSERT INTO t_product (id, NAME, price) VALUES ( 1 , &#39;外星人笔记本&#39;, 100 );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="添加实体"><a href="#添加实体" class="headerlink" title="添加实体"></a>添加实体</h6><pre class="line-numbers language-none"><code class="language-none">package com.atguigu.mybatisplus.entity;import lombok.Data;@Datapublic class Product &#123;private Long id;private String name;private Integer price;private Integer version;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="添加mapper"><a href="#添加mapper" class="headerlink" title="添加mapper"></a>添加mapper</h6><pre class="line-numbers language-none"><code class="language-none">public interface ProductMapper extends BaseMapper&lt;Product&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testConcurrentUpdate() &#123;&#x2F;&#x2F;1、小李Product p1 &#x3D; productMapper.selectById(1L);System.out.println(&quot;小李取出的价格：&quot; + p1.getPrice());&#x2F;&#x2F;2、小王Product p2 &#x3D; productMapper.selectById(1L);System.out.println(&quot;小王取出的价格：&quot; + p2.getPrice());&#x2F;&#x2F;3、小李将价格加了 50 元，存入了数据库p1.setPrice(p1.getPrice() + 50 );int result1 &#x3D; productMapper.updateById(p1);System.out.println(&quot;小李修改结果：&quot; + result1);&#x2F;&#x2F;4、小王将商品减了 30 元，存入了数据库p2.setPrice(p2.getPrice() - 30 );int result2 &#x3D; productMapper.updateById(p2);System.out.println(&quot;小王修改结果：&quot; + result2);&#x2F;&#x2F;最后的结果Product p3 &#x3D; productMapper.selectById(1L);&#x2F;&#x2F;价格覆盖，最后的结果： 70System.out.println(&quot;最后的结果：&quot; + p3.getPrice());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="d-gt-乐观锁实现流程"><a href="#d-gt-乐观锁实现流程" class="headerlink" title="d&gt;乐观锁实现流程"></a>d&gt;乐观锁实现流程</h5><p>​    数据库中添加version字段</p><p>​    取出记录时，获取当前version</p><pre class="line-numbers language-none"><code class="language-none">SELECT id,&#96;name&#96;,price,&#96;version&#96; FROM product WHERE id&#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    更新时，version + 1，如果where语句中的version版本不对，则更新失败</p><pre class="line-numbers language-none"><code class="language-none">UPDATE product SET price&#x3D;price+ 50 , &#96;version&#96;&#x3D;&#96;version&#96; + 1 WHERE id&#x3D; 1 AND&#96;version&#96;&#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="e-gt-Mybatis-Plus实现乐观锁"><a href="#e-gt-Mybatis-Plus实现乐观锁" class="headerlink" title="e&gt;Mybatis-Plus实现乐观锁"></a>e&gt;Mybatis-Plus实现乐观锁</h5><h6 id="修改实体类"><a href="#修改实体类" class="headerlink" title="修改实体类"></a>修改实体类</h6><pre class="line-numbers language-none"><code class="language-none">package com.atguigu.mybatisplus.entity;import com.baomidou.mybatisplus.annotation.Version;import lombok.Data;@Datapublic class Product &#123;private Long id;private String name;private Integer price;@Version &#x2F;&#x2F;用于标识乐观锁版本号字段private Integer version;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="添加乐观锁插件配置"><a href="#添加乐观锁插件配置" class="headerlink" title="添加乐观锁插件配置"></a>添加乐观锁插件配置</h6><pre class="line-numbers language-none"><code class="language-none">@Beanpublic MybatisPlusInterceptor mybatisPlusInterceptor()&#123;MybatisPlusInterceptor interceptor &#x3D; new MybatisPlusInterceptor();&#x2F;&#x2F;添加分页插件interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));&#x2F;&#x2F;添加乐观锁插件interceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor());return interceptor;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="测试修改冲突"><a href="#测试修改冲突" class="headerlink" title="测试修改冲突"></a>测试修改冲突</h6><p>小李查询商品信息： </p><p>SELECT id,name,price,version FROM t_product WHERE id=? </p><p>小王查询商品信息： </p><p>SELECT id,name,price,version FROM t_product WHERE id=? </p><p>小李修改商品价格，自动将version+1 </p><p>UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=? Parameters: 外星人笔记本(String), 150(Integer), 1(Integer), 1(Long), 0(Integer) </p><p>小王修改商品价格，此时version已更新，条件不成立，修改失败 </p><p>UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=? Parameters: 外星人笔记本(String), 70(Integer), 1(Integer), 1(Long), 0(Integer) </p><p>最终，小王修改失败，查询价格：150 </p><p>SELECT id,name,price,version FROM t_product WHERE id=?</p><h6 id="优化流程"><a href="#优化流程" class="headerlink" title="优化流程"></a>优化流程</h6><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testConcurrentVersionUpdate() &#123;&#x2F;&#x2F;小李取数据Product p1 &#x3D; productMapper.selectById(1L);&#x2F;&#x2F;小王取数据Product p2 &#x3D; productMapper.selectById(1L);&#x2F;&#x2F;小李修改 + 50p1.setPrice(p1.getPrice() + 50 );int result1 &#x3D; productMapper.updateById(p1);System.out.println(&quot;小李修改的结果：&quot; + result1);&#x2F;&#x2F;小王修改 - 30p2.setPrice(p2.getPrice() - 30 );int result2 &#x3D; productMapper.updateById(p2);System.out.println(&quot;小王修改的结果：&quot; + result2);if(result2 &#x3D;&#x3D; 0 )&#123;&#x2F;&#x2F;失败重试，重新获取version并更新p2 &#x3D; productMapper.selectById(1L);p2.setPrice(p2.getPrice() - 30 );result2 &#x3D; productMapper.updateById(p2);&#125;System.out.println(&quot;小王修改重试的结果：&quot; + result2);&#x2F;&#x2F;老板看价格Product p3 &#x3D; productMapper.selectById(1L);System.out.println(&quot;老板看价格：&quot; + p3.getPrice());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、通用枚举"><a href="#八、通用枚举" class="headerlink" title="八、通用枚举"></a>八、通用枚举</h3><p>​    表中的有些字段值是固定的，例如性别（男或女），此时我们可以使用MyBatis-Plus的通用枚举来实现</p><h5 id="a-gt-数据库表添加字段sex"><a href="#a-gt-数据库表添加字段sex" class="headerlink" title="a&gt;数据库表添加字段sex"></a>a&gt;数据库表添加字段sex</h5><p><a href="https://imgse.com/i/pEo1Rk8"><img src="https://s21.ax1x.com/2025/04/24/pEo1Rk8.png" alt="pEo1Rk8.png"></a></p><h5 id="b-gt-创建通用枚举类型"><a href="#b-gt-创建通用枚举类型" class="headerlink" title="b&gt;创建通用枚举类型"></a>b&gt;创建通用枚举类型</h5><pre class="line-numbers language-none"><code class="language-none">package com.atguigu.mp.enums;import com.baomidou.mybatisplus.annotation.EnumValue;import lombok.Getter;@Getterpublic enum SexEnum &#123;MALE( 1 , &quot;男&quot;),FEMALE( 2 , &quot;女&quot;);@EnumValue &#x2F;&#x2F;该注解表示将此属性存入数据库中private Integer sex;private String sexName;SexEnum(Integer sex, String sexName) &#123;this.sex &#x3D; sex;this.sexName &#x3D; sexName;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-gt-配置扫描通用枚举"><a href="#c-gt-配置扫描通用枚举" class="headerlink" title="c&gt;配置扫描通用枚举"></a>c&gt;配置扫描通用枚举</h5><pre class="line-numbers language-none"><code class="language-none">mybatis-plus: configuration:  # 配置MyBatis日志  log-impl: org.apache.ibatis.logging.stdout.StdOutImpl global-config:  db-config:   # 配置MyBatis-Plus操作表的默认前缀   table-prefix: t_   # 配置MyBatis-Plus的主键策略   id-type: auto # 配置扫描通用枚举，扫描后才能枚举的注解启用 type-enums-package: com.atguigu.mybatisplus.enums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="d-gt-测试"><a href="#d-gt-测试" class="headerlink" title="d&gt;测试"></a>d&gt;测试</h5><pre class="line-numbers language-none"><code class="language-none">@Testpublic void testSexEnum()&#123;User user &#x3D; new User();user.setName(&quot;Enum&quot;);user.setAge( 20 );&#x2F;&#x2F;设置性别信息为枚举项，会将@EnumValue注解所标识的属性值存储到数据库user.setSex(SexEnum.MALE);&#x2F;&#x2F;INSERT INTO t_user ( username, age, sex ) VALUES ( ?, ?,? )&#x2F;&#x2F;Parameters: Enum(String), 20(Integer), 1(Integer)userMapper.insert(user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、代码生成器"><a href="#九、代码生成器" class="headerlink" title="九、代码生成器"></a>九、代码生成器</h3><p>​    通过表来生成控制层、业务层、持久层、mapper接口、映射文件</p><h4 id="1-、引入依赖"><a href="#1-、引入依赖" class="headerlink" title="1 、引入依赖"></a>1 、引入依赖</h4><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;&lt;artifactId&gt;mybatis-plus-generator&lt;&#x2F;artifactId&gt;&lt;version&gt;3.5.1&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.freemarker&lt;&#x2F;groupId&gt;&lt;artifactId&gt;freemarker&lt;&#x2F;artifactId&gt;&lt;version&gt;2.3.31&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-、快速生成"><a href="#2-、快速生成" class="headerlink" title="2 、快速生成"></a>2 、快速生成</h4><p>​    复制测试方法，执行就行</p><pre class="line-numbers language-none"><code class="language-none">public class FastAutoGeneratorTest &#123;public static void main(String[] args) &#123;FastAutoGenerator.create(&quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;mybatis_plus?characterEncoding&#x3D;utf-8&amp;userSSL&#x3D;false&quot;, &quot;root&quot;, &quot;123456&quot;).globalConfig(builder -&gt; &#123;builder.author(&quot;atguigu&quot;) &#x2F;&#x2F; 设置作者&#x2F;&#x2F;.enableSwagger() &#x2F;&#x2F; 开启 swagger 模式.fileOverride() &#x2F;&#x2F; 覆盖已生成文件.outputDir(&quot;D:&#x2F;&#x2F;mybatis_plus&quot;); &#x2F;&#x2F; 指定输出目录&#125;).packageConfig(builder -&gt; &#123;builder.parent(&quot;com.atguigu&quot;) &#x2F;&#x2F; 设置父包名.moduleName(&quot;mybatisplus&quot;) &#x2F;&#x2F; 设置父包模块名.pathInfo(Collections.singletonMap(OutputFile.mapperXml, &quot;D:&#x2F;&#x2F;mybatis_plus&quot;));&#x2F;&#x2F; 设置mapperXml生成路径&#125;).strategyConfig(builder -&gt; &#123;builder.addInclude(&quot;t_user&quot;) &#x2F;&#x2F; 设置需要生成的表名.addTablePrefix(&quot;t_&quot;, &quot;c_&quot;); &#x2F;&#x2F; 设置过滤表前缀&#125;).templateEngine(new FreemarkerTemplateEngine()) &#x2F;&#x2F; 使用Freemarker引擎模板，默认的是Velocity引擎模板.execute();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十、多数据源"><a href="#十、多数据源" class="headerlink" title="十、多数据源"></a>十、多数据源</h3><p>适用于多种场景：纯粹多库、 读写分离、 一主多从、 混合模式等</p><p>目前我们就来模拟一个纯粹多库的一个场景，其他场景类似</p><p>场景说明：</p><p>我们创建两个库，分别为：mybatis_plus（以前的库不动）与mybatis_plus_1（新建），将mybatis_plus库的product表移动到mybatis_plus_1库，这样每个库一张表，通过一个测试用例分别获取用户数据与商品数据，如果获取到说明多库模拟成功</p><p><strong>注意：</strong></p><p>​    <strong>1.要操作哪个数据库，在service层上用注解@DS(“application.yml配置的数据库名”)指定</strong></p><p>​    <strong>2.@DS可以注解在方法上或类上，同时存在就近原则，方法上注解优先类上注解（有此可以实现同service的主写从读功能）</strong></p><h4 id="1-、创建数据库及表"><a href="#1-、创建数据库及表" class="headerlink" title="1 、创建数据库及表"></a>1 、创建数据库及表</h4><p>​    创建数据库mybatis_plus_1和表product</p><pre class="line-numbers language-none"><code class="language-none">CREATE DATABASE &#96;mybatis_plus_1&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8mb4 *&#x2F;;use &#96;mybatis_plus_1&#96;;CREATE TABLE product(id BIGINT( 20 ) NOT NULL COMMENT &#39;主键ID&#39;,name VARCHAR( 30 ) NULL DEFAULT NULL COMMENT &#39;商品名称&#39;,price INT( 11 ) DEFAULT 0 COMMENT &#39;价格&#39;,version INT( 11 ) DEFAULT 0 COMMENT &#39;乐观锁版本号&#39;,PRIMARY KEY (id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    添加测试数据</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO product (id, NAME, price) VALUES ( 1 , &#39;外星人笔记本&#39;, 100 );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    删除mybatis_plus库product表</p><pre class="line-numbers language-none"><code class="language-none">use mybatis_plus;DROP TABLE IF EXISTS product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-、引入依赖"><a href="#2-、引入依赖" class="headerlink" title="2 、引入依赖"></a>2 、引入依赖</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;需要引入的新依赖&lt;dependency&gt;&lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;&lt;artifactId&gt;dynamic-datasource-spring-boot-starter&lt;&#x2F;artifactId&gt;&lt;version&gt;3.5.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-、配置多数据源"><a href="#3-、配置多数据源" class="headerlink" title="3 、配置多数据源"></a>3 、配置多数据源</h4><p>​    说明：注释掉之前的数据库连接，添加新配置</p><pre class="line-numbers language-none"><code class="language-none">spring: # 配置数据源信息 datasource:  dynamic:   # 设置默认的数据源或者数据源组,默认值即为master   primary: master   # 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源   strict: false   datasource:    master:     url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_plus?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false     driver-class-name: com.mysql.cj.jdbc.Driver     username: root     password: 123456    slave_1:     url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_plus_1?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false     driver-class-name: com.mysql.cj.jdbc.Driver     username: root     password: 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-、创建用户service"><a href="#4-、创建用户service" class="headerlink" title="4 、创建用户service"></a>4 、创建用户service</h4><pre class="line-numbers language-none"><code class="language-none">public interface UserService extends IService&lt;User&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@DS(&quot;master&quot;) &#x2F;&#x2F;指定所操作的数据源@Servicepublic class UserServiceImpl extends ServiceImpl&lt;UserMapper, User&gt; implementsUserService &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-、创建商品service"><a href="#5-、创建商品service" class="headerlink" title="5 、创建商品service"></a>5 、创建商品service</h4><pre class="line-numbers language-none"><code class="language-none">public interface ProductService extends IService&lt;Product&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@DS(&quot;slave_1&quot;)@Servicepublic class ProductServiceImpl extends ServiceImpl&lt;ProductMapper, Product&gt;implements ProductService &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-、测试"><a href="#6-、测试" class="headerlink" title="6 、测试"></a>6 、测试</h4><pre class="line-numbers language-none"><code class="language-none">@Autowiredprivate UserService userService;@Autowiredprivate ProductService productService;@Testpublic void testDynamicDataSource()&#123;System.out.println(userService.getById(1L));System.out.println(productService.getById(1L));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果：-2"><a href="#结果：-2" class="headerlink" title="结果："></a>结果：</h5><p>​    1 、都能顺利获取对象，则测试成功</p><p>​    2 、如果我们实现读写分离，将写操作方法加上主库数据源，读操作方法加上从库数据源，自动切换，是不是就能实现读写分离？是的</p><h3 id="十一、MyBatisX插件-idea使用"><a href="#十一、MyBatisX插件-idea使用" class="headerlink" title="十一、MyBatisX插件-idea使用"></a>十一、MyBatisX插件-idea使用</h3><p>​    MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率</p><p>​    但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件</p><p>​    MyBatisX一款基于 IDEA 的快速开发插件，为效率而生。</p><p>​    MyBatisX插件用法：<a href="https://baomidou.com/pages/ba5b24/">https://baomidou.com/pages/ba5b24/</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> 语雀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis02-事务与乐观锁和持久化</title>
      <link href="/2025/04/29/redis02-%E4%BA%8B%E5%8A%A1%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2025/04/29/redis02-%E4%BA%8B%E5%8A%A1%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Redis事务和锁机制"><a href="#1-Redis事务和锁机制" class="headerlink" title="1. Redis事务和锁机制"></a>1. Redis事务和锁机制</h3><p>​    Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序的执行，事务在执行的过程中，不会被其他客户端发送的命令打断</p><p>​    作用：串联多个命令防止别的命令插队</p><p>​    <code>核心理解：Redis中的每条命令都是原子的，但多条命令连起来执行时就不是原子的（Java写的秒杀情况）</code></p><h4 id="1-事务相关的命令（multi、exec、discard）"><a href="#1-事务相关的命令（multi、exec、discard）" class="headerlink" title="(1)事务相关的命令（multi、exec、discard）"></a>(1)事务相关的命令（multi、exec、discard）</h4><p>​    <code>multi命令</code>：开启事务队列，之后的命令都会进入事务队列中但不执行</p><p>​    <code>discard命令</code>：放弃组队，关闭事务队列放弃执行</p><p>​    <code>exec命令</code>：执行事务队列中全部的命令</p><h5 id="样例：事务相关命令演示"><a href="#样例：事务相关命令演示" class="headerlink" title="样例：事务相关命令演示"></a>样例：事务相关命令演示</h5><p>​    注意：(TX)表示开启事务队列</p><p><a href="https://imgse.com/i/pEcqLZV"><img src="https://s21.ax1x.com/2025/04/07/pEcqLZV.png" alt="redis事务：成功版"></a></p><h4 id="2-事务的错误处理"><a href="#2-事务的错误处理" class="headerlink" title="(2)事务的错误处理"></a>(2)事务的错误处理</h4><p>​    在redis中，错误处理共两种情况</p><h5 id="错误情况1-组队阶段某个命令出错"><a href="#错误情况1-组队阶段某个命令出错" class="headerlink" title="错误情况1-组队阶段某个命令出错"></a>错误情况1-组队阶段某个命令出错</h5><p>​    在组队阶段某个命令组队时出错（语法等出错），在执行时整个队列都会被取消，如下图所示：</p><p><a href="https://imgse.com/i/pEcLPqx"><img src="https://s21.ax1x.com/2025/04/07/pEcLPqx.png" alt="组队阶段某个命令出错"></a></p><p>​    </p><h5 id="错误情况2-执行阶段某个命令出错"><a href="#错误情况2-执行阶段某个命令出错" class="headerlink" title="错误情况2-执行阶段某个命令出错"></a>错误情况2-执行阶段某个命令出错</h5><p>​    在执行阶段某个命令出现错误。则只有报错的命令不会被执行，而其他的命令都会执行不回滚，如下图所示</p><p><a href="https://imgse.com/i/pEcLuQA"><img src="https://s21.ax1x.com/2025/04/07/pEcLuQA.png" alt="执行阶段某个命令出错"></a></p><h4 id="3-事务冲突的处理（悲观锁、乐观锁）"><a href="#3-事务冲突的处理（悲观锁、乐观锁）" class="headerlink" title="(3)事务冲突的处理（悲观锁、乐观锁）"></a>(3)事务冲突的处理（悲观锁、乐观锁）</h4><p>​    事务冲突是多个并发事务对<strong>相同资源进行修改</strong>时发生的“抢夺”，这个时候数据库或缓存就需要决定谁可以成功，谁必须重来或等待</p><h5 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h5><p>​    每次别人访问数据时，都认为会修改，所以每次访问数据都加锁，别人必须等我解锁后才能访问</p><p>​    缺点：效率低</p><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p>​    在数据访问时给数据加一个版本号的字段，所有人都可以访问数据，但只要有人操作数据，数据库的版本号同步更新，如果操作数据时版本号与数据库的版本号对不上，那么该操作会被回滚</p><p>​    缺点：并发冲突较多时会导致重试开销，且实现上复杂</p><h4 id="4-乐观锁在Redis中的使用"><a href="#4-乐观锁在Redis中的使用" class="headerlink" title="(4)乐观锁在Redis中的使用"></a>(4)乐观锁在Redis中的使用</h4><p>​    在执行multi之前，先执行watch key1 [key2]…，可以监视一个（多个）key，如果在事务执行之前这个key被其他命令改动，那么事务将被打断，<strong>watch等价于Redis中的乐观锁</strong></p><p>​    同时可以使用unwatch取消当前客户端对所有key的监视</p><h5 id="样例：redis中使用乐观锁（两客户端模拟并发）"><a href="#样例：redis中使用乐观锁（两客户端模拟并发）" class="headerlink" title="样例：redis中使用乐观锁（两客户端模拟并发）"></a>样例：redis中使用乐观锁（两客户端模拟并发）</h5><p>​    首先的步骤两边同时先将balance监视，然后放入队列中，只是客户端1，先提交</p><p>​    客户端1的watch是自愿监视，可以不需要</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;客户端1127.0.0.1:6379&gt; set balance 100OK127.0.0.1:6379&gt; watch balanceOK127.0.0.1:6379&gt; multiOK127.0.0.1:6379(TX)&gt; incrby balance 20QUEUED&#x2F;&#x2F;客户端1先提交127.0.0.1:6379(TX)&gt; exec1) (integer) 120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    客户端2的监视是必须监视，<strong>原则：谁担心数据被改，则谁加</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;客户端2127.0.0.1:6379&gt; watch balanceOK127.0.0.1:6379&gt; multiOK127.0.0.1:6379(TX)&gt; incrby balance 50QUEUED&#x2F;&#x2F;客户端2后提交127.0.0.1:6379(TX)&gt; exec(nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-Redis-事务的三大特性（总结）"><a href="#5-Redis-事务的三大特性（总结）" class="headerlink" title="(5)Redis 事务的三大特性（总结）"></a>(5)Redis 事务的三大特性（总结）</h4><h5 id="1-独立的隔离操作"><a href="#1-独立的隔离操作" class="headerlink" title="1. 独立的隔离操作"></a>1. 独立的隔离操作</h5><p>​    事务中的所有命令会被顺序列队，并在执行时按照顺序执行，事务执行过程中，不会被其他客户端的命令打断</p><h5 id="2-无隔离级别的概念"><a href="#2-无隔离级别的概念" class="headerlink" title="2. 无隔离级别的概念"></a>2. 无隔离级别的概念</h5><p>​    在执行 <code>EXEC</code> 之前，事务中列队的命令都不会被实际执行</p><h5 id="3-不保证原子性"><a href="#3-不保证原子性" class="headerlink" title="3. 不保证原子性"></a>3. 不保证原子性</h5><p>​    如果事务中某条命令在执行阶段失败，后续命令仍会继续执行，Redis 不支持事务部分失败时的自动回滚机制</p><h4 id="6-Redis事务秒杀案例"><a href="#6-Redis事务秒杀案例" class="headerlink" title="(6)Redis事务秒杀案例"></a>(6)Redis事务秒杀案例</h4><h5 id="秒杀的基本步骤"><a href="#秒杀的基本步骤" class="headerlink" title="秒杀的基本步骤"></a>秒杀的基本步骤</h5><p>​    1.uid和prodid非空判断</p><p>​    2.连接redis</p><p>​    3.拼接key，用prodid进行拼接库存key（pro：prodid）和秒杀成功的用户key（user：prodid）</p><p>​    4.获取库存如果为null则秒杀还没开始</p><p>​    5.判断用户是否重复秒杀操作</p><p>​    6.判断库存数量小于1秒杀结束</p><p>​    7.秒杀，库存-1，秒杀成功用户加入reids</p><h5 id="样例方法：秒杀，需要web环境执行该方法"><a href="#样例方法：秒杀，需要web环境执行该方法" class="headerlink" title="样例方法：秒杀，需要web环境执行该方法"></a>样例方法：秒杀，需要web环境执行该方法</h5><p>​    执行前需要将库存先存入redis：set sk:0101 10</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;秒杀案例public static boolean SecKill(String uId,String propId)&#123;    if (uId &#x3D;&#x3D; null || propId &#x3D;&#x3D; null)&#123;        return false;    &#125;    Jedis jedis &#x3D; new Jedis(&quot;192.168.199.129&quot;, 6379);    String userKey &#x3D; &quot;User&quot; + &quot;:&quot; + propId;    String kcKey &#x3D; &quot;Kc&quot; + &quot;:&quot; + propId;    String kc &#x3D; jedis.get(kcKey);    if (kc &#x3D;&#x3D; null)&#123;        System.out.println(&quot;秒杀没开始&quot;);        jedis.close();        return false;    &#125;    if (jedis.sismember(userKey, uId))&#123;        System.out.println(&quot;已经参与秒杀&quot;);        jedis.close();        return false;    &#125;    if (Integer.parseInt(kc) &lt; 1)&#123;        System.out.println(&quot;秒杀结束&quot;);        jedis.close();        return false;    &#125;    jedis.decr(kcKey);    jedis.sadd(userKey, uId);    System.out.println(&quot;秒杀成功&quot;);    jedis.close();    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="超卖、连接超时的问题"><a href="#超卖、连接超时的问题" class="headerlink" title="超卖、连接超时的问题"></a>超卖、连接超时的问题</h5><p>​    以上代码，由于没有加锁</p><p>​    1.在多并发的环境下会导致超卖的问题</p><p>​    2.在多并发的环境下多请求如果一时间redis无法处理会产生连接超时的问题</p><h5 id="超卖、连接超时问题的解决"><a href="#超卖、连接超时问题的解决" class="headerlink" title="超卖、连接超时问题的解决"></a>超卖、连接超时问题的解决</h5><p>​    1.对于连接超时：使用Jedis数据库连接池获取Jedis对象，而不再直接new获取Jedis对象</p><p>​    2.对于超卖：使用乐观锁和事务，锁住库存，代码如下</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;秒杀案例（乐观锁优化）public static boolean SecKill(String uId,String propId)&#123;    if (uId &#x3D;&#x3D; null || propId &#x3D;&#x3D; null)&#123;        return false;    &#125;    Jedis jedis &#x3D; new Jedis(&quot;192.168.199.129&quot;, 6379);    String userKey &#x3D; &quot;User&quot; + &quot;:&quot; + propId;    String kcKey &#x3D; &quot;Kc&quot; + &quot;:&quot; + propId;    &#x2F;&#x2F;开启监视    jedis.watch(kcKey);    String kc &#x3D; jedis.get(kcKey);    if (kc &#x3D;&#x3D; null)&#123;        System.out.println(&quot;秒杀没开始&quot;);        jedis.close();        return false;    &#125;    if (jedis.sismember(userKey, uId))&#123;        System.out.println(&quot;已经参与秒杀&quot;);        jedis.close();        return false;    &#125;    if (Integer.parseInt(kc) &lt; 1)&#123;        System.out.println(&quot;秒杀结束&quot;);        jedis.close();        return false;    &#125;    &#x2F;&#x2F;使用事务    Transaction multi &#x3D; jedis.multi();    multi.decr(kcKey);    multi.sadd(userKey,uId);    List&lt;Object&gt; exec &#x3D; multi.exec();    if (exec &#x3D;&#x3D; null||exec.size() &#x3D;&#x3D; 0)&#123;        System.out.println(&quot;秒杀失败&quot;);        jedis.close();        return false;    &#125;    System.out.println(&quot;秒杀成功&quot;);    jedis.close();    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用乐观锁的问题：库存遗留"><a href="#使用乐观锁的问题：库存遗留" class="headerlink" title="使用乐观锁的问题：库存遗留"></a>使用乐观锁的问题：库存遗留</h5><p>​    Redis不能直接使用悲观锁，所以可以使用Lua（一个嵌入式的脚本语言）解决这个问题</p><p>​    Lua不支持多线程是单线程的语言，Redis 又是单线程的数据库，这两者结合使得 Lua 脚本在 Redis 中的执行具备了“天然线程安全 + 原子性”的特性，非常适合用于高并发场景中的库存扣减、分布式锁等操作，而出现库存</p><p>​    既然 Redis 是单线程的，那 Java 客户端操作它时，为什么还能出现并发问题？回答：真正的问题是：<code>并发来自客户端，而不是 Redis 本身</code></p><p>​    <strong>编写思路：</strong>将Lua脚本写到String中，通过 Java 向 Redis 发送 Lua 脚本，让 Redis 执行这个脚本，再返回结果（一般数字1成功，0失败，2重复）给 Java，Java再将结果判断进一步执行操作</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;Java操作Lua+Redis实现秒杀的伪代码，SecKill.java&#x2F;&#x2F;具体Lua脚本用时去查，或者那这个去找chatGPT生成String LuaString &#x3D; &quot;Lua脚本&quot;;String shal &#x3D; jedis.scriptLoad(LuaString);&#x2F;&#x2F;2是表传两个参数，传入Lua脚本映射关系，KEYS[1] → userid，KEYS[2] → prodidObject result &#x3D; jedis.evalsha(shal,2,userid,prodid);String reString &#x3D; String.valueOf(result);if(&quot;1&quot;.equals(reString))&#123;System.out.println(&quot;抢购成功&quot;);&#125;else if(&quot;0&quot;.equals(reString))&#123;System.err.println(&quot;已抢空&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Redis持久化"><a href="#2-Redis持久化" class="headerlink" title="2. Redis持久化"></a>2. Redis持久化</h3><p>​    Redis提供两种不同形式的持久化方式：RDB和AOF</p><h4 id="1-RDB"><a href="#1-RDB" class="headerlink" title="(1)RDB"></a>(1)RDB</h4><p>​    RDB全称是Redis Database Backup file（Redis数据备份文件），在指定的时间间隔（例如每隔10s）把redis内存中的所有的数据写入磁盘，当Redis实例故障重启后，从磁盘读取快照（dump.rdb文件，默认目录由 <code>dir</code> 配置项指定），恢复数据</p><p>​    <strong>缺点</strong>：1.最后一次持久化后的数据可能丢失；2.fork()时内存空间需要考虑两倍</p><h5 id="RDB底层的执行逻辑"><a href="#RDB底层的执行逻辑" class="headerlink" title="RDB底层的执行逻辑"></a>RDB底层的执行逻辑</h5><p>​    当要生成RDB文件时开始执行</p><p>​    1.主进程调用 <code>fork()</code>，系统生成子进程（通过写时复制技术内存页共享）</p><p>​    2.子进程开始从共享内存页中读数据写 RDB 临时文件，当持久化过程结束后，将该临时文件原子替换为dump.rdb文件</p><p>​    3.主进程继续提供服务（接受写请求）</p><p>​    4.如果主进程改动了某块内存页，系统自动复制给主进程，子进程继续用旧数据</p><h5 id="Redis的conf文件对于RDB的配置项"><a href="#Redis的conf文件对于RDB的配置项" class="headerlink" title="Redis的conf文件对于RDB的配置项"></a>Redis的conf文件对于RDB的配置项</h5><p>​    1.dbfilename dump.rdb：设置进行RDB后的文件名称，默认dump.rdb</p><p>​    2.dir ./：设置RDB后文件的路径，./表当前路径（redis-server的启动目录）</p><p>​    3.stop-writes-on-bgsave-error yes：设置当硬盘满时不进行写操作</p><p>​    4.rdbcompression yes：设置是否对持久化文件进行压缩存储，采用LZF算法压缩</p><p>​    5.rdbchecksum yes：设置开启在持久化前检查数据有无损坏</p><h5 id="RDB触发备份的方式"><a href="#RDB触发备份的方式" class="headerlink" title="RDB触发备份的方式"></a>RDB触发备份的方式</h5><p>​    <code>RDB 每次都会保存“全量数据”</code>，不是只保存变化的“片段”或“增量”</p><table><thead><tr><th>方式</th><th>命令或配置</th><th>是否阻塞</th></tr></thead><tbody><tr><td>自动触发</td><td>配置文件里的 <code>save</code></td><td>否（后台）</td></tr><tr><td>手动触发</td><td>命令 <code>BGSAVE</code></td><td>否（后台）</td></tr><tr><td>阻塞备份（不推荐）</td><td>命令 <code>SAVE</code></td><td>是（会卡主线程）</td></tr></tbody></table><p>​    自动触发的方式：配置为save 20 3，是 “<strong>在 N 秒内至少发生 M 次写操作，就触发一次 RDB 持久化</strong>，图如下所示</p><table><thead><tr><th>时间</th><th>操作</th><th>累计写次数（20s 窗口内）</th><th>是否触发持久化</th></tr></thead><tbody><tr><td>0s</td><td>SET A</td><td>1</td><td>❌</td></tr><tr><td>1s</td><td>SET B</td><td>2</td><td>❌</td></tr><tr><td>2s</td><td>SET C</td><td>3</td><td>✅ 触发 bgsave</td></tr><tr><td>3s</td><td>SET D</td><td>1（重新计数）</td><td>❌</td></tr><tr><td>4s</td><td>SET E</td><td>2</td><td>❌</td></tr><tr><td>5s</td><td>SET F</td><td>3</td><td>✅ <em>可能不触发（间隔太短）</em>，不是数据丢失，仅暂时不保存</td></tr></tbody></table><h4 id="2-AOF（Append-Only-File）"><a href="#2-AOF（Append-Only-File）" class="headerlink" title="(2)AOF（Append Only File）"></a>(2)AOF（Append Only File）</h4><p>​    通过将每次<code>写(写入磁盘，包含了修改和删除)命令</code>追加到日志文件中（只许追加到文件不可以修改到文件），redis启动时会读取该文件重新构建数据实现数据恢复</p><h5 id="AOF的使用（默认没开启）"><a href="#AOF的使用（默认没开启）" class="headerlink" title="AOF的使用（默认没开启）"></a>AOF的使用（默认没开启）</h5><p>​    1.在redis.conf中将appendonly no 改为 yes </p><p>​    2.appendfilename “appendonly.aof”：设置AOP文件名，AOP的生成路径与RDB同步</p><h5 id="AOF的特点"><a href="#AOF的特点" class="headerlink" title="AOF的特点"></a>AOF的特点</h5><p>​    当redis目录同时有AOF和RDB文件时，默认读取AOF文件里的信息</p><h5 id="AOF文件的异常恢复"><a href="#AOF文件的异常恢复" class="headerlink" title="AOF文件的异常恢复"></a>AOF文件的异常恢复</h5><p>​    如果遇到AOF文件损坏，如打开vim在AOF文件中加了不明字段，此时AOF文件就已经损坏，可以通过/usr/local/bin/redis-check-aof–fix appendonly.aof进行恢复</p><h5 id="AOF的其他配置：同步频率设置"><a href="#AOF的其他配置：同步频率设置" class="headerlink" title="AOF的其他配置：同步频率设置"></a>AOF的其他配置：同步频率设置</h5><p>​    1.appendfsync always：始终同步，每次Redis的写入都会立即记入日志，性能较差但数据完整性好</p><p>​    2.appendfsync everysec：每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失</p><p>​    3.appendfsync no：redis不主动进行同步，把同步时机交给操作系统</p><h5 id="rewrite（重写压缩）"><a href="#rewrite（重写压缩）" class="headerlink" title="rewrite（重写压缩）"></a>rewrite（重写压缩）</h5><p>​    把相同类型的指令，重写压缩为一条指令，只关注结果一致，过程与RDB保存类似，都使用了fork()，当文件大小大于64Mb的两倍时触发重写</p><h4 id="3-RDB和AOF的对比"><a href="#3-RDB和AOF的对比" class="headerlink" title="(3)RDB和AOF的对比"></a>(3)RDB和AOF的对比</h4><p>​    官方推荐两个都使用，如果对数据不敏感可以单独用RDB，AOF不建议单独使用，如果只做纯内存缓存可以都不使用</p><h5 id="两者的使用逻辑"><a href="#两者的使用逻辑" class="headerlink" title="两者的使用逻辑"></a>两者的使用逻辑</h5><ul><li>AOF 保证数据不丢，RDB 保证恢复效率快</li><li>重启时优先用 AOF 恢复，如果 AOF 不可用才回退 RDB</li></ul><h5 id="两者的保存数据的逻辑"><a href="#两者的保存数据的逻辑" class="headerlink" title="两者的保存数据的逻辑"></a>两者的保存数据的逻辑</h5><ul><li>Redis 正常运行时，AOF 追加写操作的日志</li><li>RDB 只有在触发 <code>save</code> 或 <code>bgsave</code> 时，才将快照当前内存状态写入 <code>.rdb</code> 文件；</li><li>它们各写各的，互不感知，没有“一个完成了就同步另一个”的逻辑，但rdb可以人工同步，aof仅自动触发不能人工同步</li></ul><h5 id="两者的对比表"><a href="#两者的对比表" class="headerlink" title="两者的对比表"></a>两者的对比表</h5><table><thead><tr><th>对比项</th><th>RDB 快照</th><th>AOF 日志</th></tr></thead><tbody><tr><td>核心作用</td><td><strong>完整备份</strong>（定时快照）</td><td><strong>数据安全</strong>（持续写操作记录）</td></tr><tr><td>写入频率</td><td>低（定时/手动触发）</td><td>高（每次写操作都记录）</td></tr><tr><td>恢复速度</td><td>快，直接恢复内存状态</td><td>慢，要逐条执行命令</td></tr><tr><td>文件体积</td><td>通常较小</td><td>通常较大，但可压缩重写</td></tr><tr><td>数据精度</td><td>可能丢失最近几秒的数据</td><td>最多丢 1 秒数据（everysec 配置）</td></tr><tr><td>适合场景</td><td>做冷备、定期快照、快速大数据恢复</td><td>做热备、防止数据丢失，容灾能力更强</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis01-redis安装与常用数据类型、Springboot整合Jedis</title>
      <link href="/2025/04/07/redis01-redis%E5%AE%89%E8%A3%85%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81Springboot%E6%95%B4%E5%90%88Jedis/"/>
      <url>/2025/04/07/redis01-redis%E5%AE%89%E8%A3%85%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81Springboot%E6%95%B4%E5%90%88Jedis/</url>
      
        <content type="html"><![CDATA[<h3 id="1-NoSQL数据库"><a href="#1-NoSQL数据库" class="headerlink" title="1. NoSQL数据库"></a>1. NoSQL数据库</h3><p>​    NoSQL(Not Only SQL)，泛指非关系型的数据库，NoSQL不依赖业务逻辑方式存储，而是以简单的key-value模式存储</p><h3 id="2-Redis的安装"><a href="#2-Redis的安装" class="headerlink" title="2. Redis的安装"></a>2. Redis的安装</h3><p>​    Redis是使用C写的程序，目前主流在Linux操作系统，官方不提供Window版，最新的Redis版：Redis7.x</p><p>官网下载：<code>https://redis.io/download/</code></p><h4 id="1-安装步骤-社区版"><a href="#1-安装步骤-社区版" class="headerlink" title="(1)安装步骤(社区版)"></a>(1)安装步骤(社区版)</h4><p>​    1.切换到空白目录</p><p>​    2.下载Redis源码的压缩包</p><p>​    3.下载gcc，用于编译c源码</p><p>​    4.解压Redis源码</p><p>​    5.进入解压后的Redis文件夹</p><p>​    6.编译源码</p><p>​    7.安装Redis</p><p>​    8.默认安装在/usr/local/bin，可以切换过去查看</p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;usr&#x2F;local&#x2F;srcsudo curl -O https:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-6.2.1.tar.gzapt install gcctar -zxvf redis-6.2.1.tar.gzcd redis-6.2.1makemake installcd &#x2F;usr&#x2F;local&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Redis的全部文件的作用（目录usr-local-bin）"><a href="#2-Redis的全部文件的作用（目录usr-local-bin）" class="headerlink" title="(2)Redis的全部文件的作用（目录usr/local/bin）"></a>(2)Redis的全部文件的作用（目录usr/local/bin）</h4><p>​    <code>redis-benchmark</code>：性能测试工具，可用于本地运行，查看 Redis 性能</p><p>​    <code>redis-check-aof</code>：修复有问题的 AOF（Append-Only File）日志文件</p><p>​    <code>redis-check-dump</code>：修复有问题的 <code>dump.rdb</code> 数据库文件</p><p>​    <code>redis-sentinel</code>：Redis 集群的管理工具</p><p>​    <code>redis-server</code>：Redis 服务器的启动命令</p><p>​    <code>redis-cli</code>：Redis 客户端，提供命令行操作入口55</p><h4 id="3-Redis的启动（默认端口：6379）"><a href="#3-Redis的启动（默认端口：6379）" class="headerlink" title="(3)Redis的启动（默认端口：6379）"></a>(3)Redis的启动（默认端口：6379）</h4><p>​    有前台启动和后台启动</p><h5 id="Redis的前台启动（不推荐）"><a href="#Redis的前台启动（不推荐）" class="headerlink" title="Redis的前台启动（不推荐）"></a>Redis的前台启动（不推荐）</h5><p>​    输入以下命令启动，注意：命令行窗口不能关闭，否则服务器停止</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;要在redis-server所在的目录内执行redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="Redis的后台启动（推荐）"><a href="#Redis的后台启动（推荐）" class="headerlink" title="Redis的后台启动（推荐）"></a>Redis的后台启动（推荐）</h5><p>​    进入到之前redis源码目录中：/usr/local/src/redis-6.2.1</p><p>​    将redis.conf的文件复制到etc目录（这个自便）：cp redis.conf /etc/redis.conf</p><p>​    将复制后的conf文件里的daemonize由no修改为yes：cd /etc</p><p>​    回到/usr/local/bin（redis-server所在的目录），启动Redis：redis-server /etc/redis.conf</p><p>​    启动后输入：redis-cli，可以通过客户端连接上redis</p><p>​    关闭方式：shutdown</p><h3 id="3-Redis的五大数据类型"><a href="#3-Redis的五大数据类型" class="headerlink" title="3. Redis的五大数据类型"></a>3. Redis的五大数据类型</h3><p>​    <code>Redis对所有数据的操作都是原子性的，是单线程不会被打断的，但是批量操作有一个失败的话，全部操作都会失败</code>，每一句代码叫做一个操作，msetnx就属于批量操作</p><h4 id="1-Redis数据库的结构"><a href="#1-Redis数据库的结构" class="headerlink" title="(1)Redis数据库的结构"></a>(1)Redis数据库的结构</h4><p>​    Redis默认16个数据库，初始默认使用0号库</p><p>​    使用<code>select &lt;num&gt;</code>来切换数据库，如：select 8</p><p>​    统一的密码管理，所有的库都是用同样的密码</p><h4 id="2-Redis中对Key的操作"><a href="#2-Redis中对Key的操作" class="headerlink" title="(2)Redis中对Key的操作"></a>(2)Redis中对Key的操作</h4><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>keys *</code></td><td>查看当前库所有 key</td></tr><tr><td><code>exists &lt;key名&gt;</code></td><td>判断某个 key 是否存在</td></tr><tr><td><code>type &lt;key名&gt;</code></td><td>查看 key 的数据类型</td></tr><tr><td><code>del &lt;key名&gt;</code></td><td>删除指定 key（key 和 value 都删）</td></tr><tr><td><code>unlink &lt;key名&gt;</code></td><td>非阻塞删除 key（异步删除数据）</td></tr><tr><td><code>expire &lt;key名&gt; 10</code></td><td>设置 key 过期时间为 10 秒</td></tr><tr><td><code>ttl &lt;key名&gt;</code></td><td>查看 key 还剩多少秒过期（-1 永不过期，-2 已过期）</td></tr><tr><td><code>dbsize</code></td><td>查看当前库未过期 key 的数量</td></tr><tr><td><code>flushdb</code></td><td>清空当前库的所有内容</td></tr><tr><td><code>flushall</code></td><td>清空所有库的所有内容</td></tr></tbody></table><h4 id="3-String（字符串）"><a href="#3-String（字符串）" class="headerlink" title="(3)String（字符串）"></a>(3)String（字符串）</h4><p>​    String是Redis里面最基本的类型，一个key对应一个value</p><p>​    String类型是二进制安全的，意味着Redis可以包含任何数据，比如jpg图片或序列化对象</p><p>​    String类型的底层实现类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配，最大长度为512M（仅Value，不包含key）</p><h5 id="String类型的常用命令"><a href="#String类型的常用命令" class="headerlink" title="String类型的常用命令"></a>String类型的常用命令</h5><table><thead><tr><th align="left"><strong>命令</strong></th><th><strong>作用</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left"><code>set &lt;key&gt; &lt;value&gt; [NX] [XX] [EX] [PX]</code></td><td>添加键值对</td><td align="center"><code>NX</code>：key 不存在时添加；<code>XX</code>：key 存在时修改；<code>EX</code>：设置过期时间（秒）；<code>PX</code>：设置过期时间（毫秒）</td></tr><tr><td align="left"><code>get &lt;key&gt;</code></td><td>获取 key 对应的 value</td><td align="center">无</td></tr><tr><td align="left"><code>append &lt;key&gt; &lt;value&gt;</code></td><td>在原 value 末尾追加新内容</td><td align="center">无</td></tr><tr><td align="left"><code>incr &lt;key&gt;</code></td><td>将 key 对应的数值 +1（value 必须是数字）</td><td align="center">无</td></tr><tr><td align="left"><code>decr &lt;key&gt;</code></td><td>将 key 对应的数值 -1（value 必须是数字）</td><td align="center">无</td></tr></tbody></table><h5 id="String类型的适用场景"><a href="#String类型的适用场景" class="headerlink" title="String类型的适用场景"></a>String类型的适用场景</h5><table><thead><tr><th>应用场景</th><th>示例命令与描述</th><th>说明</th></tr></thead><tbody><tr><td>计数器</td><td>incr view_count</td><td>记录网站访问量、视频播放量</td></tr><tr><td>共享 Session</td><td>set session:12345 “user_data” ex 3600</td><td>分布式系统存储用户 Session</td></tr><tr><td>分布式锁</td><td>setnx lock:order:1001 “locked”</td><td>控制并发，防止超卖</td></tr><tr><td>限流</td><td>incr user:1001:requests</td><td>记录 API 调用次数，做限流</td></tr><tr><td>配置存储</td><td>set system:config ‘{“theme”:”dark”}’</td><td>存储全局配置，如系统设置</td></tr></tbody></table><h4 id="4-List（列表）"><a href="#4-List（列表）" class="headerlink" title="(4)List（列表）"></a>(4)List（列表）</h4><p>​    List类型属于单key多值，值又全部存储在value中</p><p>​    List类型的底层是个双向链表，两端操作性高，中间操作性差；当列表元素较少时会使用一块连续的内存存储，叫zipset，当元素变多时将多个zipset双向链接，叫quicklist</p><h5 id="List类型的常用命令"><a href="#List类型的常用命令" class="headerlink" title="List类型的常用命令"></a>List类型的常用命令</h5><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>lpush &lt;key&gt; &lt;value1&gt; &lt;value2&gt; ...</code></td><td>从左侧插入一个或多个值</td><td>队列结构，先进后出</td></tr><tr><td><code>rpush &lt;key&gt; &lt;value1&gt; &lt;value2&gt; ...</code></td><td>从右侧插入一个或多个值</td><td>队列结构，先进先出</td></tr><tr><td><code>lrange &lt;key&gt; &lt;start&gt; &lt;stop&gt;</code></td><td>按索引范围获取列表元素</td><td><code>0 -1</code> 代表获取全部</td></tr><tr><td><code>lpop &lt;key&gt;</code></td><td>从左侧弹出一个值</td><td>若列表为空，key 自动销毁</td></tr><tr><td><code>rpop &lt;key&gt;</code></td><td>从右侧弹出一个值</td><td>若列表为空，key 自动销毁</td></tr></tbody></table><h5 id="List类型的适用场景"><a href="#List类型的适用场景" class="headerlink" title="List类型的适用场景"></a>List类型的适用场景</h5><table><thead><tr><th><strong>应用场景</strong></th><th><strong>相关命令</strong></th><th><strong>典型案例</strong></th></tr></thead><tbody><tr><td>消息队列</td><td>lpush rpop</td><td>任务队列、秒杀下单</td></tr><tr><td>文章/评论列表</td><td>lpush lrange</td><td>博客评论、微博动态</td></tr><tr><td>延迟队列</td><td>blpop brpop</td><td>异步任务、订单处理</td></tr></tbody></table><h4 id="5-Set类型（集合）"><a href="#5-Set类型（集合）" class="headerlink" title="(5)Set类型（集合）"></a>(5)Set类型（集合）</h4><p>​    Set类型的功能和List类似，区别是<code>set可以自动排重</code></p><p>​    Set 类型的底层数据结构是基于哈希表实现的（也可以理解为字典），它通过哈希表实现了元素的添加、删除、查找操作，时间复杂度为 O(1)，与 Java 中的 HashSet 类似。</p><h5 id="set类型的常用命令"><a href="#set类型的常用命令" class="headerlink" title="set类型的常用命令"></a>set类型的常用命令</h5><table><thead><tr><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>sadd key members [....]</code></td><td>将一个或多个 <code>members</code> 添加到 <code>key</code> 集合</td><td>集合中已存在的元素不会重复添加</td></tr><tr><td><code>smembers key</code></td><td>获取 <code>key</code> 集合中的所有元素</td><td>以列表形式返回集合中的所有值</td></tr><tr><td><code>srem key members [....]</code></td><td>从 <code>key</code> 集合中删除一个或多个 <code>members</code></td><td>仅删除匹配的成员，不影响其他成员</td></tr><tr><td><code>spop key count</code></td><td>随机从 <code>key</code> 集合中取出 <code>count</code> 个元素</td><td>取出的元素会从集合中移除</td></tr></tbody></table><h5 id="set类型的应用场景"><a href="#set类型的应用场景" class="headerlink" title="set类型的应用场景"></a>set类型的应用场景</h5><table><thead><tr><th><strong>应用场景</strong></th><th><strong>相关命令</strong></th><th><strong>典型案例</strong></th></tr></thead><tbody><tr><td>防止重复</td><td>sadd sismember scard</td><td>防止刷票、签到去重</td></tr><tr><td>随机抽奖</td><td>srandmember spop</td><td>抽奖、随机推荐</td></tr></tbody></table><h4 id="6-Hash类型（哈希）"><a href="#6-Hash类型（哈希）" class="headerlink" title="(6)Hash类型（哈希）"></a>(6)Hash类型（哈希）</h4><p>​    Hash是一个String类型的field和value映射表，特别适合存储对象，类似Java中的Map&lt;String,Object&gt;</p><h5 id="hash类型的常用命令"><a href="#hash类型的常用命令" class="headerlink" title="hash类型的常用命令"></a>hash类型的常用命令</h5><table><thead><tr><th>命令</th><th>作用</th><th>说明</th><th>演示</th></tr></thead><tbody><tr><td><code>hset key field value</code></td><td>设置哈希表字段的值</td><td>如果字段已存在，则覆盖旧值</td><td><code>hset user:1001 name &quot;张三&quot;</code></td></tr><tr><td><code>hget key field</code></td><td>获取哈希表中指定字段的值</td><td>仅返回单个字段的值</td><td><code>hget user:1001 name</code> → “张三”</td></tr><tr><td><code>hgetall key</code></td><td>获取哈希表中的所有字段和值</td><td>以键值对形式返回整个哈希表</td><td><code>hgetall user:1001</code> → <code>[&quot;name&quot;, &quot;张三&quot;, &quot;age&quot;, &quot;25&quot;]</code></td></tr><tr><td><code>hdel key field</code></td><td>删除哈希表中的字段</td><td>仅删除匹配的字段</td><td><code>hdel user:1001 age</code></td></tr><tr><td><code>hkeys key</code></td><td>获取哈希表中的所有字段名(key)</td><td>以列表形式返回字段名</td><td><code>hkeys user:1001</code> → <code>[&quot;name&quot;, &quot;age&quot;]</code></td></tr><tr><td><code>hvals key</code></td><td>获取哈希表中的所有字段值(value)</td><td>以列表形式返回字段值</td><td><code>hvals user:1001</code> → <code>[&quot;张三&quot;, &quot;25&quot;]</code></td></tr><tr><td><code>hincrby key field increment</code></td><td>递增哈希表字段的数值</td><td>仅适用于数值字段</td><td><code>hincrby user:1001 age 1</code> → <code>26</code></td></tr></tbody></table><h5 id="hash类型的应用场景"><a href="#hash类型的应用场景" class="headerlink" title="hash类型的应用场景"></a>hash类型的应用场景</h5><p>抱歉，给您调整下格式，确保命令与实际情况一致。下面是正确的表格：</p><table><thead><tr><th>应用场景</th><th>示例命令与描述</th><th>说明</th></tr></thead><tbody><tr><td>用户信息存储</td><td>hset user:1001 name “Alice”</td><td>存储用户的多个信息，如姓名、年龄等。</td></tr><tr><td>商品库存管理</td><td>hset product:1001 name “Laptop”</td><td>存储商品的属性，如价格、库存。</td></tr></tbody></table><h4 id="7-zset类型（有序集合）"><a href="#7-zset类型（有序集合）" class="headerlink" title="(7)zset类型（有序集合）"></a>(7)zset类型（有序集合）</h4><p>​    zset和set很类型，是一个没有重复元素的字符串集合，不同的是zset每个成员都管理一个评分（score），按照这个评分排序所有成员，集合中成员唯一，但评分可以重复</p><h5 id="zest类型的常用命令"><a href="#zest类型的常用命令" class="headerlink" title="zest类型的常用命令"></a>zest类型的常用命令</h5><table><thead><tr><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>zadd key score member</code></td><td>添加元素并指定分数</td><td>若成员已存在，则更新其分数</td></tr><tr><td><code>zscore key member</code></td><td>获取指定成员的分数</td><td>返回成员对应的分数</td></tr><tr><td><code>zrange key start(数字) stop(数字)</code></td><td>按分数升序获取成员</td><td><code>zrange leaderboard 0 -1</code> 获取全部</td></tr><tr><td><code>zrevrange key start(数字) stop(数字)</code></td><td>按分数降序获取成员</td><td><code>zrevrange leaderboard 0 -1</code> 获取全部（从高到低）</td></tr><tr><td><code>zincrby key increment(数字) member</code></td><td>增加指定成员的分数</td><td><code>zincrby leaderboard 10 user1</code> 给 <code>user1</code> 增加 10 分</td></tr><tr><td><code>zrem key member</code></td><td>移除指定成员</td><td><code>zrem leaderboard user1</code> 删除 <code>user1</code></td></tr></tbody></table><h5 id="zset类型的应用场景"><a href="#zset类型的应用场景" class="headerlink" title="zset类型的应用场景"></a>zset类型的应用场景</h5><table><thead><tr><th>应用场景</th><th>示例命令与描述</th><th>说明</th></tr></thead><tbody><tr><td>排行榜</td><td>zadd leaderboard 100 user1</td><td>适用于游戏排名</td></tr><tr><td>热门内容推荐</td><td>zincrby hot_articles 10 article1</td><td>点赞、浏览量排序</td></tr></tbody></table><h4 id="8-新数据类型-Bitmaps、HyperLogLog、Geospatial"><a href="#8-新数据类型-Bitmaps、HyperLogLog、Geospatial" class="headerlink" title="(8)新数据类型(Bitmaps、HyperLogLog、Geospatial)"></a>(8)新数据类型(Bitmaps、HyperLogLog、Geospatial)</h4><h5 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h5><p>​    针对位操作的数据类型，本质还是String的key、value，只是它一个字节可以存8个数据，即一位一个数据，只存false和true，适用于统计用户是否上线</p><h5 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h5><p>​    针对基数运算，就是统计存入的值是否重复，重复不存入，它是使用算法推算值是否重复，值本身不存储，但该算法有概率失败，适用与统计用户博客访问次数</p><h5 id="Geospatial"><a href="#Geospatial" class="headerlink" title="Geospatial"></a>Geospatial</h5><p>​    针对地理信息经纬度操作，存值经纬度，其可以通过两个经纬度算出之间距离、某范围查满足城市的信息等实用操作</p><h3 id="4-Redis的发布与订阅"><a href="#4-Redis的发布与订阅" class="headerlink" title="4. Redis的发布与订阅"></a>4. Redis的发布与订阅</h3><p>​    Redis发布订阅是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接受消息，其适用于一些需要 实时推送数据的场景，比如 <strong>实时聊天系统</strong> 或 <strong>通知系统</strong></p><p>​    使用Redis发布信息时可以指定要发送到的频道，同时Redis客户端可以订阅任意数量的频道</p><h5 id="发布与订阅的实现"><a href="#发布与订阅的实现" class="headerlink" title="发布与订阅的实现"></a>发布与订阅的实现</h5><p>​    1.打开一个Redis客户端（A）使用命令<code>subscribe</code>订阅频道channel1</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;A：此时控制台显示127.0.0.1:6379&gt; subscribe channel1Reading messages... (press Ctrl-C to quit)1) &quot;subscribe&quot;2) &quot;channel1&quot;3) (integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.打开第二个Redis客户端(B)使用命令<code>publish channel1</code>向指定频道发送信息hello</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;B：控制台显示127.0.0.1:6379&gt; publish channel1 hello(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.看第一个客户端(A)订阅到的内容</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;A：控制台显示1) &quot;message&quot;2) &quot;channel1&quot;3) &quot;hello&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Jedis"><a href="#5-Jedis" class="headerlink" title="5. Jedis"></a>5. Jedis</h3><p>​    <code>Jedis</code> 是一个操作 Redis 的 Java 客户端，用于 Java 程序与 Redis 进行交互</p><h4 id="1-Jedis的使用"><a href="#1-Jedis的使用" class="headerlink" title="(1)Jedis的使用"></a>(1)Jedis的使用</h4><p>​    Jedis提供了简单易用的 API 来执行 Redis 命令，<code>提供的API名和Redis的操作命令一致</code></p><h5 id="修改redis-conf文件（配置Redis的远程连接）"><a href="#修改redis-conf文件（配置Redis的远程连接）" class="headerlink" title="修改redis.conf文件（配置Redis的远程连接）"></a>修改redis.conf文件（配置Redis的远程连接）</h5><p>​    打开目录etc：cd /etc</p><p>​    打开redis.conf文件：vim redis.conf</p><ul><li>将<code>bind 127.0.0.1 -::1</code>注释掉，表支持远程连接</li><li>将protected-mode的值改为no，表把保护模式关闭</li></ul><p>​    弄好后，重启redis-server</p><h5 id="Jedis使用步骤"><a href="#Jedis使用步骤" class="headerlink" title="Jedis使用步骤"></a>Jedis使用步骤</h5><p>​    1.配置检查redis允许远程连接</p><p>​    2.在pom.xml中导入Jedis的相关依赖</p><p>​    3.在JedisDemo.java中编写Jedis相关代码测试连接</p><h5 id="样例：Jedis的使用"><a href="#样例：Jedis的使用" class="headerlink" title="样例：Jedis的使用"></a>样例：Jedis的使用</h5><p>​    1.在pom.xml中导入Jedis的相关依赖</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;pom.xml&lt;dependency&gt;&lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;&lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;&lt;version&gt;3.2.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在JedisDemo.java中编写Jedis相关代码测试连接</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;JedisDemo.javapublic class JedisDemo &#123;public static void main(String[] args) &#123;        &#x2F;&#x2F;与ip中的redis创建连接，使用这个Jedis实例就可以操作redis数据库Jedis jedis &#x3D; new Jedis(&quot;182.61.132.32&quot;, 6379);        String ping &#x3D; jedis.ping();        System.out.println(ping); &#x2F;&#x2F;正确连接输出：pong    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Jedis案例-手机验证码"><a href="#2-Jedis案例-手机验证码" class="headerlink" title="(2)Jedis案例-手机验证码"></a>(2)Jedis案例-手机验证码</h4><h5 id="案例要求"><a href="#案例要求" class="headerlink" title="案例要求"></a>案例要求</h5><p>​    1.输入手机号，点击发送后随机生成6位数字码，2分钟内有效</p><p>​    2.输入验证码，点击验证，返回成功或失败</p><p>​    3.每个手机号每天只能输入3次</p><h5 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h5><p>​    1.静态方法：生成一个6位的验证码</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;生成6位数字验证码public static String getCode() &#123;Random rand &#x3D; new Random();String code &#x3D; &quot;&quot;;for (int i &#x3D; 0; i &lt; 6; i++) &#123;code +&#x3D; rand.nextInt(10);&#125;return code + &quot;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.静态方法：校验手机的次数key，将手机号及对应的验证码放到redis中，设置过期时间</p><pre class="line-numbers language-none"><code class="language-none">public static void verifyCode(String phone, String code) &#123;    Jedis jedis &#x3D; new Jedis(&quot;192.168.199.129&quot;, 6379);    &#x2F;&#x2F;字符串拼接：手机发送次数的key    String countKey &#x3D; &quot;VerifyCode:&quot; + phone + &quot;:count&quot;;    &#x2F;&#x2F;字符串拼接：验证码的key    String verifyCode &#x3D; &quot;VerifyCode:&quot; + phone + &quot;:code&quot;;    String count &#x3D; jedis.get(countKey);    if (count &#x3D;&#x3D; null) &#123;        jedis.setex(countKey, 24*60*60,&quot;1&quot;);    &#125;else if (Integer.parseInt(count) &lt; 3) &#123;            jedis.setex(countKey, 24*60*60,Integer.parseInt(count)+1+&quot;&quot;);    &#125;else &#123;        System.out.println(&quot;请明日再试&quot;);        jedis.close();        return;    &#125;    &#x2F;&#x2F;验证码放入redis，设置过期时间为2分钟    jedis.setex(verifyCode,120, code);    jedis.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.静态方法：验证码校验</p><pre class="line-numbers language-none"><code class="language-none">public static void verifyCodeText(String phone,String code) &#123;    Jedis jedis &#x3D; new Jedis(&quot;192.168.199.129&quot;, 6379);    String verifyCode &#x3D; &quot;VerifyCode:&quot; + phone + &quot;:code&quot;;    String jCode &#x3D; jedis.get(verifyCode);    if (jCode.equals(code)) &#123;        System.out.println(&quot;登录成功&quot;);    &#125;else &#123;        System.out.println(&quot;登录失败&quot;);    &#125;    jedis.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    4.main方法：模拟页面消息</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) &#123;    &#x2F;&#x2F;模拟验证码发送    &#x2F;&#x2F;verifyCode(&quot;18778398791&quot;,getCode());    &#x2F;&#x2F;验证码校验    verifyCodeText(&quot;18778398791&quot;,&quot;515417&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Springboot整合redis"><a href="#6-Springboot整合redis" class="headerlink" title="6. Springboot整合redis"></a>6. Springboot整合redis</h3><h4 id="1-Spring-Data-Redis概述"><a href="#1-Spring-Data-Redis概述" class="headerlink" title="(1)Spring Data Redis概述"></a>(1)Spring Data Redis概述</h4><p>​    <strong>Spring Data Redis</strong> 是Spring大家族中的一个子项目，主要用于Spring程序和Redis的交互。它基于的Redis Java客户端（<a href="https://github.com/redis/jedis">Jedis</a>和<a href="https://lettuce.io/">Lettuce</a>）做了抽象，提供了一个统一的编程模型，使得Spring程序与Redis的交互变得十分简单</p><p>​    <strong>Spring Data Redis</strong> 中有一个十分重要的类——<code>RedisTemplate</code>，它封装了与Redis进行的交互的各种方法，我们主要用使用它与Redis进行交互</p><h4 id="2-Spring-Data-Redis快速入门"><a href="#2-Spring-Data-Redis快速入门" class="headerlink" title="(2)Spring Data Redis快速入门"></a>(2)Spring Data Redis快速入门</h4><h5 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h5><p>​    1.在pom.xml中导入redis依赖以及redis连接池的依赖(这个好像可选不加)</p><p>​    2.在application.properties文件中配置redis的配置</p><p>​    3.创建配置类RedisConfig.java，通过配置类来配置redis的高级用法（复杂场景需要：改序列化方式，Redis的高级都需要）</p><p>​    4.在RedisController.java编写redis使用的测试代码</p><h5 id="样例：Springboot整合redis"><a href="#样例：Springboot整合redis" class="headerlink" title="样例：Springboot整合redis"></a>样例：Springboot整合redis</h5><p>​    1.在pom.xml中导入redis依赖以及redis连接池的依赖</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;pom.xml&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;&lt;artifactId&gt;commons-pool2&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在application.properties文件中配置redis的配置</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;application.properties# Redis服务器地址spring.data.redis.host&#x3D;192.168.199.129# Redis服务器连接端口spring.data.redis.port&#x3D;6379# Redis数据库索引（默认为0）spring.data.redis.database&#x3D;0# Redis服务器连接密码（默认为空）spring.data.redis.password&#x3D;# 连接超时时间（单位毫秒）spring.data.redis.timeout&#x3D;5000# &#x3D;&#x3D;&#x3D; Lettuce 连接池配置 &#x3D;&#x3D;&#x3D;# 连接池中的最大连接数（使用负值表示没有限制）spring.data.redis.lettuce.pool.max-active&#x3D;8# 连接池中的最大空闲连接spring.data.redis.lettuce.pool.max-idle&#x3D;8# 连接池中的最小空闲连接spring.data.redis.lettuce.pool.min-idle&#x3D;0# 连接池最大阻塞等待时间（使用 Duration 格式，如 1s、2m）spring.data.redis.lettuce.pool.max-wait&#x3D;1s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.创建配置类RedisConfig.java（这个是固定的，不用自己写）</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;RedisConfig.java@Configuration@EnableCachingpublic class RedisConfig extends CachingConfigurerSupport &#123;    @Beanpublic RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;        RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate&lt;&gt;();        RedisSerializer&lt;String&gt; redisSerializer &#x3D; new StringRedisSerializer();        ObjectMapper om &#x3D; new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.activateDefaultTyping(                BasicPolymorphicTypeValidator.builder()                        .allowIfBaseType(Object.class)                        .build(),                ObjectMapper.DefaultTyping.NON_FINAL        );        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer &#x3D;                new Jackson2JsonRedisSerializer&lt;&gt;(om, Object.class);        template.setConnectionFactory(redisConnectionFactory);        template.setKeySerializer(redisSerializer);        template.setValueSerializer(jackson2JsonRedisSerializer);        template.setHashKeySerializer(redisSerializer);        template.setHashValueSerializer(jackson2JsonRedisSerializer);        template.afterPropertiesSet();        return template;    &#125;    @Bean    public CacheManager cacheManager(RedisConnectionFactory factory) &#123;        RedisSerializer&lt;String&gt; redisSerializer &#x3D; new StringRedisSerializer();        ObjectMapper om &#x3D; new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.activateDefaultTyping(                BasicPolymorphicTypeValidator.builder()                        .allowIfBaseType(Object.class)                        .build(),                ObjectMapper.DefaultTyping.NON_FINAL        );        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer &#x3D;                new Jackson2JsonRedisSerializer&lt;&gt;(om, Object.class);        RedisCacheConfiguration config &#x3D; RedisCacheConfiguration.defaultCacheConfig()                .entryTtl(Duration.ofSeconds(600)) &#x2F;&#x2F; 默认缓存时间                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))                .disableCachingNullValues();        return RedisCacheManager.builder(factory)                .cacheDefaults(config)                .build();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    4.在RedisController.java编写redis使用的测试代码</p><p>​    注意：由于<code>spring-boot-starter-data-redis</code>中提供了<code>RedisTemplate</code>的自动配置，所以可以将<code>RedisTemplate</code>直接注入自己的类中</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;RedisController.java@RestControllerpublic class RedisController &#123;    @Autowired    private RedisTemplate redisTemplate;    @GetMapping(&quot;&#x2F;redis&quot;)    public String data()&#123;        redisTemplate.opsForValue().set(&quot;name&quot;,&quot;张三&quot;);        String o &#x3D; (String) redisTemplate.opsForValue().get(&quot;name&quot;);        return o;  &#x2F;&#x2F;页面显示张三    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-RedisTemplate的常用交互方式"><a href="#3-RedisTemplate的常用交互方式" class="headerlink" title="(3)RedisTemplate的常用交互方式"></a>(3)RedisTemplate的常用交互方式</h4><p>​    根据Redis的数据类型，RedisTemplate对各种交互方法做了分组，以下是常用的几个分组</p><table><thead><tr><th align="left">分组</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>redisTemplate.opsForValue()</code></td><td align="left">操作string类型的方法</td></tr><tr><td align="left"><code>redisTemplate.opsForList()</code></td><td align="left">操作list类型的方法</td></tr><tr><td align="left"><code>redisTemplate.opsForSet()</code></td><td align="left">操作set类型的方法</td></tr><tr><td align="left"><code>redisTemplate.opsForHash()</code></td><td align="left">操作hash类型的方法</td></tr><tr><td align="left"><code>redisTemplate.opsForZSet()</code></td><td align="left">操作zset类型的方法</td></tr><tr><td align="left"><code>redisTemplate</code></td><td align="left">通用方法</td></tr></tbody></table><h4 id="4-RedisTemplate的序列化问题"><a href="#4-RedisTemplate的序列化问题" class="headerlink" title="(4)RedisTemplate的序列化问题"></a>(4)RedisTemplate的序列化问题</h4><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>​    在Redis中的key和value均是以二进制的形式存储的，因此客户端输入的key和value都会经过序列化之后才发往Redis服务端。而RedisTemplate所使用序列化方式和命令行客户端采用序列化方式不相同，进而导致序列化之后的二进制数据不同，此时就无法互通，即RedisTemplate存入的数据，在Redis客户端中无法正确读取</p><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>​    通过定义配置类，设置RedisTemplate的序列化方式解决以上问题，偷懒可以使用StringRedisTemplate，直接注入使用即可</p><h5 id="RedisTemplate-和-StringRedisTemplate-的序列化器区别："><a href="#RedisTemplate-和-StringRedisTemplate-的序列化器区别：" class="headerlink" title="RedisTemplate 和 StringRedisTemplate 的序列化器区别："></a>RedisTemplate 和 StringRedisTemplate 的序列化器区别：</h5><ul><li><code>RedisTemplate&lt;Object, Object&gt;</code> 默认使用的是 <strong>JDK 序列化器</strong>，可以存任意类型的对象，但存入的数据是二进制格式，Redis客户端中（使用redis-cli等）不可读，但程序不影响</li><li><code>StringRedisTemplate</code> 是 <code>RedisTemplate&lt;String, String&gt;</code> 的封装，<strong>专门为操作字符串类型的 key 和 value 而设计</strong>，使用的是 <code>StringRedisSerializer</code>，存入的数据是纯字符串格式，Redis客户端中（使用redis-cli等）可读</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http全-http协议的内容与通信方式详解</title>
      <link href="/2025/03/16/http%E5%85%A8-http%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%86%85%E5%AE%B9%E4%B8%8E%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/03/16/http%E5%85%A8-http%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%86%85%E5%AE%B9%E4%B8%8E%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-HTTP协议"><a href="#1-HTTP协议" class="headerlink" title="1. HTTP协议"></a>1. HTTP协议</h3><p>​    HTTP协议即按一定规则，向服务器要数据或发送数据，而服务器按一定规则回应数据</p><p>​    HTTP协议主要约定了<code>请求</code> 和<code>响应</code></p><h3 id="2-HTTP的连接"><a href="#2-HTTP的连接" class="headerlink" title="2. HTTP的连接"></a>2. HTTP的连接</h3><p>​    0：原始状态，客户端和服务器未连接</p><p>​    1：客户端向服务器发送请求</p><p>​    2：服务器沿着连接响应信息</p><p>​    3：客户端将收到的内容显示，过了几秒后双方断开连接</p><p><a href="https://imgse.com/i/pAgp8FH"><img src="https://s21.ax1x.com/2024/11/13/pAgp8FH.png" alt="http头信息"></a></p><h3 id="3-http请求信息和响应信息的格式"><a href="#3-http请求信息和响应信息的格式" class="headerlink" title="3. http请求信息和响应信息的格式"></a>3. http请求信息和响应信息的格式</h3><h4 id="1-使用telnet模拟HTTP请求（GET）"><a href="#1-使用telnet模拟HTTP请求（GET）" class="headerlink" title="(1)使用telnet模拟HTTP请求（GET）"></a>(1)使用telnet模拟HTTP请求（GET）</h4><p><a href="https://imgse.com/i/pAgEvY8"><img src="https://s21.ax1x.com/2024/11/13/pAgEvY8.png" alt="HTTP的GET请求"></a></p><h5 id="请求报文："><a href="#请求报文：" class="headerlink" title="请求报文："></a>请求报文：</h5><p>​    (1)请求行</p><p>​    (2)请求头信息</p><p>​    (3)空行</p><p>​    (4)请求主体信息(可以没有)</p><p>​    <strong>注意：头信息结束后要空一行，如果请求有主体信息需要配置请求的Content-Length，告知主体信息长度，然后空一行写主体信息</strong></p><h5 id="请求行详解"><a href="#请求行详解" class="headerlink" title="请求行详解"></a>请求行详解</h5><p>​    请求行包括</p><p>​    1.请求方法(GET)：还有（GET|POST|PUT|DELETE|TRACE|OPTIONS）</p><p>​    2.请求路径(/0606/01.php) ：是URL的一部分</p><p>​    3.所用协议(HTTP/1.1)：HTTP协议1.0，0.9基本没人用了</p><p>​    注意：这些请求方法虽然HTTP协议规定，但WEB SERVER未必允许或支持这些方法</p><h5 id="响应报文："><a href="#响应报文：" class="headerlink" title="响应报文："></a>响应报文：</h5><p>​    (1)响应行(协议 状态码 状态文字)</p><p>​    (2)响应头信息(格式为 key：value)（可能有多行）</p><p>​    (3)空行</p><p>​    (4)主体信息(可能没有)：响应返回的结果一般是html</p><h5 id="练习结果："><a href="#练习结果：" class="headerlink" title="练习结果："></a>练习结果：</h5><p><a href="https://blog.csdn.net/qq_45495315/article/details/143746783?spm=1001.2014.3001.5501">telnet的发送HTTP请求的使用-CSDN博客</a></p><p><a href="https://imgse.com/i/pAgeEzF"><img src="https://s21.ax1x.com/2024/11/13/pAgeEzF.png" alt="通过5500端口访问"></a></p><h4 id="2-发送请求时同时要发送数据给服务器-POST"><a href="#2-发送请求时同时要发送数据给服务器-POST" class="headerlink" title="(2)发送请求时同时要发送数据给服务器(POST)"></a>(2)发送请求时同时要发送数据给服务器(POST)</h4><p>​    一般在输入完<code>Host：localhost</code>后，就会向服务器发送请求，如果要发送数据的话，需要对请求做如下修改，且集中粘贴过去</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;0606&#x2F;02.php HTTP&#x2F;1.1Host:localhostContent-type:application&#x2F;x-www-form-urlencoded   &#x2F;&#x2F;告诉服务器会发送POST的数据包，没有此行服务器无法正确接受数据Content-length:23  &#x2F;&#x2F;告诉服务器请求主体的长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    运行图示</p><p><a href="https://imgse.com/i/pAg1Lid"><img src="https://s21.ax1x.com/2024/11/13/pAg1Lid.png" alt="POST请求"></a></p><h3 id="4-状态码，状态文字"><a href="#4-状态码，状态文字" class="headerlink" title="4. 状态码，状态文字"></a>4. 状态码，状态文字</h3><p>​    状态码是用来反应服务器响应情况的，状态文字是用来描述状态码，便于人观察的</p><h4 id="1-状态码一共有5个系列，不用一个一个背"><a href="#1-状态码一共有5个系列，不用一个一个背" class="headerlink" title="(1)状态码一共有5个系列，不用一个一个背"></a>(1)状态码一共有5个系列，不用一个一个背</h4><table><thead><tr><th>状态码</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td>1XX</td><td>信息</td><td>接收到请求，继续处理</td></tr><tr><td>2XX</td><td>成功</td><td>操作成功地收到，理解和接受</td></tr><tr><td>3XX</td><td>重定向</td><td>为了完成请求，必须采取进一步措施</td></tr><tr><td>4XX</td><td>客户端错误</td><td>请求的语法有错误或不能完全被满足</td></tr><tr><td>5XX</td><td>服务端错误</td><td>服务器无法完成明显有效的请求</td></tr></tbody></table><p>​    1XX：是给HTTP留着以后扩展用的</p><h5 id="常见的状态码-背-："><a href="#常见的状态码-背-：" class="headerlink" title="常见的状态码(背)："></a>常见的状态码(背)：</h5><ul><li><p>200  -  服务器成功返回网页（请求成功），在Spring中被用作数据成功返回</p></li><li><p>301/2  -  永久/临时<u>重定向</u>(服务器内部跳转)</p><p>重定向的响应中有(Location)的属性来定位重定向的网页是谁</p></li><li><p>304  -  未修改（Not Modified），取的是缓存，多次加载同一界面会出现</p><p>通过客户端向服务器发送时间锉信息和标签(第一次请求获得的响应)看时间是否过期，标签是否修改</p></li><li><p>307  -  重定向中保护原有的请求数据</p><p>发送POST数据到05.php，05.php重定向到06.php显示数据，如果用301/2数据会丢失，但307可以保护数据，确保数据在06.php正常显示</p></li><li><p>404  -  请求的网页不存在</p></li><li><p>503  -  服务器暂时不可用</p></li><li><p>500  -  服务器内部错误</p></li></ul><h3 id="5-HTTP和TCP（面试题）"><a href="#5-HTTP和TCP（面试题）" class="headerlink" title="5. HTTP和TCP（面试题）"></a>5. HTTP和TCP（面试题）</h3><p>​    HTTP是半双工的，TCP是全双工的，浏览器若需要打游戏需要使用全新的WebSocket来进行连接，第一次三次握手时，浏览器发送的是普通的HTTP请求，若要建立WebSocket需要在HTTP请求中带特殊的head头</p><p>​    HTTP协议是基于TCP实现的</p><h3 id="6-HTTP请求在浏览器的查看"><a href="#6-HTTP请求在浏览器的查看" class="headerlink" title="6. HTTP请求在浏览器的查看"></a>6. HTTP请求在浏览器的查看</h3><p>​    浏览器的核心功能之一就是发起 HTTP 请求并解析响应</p><p>​    以打开百度搜索“刘大爷”为例</p><p><a href="https://imgse.com/i/pEZpqbR"><img src="https://s21.ax1x.com/2025/01/31/pEZpqbR.png" alt="使用浏览器发送HTTP"></a></p><p>​    <strong>注意：请求体信息是在与Request Headers同级的叫Form Data中</strong></p><h3 id="7-用户身份认证和状态保持"><a href="#7-用户身份认证和状态保持" class="headerlink" title="7. 用户身份认证和状态保持"></a>7. 用户身份认证和状态保持</h3><p>​    <code>Cookie</code>、<code>Session</code> 和 <code>Token</code> 都是用于管理用户身份认证和状态保持</p><table><thead><tr><th align="center">方案</th><th align="center">存储位置</th><th align="center">状态管理</th><th align="center">适用场景</th><th align="center">优缺点</th></tr></thead><tbody><tr><td align="center">Cookie</td><td align="center">浏览器（客户端的一种）</td><td align="center">有状态</td><td align="center">记录小型用户信息</td><td align="center">易受攻击，大小受限</td></tr><tr><td align="center">Session</td><td align="center">服务器</td><td align="center">有状态</td><td align="center">适合中小型系统</td><td align="center">服务器内存占用大</td></tr><tr><td align="center">Token (JWT)</td><td align="center">客户端（任何能发http的应用）</td><td align="center">无状态</td><td align="center">前后端分离、微服务</td><td align="center">无法主动销毁，易泄露</td></tr></tbody></table><p>​    注意：有状态和无状态，主要指的是服务器是否需要记住客户端的信息，<strong>HTTP请求本身是无状态的</strong></p><h4 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="(1)Cookie"></a>(1)Cookie</h4><p>​    <code>Cookie 是实现每次HTTP请求都自动带数据给服务器的技术</code>，它也是存储在浏览器端的一小段数据。<strong>等于有两个功能，一个是存储，另一个的发送HTTP自动携带这些数据</strong>。图如下所示</p><p><a href="https://imgse.com/i/pEajRZd"><img src="https://s21.ax1x.com/2025/03/16/pEajRZd.png" alt="Cookie"></a></p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>存储在浏览器中，打开浏览器可直接查看</li><li>安全性较低，容易被劫持</li></ul><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>存储简单的状态信息（如用户偏好）</li></ul><h4 id="2-Session"><a href="#2-Session" class="headerlink" title="(2)Session"></a>(2)Session</h4><p>​    <code>Session</code> 存储在服务器端。用户第一次访问服务器时，携带账号密码进行登录，服务器验证通过后，会生成一个 SessionID（随机字符串）和 Session 数据，并设定有效期，然后通过 <strong>Cookie</strong> 将 SessionID 发送给客户端。客户端会<strong>自动存储这个 Cookie</strong>，之后的请求无需再输入密码，而是用Cookie携带 SessionID发送。服务器收到请求后，通过 <strong>SessionID</strong> 查找对应的 Session 数据，确定用户身份。图如下所示</p><p><a href="https://imgse.com/i/pEavCyF"><img src="https://s21.ax1x.com/2025/03/16/pEavCyF.png" alt="Session"></a></p><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul><li>存储在服务器上</li><li>需要 <code>Cookie</code> 或 URL 传递 <code>SessionID</code></li><li>生命周期：默认情况下，<code>Session</code> 在用户关闭浏览器后会失效（但可以配置 <code>Session Timeout</code>）</li></ul><h5 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>用户登录状态管理（适用于小规模应用，不适用微服务）</li><li>存储临时的用户信息（如购物车）</li></ul><h4 id="3-Token（JWT）"><a href="#3-Token（JWT）" class="headerlink" title="(3)Token（JWT）"></a>(3)Token（JWT）</h4><p>​    多服务器的条件下Session已经不再适用，当客户端发送密码后，服务器端生成<code>JWT</code>（服务器不保存），只保存JWT的密文，然后将JWT发送给客户端，用Cookie存储，再次请求服务器时，只需要发送JWT，与Session类似。图如下所示</p><p><a href="https://imgse.com/i/pEajYMF"><img src="https://s21.ax1x.com/2025/03/16/pEajYMF.png" alt="Token"></a></p><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><ul><li>不需要服务器存储状态（无状态）</li><li>可以跨域、适用于微服务架构</li><li>一般存储在 <code>LocalStorage</code> 或 <code>Cookie</code> 中</li></ul><h5 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>前后端分离的身份认证</li><li>移动端登录</li><li>微服务架构</li></ul><h4 id="4-开发中的选择"><a href="#4-开发中的选择" class="headerlink" title="(4)开发中的选择"></a>(4)开发中的选择</h4><p>​    1.小型项目（单体应用）<br>​             → Session + Cookie（简单好用）</p><p>​    2.前后端分离<br>​             → Token（JWT）+ <code>Authorization: Bearer token</code></p><p>​    3.需要支持分布式（多个服务器）<br>​             → Redis 共享 Session 或 Token 方案</p>]]></content>
      
      
      
        <tags>
            
            <tag> Web开发协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue笔记的代码补充01-子传父props方式</title>
      <link href="/2025/02/10/Vue%E7%AC%94%E8%AE%B0%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%8501-%E5%AD%90%E4%BC%A0%E7%88%B6props%E6%96%B9%E5%BC%8F/"/>
      <url>/2025/02/10/Vue%E7%AC%94%E8%AE%B0%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%8501-%E5%AD%90%E4%BC%A0%E7%88%B6props%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="组件数据直接传递方式-子传父props方式"><a href="#组件数据直接传递方式-子传父props方式" class="headerlink" title="组件数据直接传递方式-子传父props方式"></a>组件数据直接传递方式-子传父props方式</h3><p>​    以下代码，通过传递父组件的addTodoObj()方法，用子组件接收并调用该方法，通过该方法将子组件的数据传给父组件实现todos的增加</p><h4 id="1-父组件App-vue"><a href="#1-父组件App-vue" class="headerlink" title="(1)父组件App.vue"></a>(1)父组件App.vue</h4><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div id&#x3D;&quot;root&quot;&gt;    &lt;div&gt;      &lt;div&gt;      &lt;!-- 把方法传递给MyHeader组件 --&gt;        &lt;MyHeader :addTodoObj&#x3D;&quot;addTodoObj&quot;&#x2F;&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;&#x2F;&#x2F;导入组件import MyHeader from &#39;.&#x2F;components&#x2F;MyHeader.vue&#39;;export default &#123;  name: &#39;App&#39;,  components: &#123;    MyHeader,  &#125;,  data()&#123;      return&#123;          todos:[          &#123;&#39;001&#39;,&#39;看书&#39;,false&#125;,          &#123;&#39;002&#39;,&#39;学习&#39;,true&#125;,          &#123;&#39;003&#39;,&#39;跳绳&#39;,true&#125;,          ]      &#125;  &#125;,  methods:&#123;    addTodoObj(todoObj)&#123;      this.todos.unshift(todoObj)    &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-子组件MyHeader-vue"><a href="#2-子组件MyHeader-vue" class="headerlink" title="(2)子组件MyHeader.vue"></a>(2)子组件MyHeader.vue</h4><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;div&gt;        &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入你的任务名称，按回车键确认&quot; @keydown.enter&#x3D;&quot;add&quot;&#x2F;&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; nanoid &#125; from &#39;nanoid&#39;;    export default &#123;        name:&#39;MyHeader&#39;,        methods:&#123;            add(e)&#123;                &#x2F;&#x2F;校验数据不能为空                if(!e.target.value) return alert(&quot;输入不能为空&quot;)                &#x2F;&#x2F;封装对象                                const todoObj &#x3D; &#123;                &#x2F;&#x2F;nanoid是一个轻量化自动生成id的工具                    id:nanoid(),                    title:e.target.value.trim(),                    done:false                &#125;                this.addTodoObj(todoObj)                &#x2F;&#x2F;清空输入栏                e.target.value &#x3D; &#39;&#39;            &#125;        &#125;,        &#x2F;&#x2F;使用props接受父组件提供的方法        props:[&#39;addTodoObj&#39;]    &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vue代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高级03-模块化</title>
      <link href="/2025/01/12/JS%E9%AB%98%E7%BA%A703-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2025/01/12/JS%E9%AB%98%E7%BA%A703-%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="1-模块化"><a href="#1-模块化" class="headerlink" title="1. 模块化"></a>1. 模块化</h3><p>​    将程序文件依据一定规则拆分为多个文件，每一个文件为一个模块，模块中的数据是私有的，模块之间相互隔离，但可以把模块内的指定数据交出去，供其他模块使用</p><h4 id="1-模块化会遇到的问题"><a href="#1-模块化会遇到的问题" class="headerlink" title="(1)模块化会遇到的问题"></a>(1)模块化会遇到的问题</h4><ul><li><p>全局污染(命名冲突)问题：</p><p>引入js 模块时，若有声明同名的方法，后面的会把前面的给覆盖掉</p></li><li><p>依赖混乱问题：</p><p>引入js模块时，有些要先执行，如果引入顺序错误会使得代码无法正常运行</p></li><li><p>数据安全问题：</p><p>数据没有进行封装，仅暴露接口函数，但实际上获得对象时，所有数据都已经获得</p></li></ul><p>​    使用模块化规范会解决上述的所有问题，全局污染问题详细阅读整个blog；依赖混乱问题，通过模块化使得模块之间呈树状结构所以不会混乱；数据安全问题，因为模块化规范是暴露的方式获得数据，所以不存在数据安全问题</p><h4 id="2-JS的模块化规范有哪些"><a href="#2-JS的模块化规范有哪些" class="headerlink" title="(2)JS的模块化规范有哪些"></a>(2)JS的模块化规范有哪些</h4><ul><li>CommonJS(ServerJS) ——-服务端应用广泛</li><li>ES6模块化 ——–浏览器端应用广泛</li></ul><h4 id="3-导入与导出"><a href="#3-导入与导出" class="headerlink" title="(3)导入与导出"></a>(3)导入与导出</h4><p>​    模块之间是隔离的，通过导入和导出进行数据和功能的共享</p><ul><li>导出**(暴露)**：模块公开其内部的一部分（如变量、函数等），使这些内容可以被其他模块使用</li><li>导入(引入)：模块引入和使用其他模块导出的内容，以重用代码和功能</li></ul><h5 id=""><a href="#" class="headerlink" title=""></a><a href="https://imgse.com/i/pEPPlsP"><img src="https://s21.ax1x.com/2025/01/10/pEPPlsP.png" alt="导入和导出"></a></h5><h3 id="2-CommonJS的模块化规范"><a href="#2-CommonJS的模块化规范" class="headerlink" title="2. CommonJS的模块化规范"></a>2. CommonJS的模块化规范</h3><p>​    双端都可以使用，但是一般使用在Node.js编写服务器</p><p>​    <code>注意不是在浏览器，this不指向window，它指向模块的exports对象</code></p><p>​    <strong>面试题：</strong><code>注意：CommonJS的模块化规范导入的数据/方法是原先的复制品，与原先的js文件的内容没有半毛钱关系</code></p><p>​    <a href="https://imgse.com/i/pEPDJ7n"><img src="https://s21.ax1x.com/2025/01/12/pEPDJ7n.png" alt="面试题"></a></p><p>​    输出：</p><pre class="line-numbers language-none"><code class="language-none">11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-CommonJS模块化语法"><a href="#1-CommonJS模块化语法" class="headerlink" title="(1)CommonJS模块化语法"></a>(1)CommonJS模块化语法</h4><h5 id="导入语法："><a href="#导入语法：" class="headerlink" title="导入语法："></a>导入语法：</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;在index.js中导入test.js模块const obj &#x3D; require(&#39;.&#x2F;test.js&#39;)console.log(obj)&#x2F;&#x2F;当然可以在赋值后马上解构：const &#123;name,getTel&#125; &#x3D; require(&#39;.&#x2F;test.js&#39;)&#x2F;&#x2F;注意：函数解构时不需要括号，调用时再加括号&#x2F;&#x2F;console.log(getTel())&#x2F;&#x2F;注意：如果解构的命名有冲突，则需要es6的加重命名&#x2F;&#x2F;const &#123;name:schoolName,age&#125; &#x3D; require(&#39;.&#x2F;school.js&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：如果test.js文件不主动暴露那么接受到的是一个空对象</strong></p><hr><h5 id="导出-暴露-语法：（第一种方式）"><a href="#导出-暴露-语法：（第一种方式）" class="headerlink" title="导出(暴露)语法：（第一种方式）"></a>导出(暴露)语法：（第一种方式）</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;test.jsconst name &#x3D; &#39;刘大业&#39;function getTel()&#123;return &#39;18899998888&#39;&#125;&#x2F;&#x2F;私有不暴露function getJob()&#123;return &#39;京东&#39;&#125;&#x2F;&#x2F;暴露语法：module.exports &#x3D; &#123;name:name  &#x2F;&#x2F;es6新语法直接写namegetTel  &#x2F;&#x2F;es6新语法&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导出-暴露-语法：（第二种方式）"><a href="#导出-暴露-语法：（第二种方式）" class="headerlink" title="导出(暴露)语法：（第二种方式）"></a>导出(暴露)语法：（第二种方式）</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;test.jsconst name &#x3D; &#39;刘大业&#39;function getTel()&#123;return &#39;18899998888&#39;&#125;&#x2F;&#x2F;私有不暴露function getJob()&#123;return &#39;京东&#39;&#125;&#x2F;&#x2F;暴露语法：exports.name &#x3D; name &#x2F;&#x2F;这里是把name赋值给exports.name，在CommonJS模块化中this.name完全等价于exports.nameexports.getTel &#x3D; getTel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-核心注意点"><a href="#2-核心注意点" class="headerlink" title="(2)核心注意点"></a>(2)核心注意点</h4><h5 id="注意点1"><a href="#注意点1" class="headerlink" title="注意点1"></a>注意点1</h5><p>​    在CommonJS模块化中，会为每一个JS文件准备一个空对象。每个模块(JS文件)的内部的：this、exports、modules.exports在初始化时都指向这个空对象，该空对象就是当前模块导出的数据</p><p>​    <a href="https://imgse.com/i/pEPiSw8"><img src="https://s21.ax1x.com/2025/01/10/pEPiSw8.png" alt="指向空对象"></a></p><h5 id="注意点2"><a href="#注意点2" class="headerlink" title="注意点2"></a>注意点2</h5><p>​    无论如何修改导出对象，最终导出的都是module.exports指向的值，即如果你没有对 <code>module.exports</code> 重新赋值，使用 <code>exports</code> 或 <code>module.exports</code> 添加的属性都能成功导出，如果修改了就按module.exports指向的值导出</p><p>​    <strong>范例1：面试题</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;test.js的内容exports &#x3D; &#123;a:1&#125;exports.b &#x3D; 2module.exports.c &#x3D; 3module.exports &#x3D; &#123;d:4&#125;&#x2F;&#x2F;main.js导入test.js并输出对象的结果const a &#x3D; require(&#39;.&#x2F;test.js&#39;)console.log(a)&#x2F;&#x2F;运行结果&#x2F;&#x2F;&#123; d:4 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    图示：黄色框为默认的空对象，第一步把exports指向{a:1}，第二步将b=2添加到exports所指向的对象，第三步把c=3放入空对象，第四步将module.exports指向一个新对象{d:4}</p><p><a href="https://imgse.com/i/pEPimwT"><img src="https://s21.ax1x.com/2025/01/10/pEPimwT.png" alt="注意点2"></a></p><p>​    范例2：</p><p>​    <strong>在没有修改 <code>module.exports</code> 的引用时</strong>，<code>exports</code> 和 <code>module.exports</code> 是同一个对象，因此通过 <code>exports</code> 和 <code>module.exports</code> 都可以向同一个对象添加属性。最终导出的是 <code>module.exports</code> 对象的内容</p><pre class="line-numbers language-none"><code class="language-none">exports.name &#x3D; &#39;John&#39;;module.exports.age &#x3D; 18;&#x2F;&#x2F;导出的是&#123;name:&#39;John&#39;,age:18&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="注意点3"><a href="#注意点3" class="headerlink" title="注意点3"></a>注意点3</h5><p>​    exports是对module.exports的<u>初始引用</u>(指向同一空对象)，仅为了方便给导出对象添加属性，所以不能使用exports = value 的形式导出数据，如果这样写会改变exports的指向（细节见上图）</p><h4 id="3-扩展理解：为什么模块之间是隔离的"><a href="#3-扩展理解：为什么模块之间是隔离的" class="headerlink" title="(3)扩展理解：为什么模块之间是隔离的"></a>(3)扩展理解：为什么模块之间是隔离的</h4><p>​    在CommonJS中，每一个写的JS文件的所有内容，在执行时已经被一个内置函数包起来了，所有写的代码都成为了这个函数的函数体，<strong>即形成了一个作用域</strong></p><p>​    内置函数如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;在test.js编写...console.log(arguments.callee.toString())&#x2F;&#x2F;在main.js引入test.js，并运行&#x2F;&#x2F;运行结果function(exports,require,module,__filename,__dirname)&#123;&#x2F;*test.js文件所有的内容*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-Commonjs在浏览器运行"><a href="#4-Commonjs在浏览器运行" class="headerlink" title="(4)Commonjs在浏览器运行"></a>(4)Commonjs在浏览器运行</h4><p>​    Node.js支持CommonJS但是浏览器不支持，直接导入到html页面运行会缺少参数<code>require</code>(见上面那个内置函数)，需要下载一个翻译官–browserify</p><h5 id="安装browserify"><a href="#安装browserify" class="headerlink" title="安装browserify"></a>安装browserify</h5><ul><li><p>第一步：全局安装browserify：<code>npm i browserify -g</code></p></li><li><p>第二步：编译：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;备注：main.js是源文件，build.js是输出的目标文件browserify main.js -o build.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>第三步：index.html页面中引入使用这个js</p><pre class="line-numbers language-none"><code class="language-none">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;.&#x2F;build.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-ES6的模块化规范-官方标准"><a href="#3-ES6的模块化规范-官方标准" class="headerlink" title="3. ES6的模块化规范(官方标准)"></a>3. ES6的模块化规范(官方标准)</h3><p>​    几乎所有的前端项目，只要用了脚手架就是在使用ES6的模式在写，它是目前最流行的模块化规范，同时<strong>ES6也是支持浏览器端和服务端，但其默认不支持服务器</strong></p><p>​    <strong>面试题：</strong><code>注意：ES6的模块化规范导入的数据/方法是原先的公用一块内存，只读不可改，这个是和CommonJS不一样的地方</code></p><p>​    <a href="https://imgse.com/i/pEPDG0s"><img src="https://s21.ax1x.com/2025/01/12/pEPDG0s.png" alt="面试题"></a></p><p>​    输出：</p><pre class="line-numbers language-none"><code class="language-none">13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-ES6模块化语法"><a href="#1-ES6模块化语法" class="headerlink" title="(1)ES6模块化语法"></a>(1)ES6模块化语法</h4><p>​    <strong>注意：三种导出方式可以同时使用</strong></p><h5 id="导出语法：分别导出（第一种方式）"><a href="#导出语法：分别导出（第一种方式）" class="headerlink" title="导出语法：分别导出（第一种方式）"></a>导出语法：分别导出（第一种方式）</h5><p>​    谁要导出就在谁前面加export</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;test.js&#x2F;&#x2F;导出属性export const name &#x3D; &#39;刘大业&#39;&#x2F;&#x2F;导出方法export function getTel()&#123;return &#39;18899998888&#39;&#125;&#x2F;&#x2F;私有不暴露function getJob()&#123;return &#39;京东&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导出语法：统一导出（第二种方式）"><a href="#导出语法：统一导出（第二种方式）" class="headerlink" title="导出语法：统一导出（第二种方式）"></a>导出语法：统一导出（第二种方式）</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;test.jsconst name &#x3D; &#39;刘大业&#39;function getTel()&#123;return &#39;18899998888&#39;&#125;&#x2F;&#x2F;私有不暴露function getJob()&#123;return &#39;京东&#39;&#125;&#x2F;&#x2F;统一导出：&#123;&#125;不是对象，是类似对象的方式，本质是一个标记export&#123;name,getTel&#125; &#x2F;&#x2F;因为不是对象不能写成name:name,getTel:getTel这种形式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导出语法：默认导出（第三种方式）"><a href="#导出语法：默认导出（第三种方式）" class="headerlink" title="导出语法：默认导出（第三种方式）"></a>导出语法：默认导出（第三种方式）</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;test.jsconst name &#x3D; &#39;刘大业&#39;function getTel()&#123;return &#39;18899998888&#39;&#125;&#x2F;&#x2F;私有不暴露function getJob()&#123;return &#39;京东&#39;&#125;&#x2F;&#x2F;默认导出：只有一组值&#x2F;&#x2F;导出对象只有&#123;default:900&#125;export default 900&#x2F;*&#x2F;&#x2F;导出对象为&#123;default:&#39;刘大业&#39;&#125;export default name*&#x2F;&#x2F;*&#x2F;&#x2F;导出多个的操作，导出对象为default:Objectexport default &#123;name:name  &#x2F;&#x2F;es6简写为namegetTel:getTel &#x2F;&#x2F;es6简写为getTel&#125;*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>​    <strong>注意：命名导入和默认导入可以同时使用</strong>：<code>import xyz,&#123;name,getTel&#125; from &#39;./test.js&#39;</code></p><h5 id="导入语法：万能语法，不管用什么导出方式都能接住（第一种方式）"><a href="#导入语法：万能语法，不管用什么导出方式都能接住（第一种方式）" class="headerlink" title="导入语法：万能语法，不管用什么导出方式都能接住（第一种方式）"></a>导入语法：万能语法，不管用什么导出方式都能接住（第一种方式）</h5><p>​    命名和分别导入、导出的值都一样，但是使用默认导出接到的值是<code>default:obj</code>，obj是一个对象，obj里面是默认导出的内容</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;index.jsimport * as test1 from &#39;.&#x2F;test.js&#39;console.log(test1)&#x2F;&#x2F;该文件需要放入浏览器中执行，所以需要引入到一个页面然后执行该页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导入语法：命名导入，适用【分别导出、统一导出】（第二种方式）"><a href="#导入语法：命名导入，适用【分别导出、统一导出】（第二种方式）" class="headerlink" title="导入语法：命名导入，适用【分别导出、统一导出】（第二种方式）"></a>导入语法：命名导入，适用【分别导出、统一导出】（第二种方式）</h5><p>​    若命名冲突需要起别名如：<code>import &#123;name as SchoolName,getTel&#125; from &#39;./test.js&#39;</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;index.jsimport &#123;name,getTel&#125; from &#39;.&#x2F;test.js&#39;console.log(name)console.log(getTel())&#x2F;&#x2F;该文件需要放入浏览器中执行，所以需要引入到一个页面然后执行该页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导入语法：默认导入，适用【默认导出】（第三种方式）"><a href="#导入语法：默认导入，适用【默认导出】（第三种方式）" class="headerlink" title="导入语法：默认导入，适用【默认导出】（第三种方式）"></a>导入语法：默认导入，适用【默认导出】（第三种方式）</h5><p>​    只要使用了默认导出，在导入时可以随便拿一个变量进行接收，接收的变量获得的是<code>default:obj</code>中的<code>obj</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;index.js&#x2F;&#x2F;qwe是随意起的名，适用默认导出import qwe from &#39;.&#x2F;test.js&#39;console.log(qwe)  &#x2F;&#x2F;运行结果：&#123;900&#125;&#x2F;&#x2F;该文件需要放入浏览器中执行，所以需要引入到一个页面然后执行该页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导入语法：动态导入，不管用什么导出方式都能接住（第四种方式）"><a href="#导入语法：动态导入，不管用什么导出方式都能接住（第四种方式）" class="headerlink" title="导入语法：动态导入，不管用什么导出方式都能接住（第四种方式）"></a>导入语法：动态导入，不管用什么导出方式都能接住（第四种方式）</h5><p>​    在某一个特殊时间点：如点按钮、时间到了等，导入模块进行介入</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;index.html&lt;body&gt;&lt;!-- 模块化导入语法 --&gt;&lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;.&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;&lt;button id&#x3D;&quot;btn&quot;&gt;导入模块&lt;&#x2F;button&gt;&lt;&#x2F;body&gt;&#x2F;&#x2F;index.jsconst btn &#x3D; document.getElementById(&#39;btn&#39;)&#x2F;&#x2F;这里看不懂async和await的话blog里搜ES8特性btn.onclick &#x3D; async()&#x3D;&gt;&#123;const result &#x3D; await import(&#39;.&#x2F;student.js&#39;)console.log(result)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="导入语法：import不接受任何数据（第五种方式）"><a href="#导入语法：import不接受任何数据（第五种方式）" class="headerlink" title="导入语法：import不接受任何数据（第五种方式）"></a>导入语法：import不接受任何数据（第五种方式）</h5><p>​    适用于每次启动就打印日志等行为</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;log.jsconsole.log(Math.random())&#x2F;&#x2F;index.jsimport &#39;.&#x2F;log.js&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-浏览器中运行ES6模块"><a href="#2-浏览器中运行ES6模块" class="headerlink" title="(2)浏览器中运行ES6模块"></a>(2)浏览器中运行ES6模块</h4><p>​    不写模块化导入语法浏览器无法正常执行</p><h5 id="浏览器运行：需要写模块化导入语法"><a href="#浏览器运行：需要写模块化导入语法" class="headerlink" title="浏览器运行：需要写模块化导入语法"></a>浏览器运行：需要写模块化导入语法</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;index.html&lt;body&gt;&lt;!-- 传统导入js的方式 这里不行&lt;script type&#x3D;&quot;text&#x2F;javasctipt&quot; src&#x3D;&quot;&quot;&gt;&lt;&#x2F;script&gt; -- &gt;&lt;!-- 模块化导入语法 --&gt;&lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;.&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>使用<code>module</code>关键字后，所有导出的字段在全局是搜索不到的，如果用text那么全局是搜索的到的</strong></p><h4 id="3-Node-服务器-中运行ES6模块"><a href="#3-Node-服务器-中运行ES6模块" class="headerlink" title="(3)Node(服务器)中运行ES6模块"></a>(3)Node(服务器)中运行ES6模块</h4><p>​    需要Node版本12及以上</p><h5 id="第一种方法：把所有模块化的js文件改名为mjs"><a href="#第一种方法：把所有模块化的js文件改名为mjs" class="headerlink" title="第一种方法：把所有模块化的js文件改名为mjs"></a>第一种方法：把所有模块化的js文件改名为mjs</h5><p>​    最后运行那个导入了模块的mjs文件，如上面那个test.js和index.js都改名为test.mjs和index.mjs，用Node运行index.mjs</p><h5 id="第二种方法：在工程文件目录增加一个package-json"><a href="#第二种方法：在工程文件目录增加一个package-json" class="headerlink" title="第二种方法：在工程文件目录增加一个package.json"></a>第二种方法：在工程文件目录增加一个package.json</h5><p>​    编写代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;type&quot;:&quot;module&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    项目结构图示</p><p>​    <a href="https://imgse.com/i/pEPGrg1"><img src="https://s21.ax1x.com/2025/01/11/pEPGrg1.png" alt="项目结构"></a></p><h3 id="4-其他模块化规范"><a href="#4-其他模块化规范" class="headerlink" title="4. 其他模块化规范"></a>4. 其他模块化规范</h3><p>​    除了CommonJS和ES6以外，还有AMD和CMD，这两个需要用时再自行了解</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高级02-原型</title>
      <link href="/2025/01/04/JS%E9%AB%98%E7%BA%A702-%E5%8E%9F%E5%9E%8B/"/>
      <url>/2025/01/04/JS%E9%AB%98%E7%BA%A702-%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-深入面向对象"><a href="#1-深入面向对象" class="headerlink" title="1. 深入面向对象"></a>1. 深入面向对象</h3><p>​    JS通过构造函数和原型来实现面向对象</p><p>​    前端面向过程更多，但也有面向对象</p><h3 id="2-原型"><a href="#2-原型" class="headerlink" title="2. 原型"></a>2. 原型</h3><h4 id="1-案例引入"><a href="#1-案例引入" class="headerlink" title="(1)案例引入"></a>(1)案例引入</h4><pre class="line-numbers language-none"><code class="language-none">function Star()&#123;this.sing &#x3D; function()&#123;console.log(&#39;我会唱歌&#39;)&#125;&#125;const ldy &#x3D; new Star()const zxy &#x3D; new Star()&#x2F;&#x2F;obj.sing 没有括号表示函数本身，加括号表示要调用这个函数方法console.log(ldy.sing &#x3D;&#x3D;&#x3D; zxy.sing)  &#x2F;&#x2F;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    因为在构造函数中声明函数时，每次new一个新对象，都会再次为这个函数分配空间，这会造成内存的浪费。而通过原型可以解决这个问题</p><h4 id="2-原型对象-prototype"><a href="#2-原型对象-prototype" class="headerlink" title="(2)原型对象(prototype)"></a>(2)原型对象(prototype)</h4><p>​    公共的属性写在构造函数身上，公共的方法写在原型身上</p><h5 id="原型对象的目的是实现方法的共享"><a href="#原型对象的目的是实现方法的共享" class="headerlink" title="原型对象的目的是实现方法的共享"></a>原型对象的目的是实现方法的共享</h5><ul><li>构造函数通过原型分配的函数是所有对象共享的</li><li>JS规定，每一个构造函数都有一个prototype属性，指向另一个对象，我们也称为原型对象</li><li>原型对象可以挂载函数，对象实例化不会多次创建原型上的函数</li><li>我们可以把不变的方法，直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法了</li><li><strong>构造函数和原型对象中的this都指向调用的实例化对象</strong>，需要注意的是实例化对象要调用一下原型里的方法，原型对象的this才指向实例对象，而构造函数的this需要new一个对象才指向实例对象，否则都指向全局对象 (window)</li></ul><h5 id="原型的使用"><a href="#原型的使用" class="headerlink" title="原型的使用"></a>原型的使用</h5><pre class="line-numbers language-none"><code class="language-none">function Star()&#123;&#125;Star.prototype.sing &#x3D; function()&#123;console.log(&#39;我会唱歌&#39;)&#125;const ldy &#x3D; new Star()const zxy &#x3D; new Star()console.log(ldy.sing &#x3D;&#x3D;&#x3D; zxy.sing)  &#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    图示：</p><p>​    <a href="https://imgse.com/i/pAjvyZV"><img src="https://s21.ax1x.com/2024/12/25/pAjvyZV.png" alt="原型"></a></p><h4 id="3-constructor属性"><a href="#3-constructor属性" class="headerlink" title="(3)constructor属性"></a>(3)constructor属性</h4><p>​    每一个原型对象里默认都有constructor属性，作用是指向该原型对象的构造函数</p><blockquote><p>console.log(Star.prototype.constructor === Star)  //true</p></blockquote><h5 id="constructor的使用：指回原型对象的构造函数"><a href="#constructor的使用：指回原型对象的构造函数" class="headerlink" title="constructor的使用：指回原型对象的构造函数"></a>constructor的使用：指回原型对象的构造函数</h5><pre class="line-numbers language-none"><code class="language-none">function star()&#123;&#125;&#x2F;&#x2F;使用prototype一共有两种情况&#x2F;&#x2F;第一种情况：直接给prototype追加方法Star.prototype.dance &#x3D; function()&#123;console.log(&#39;跳舞&#39;)&#125;Star.prototype.sing &#x3D; function()&#123;console.log(&#39;唱歌&#39;)&#125;&#x2F;&#x2F;第二种情况：以对象的形式，直接赋值给Star.prototypeStar.prototype &#x3D; &#123;  &#x2F;&#x2F;赋值，整个替换&#x2F;&#x2F;重新指回这个原型对象的构造函数，不写的话对象中的constructor属性就丢了constructor:Star,&#x2F;&#x2F;函数的对象里声明dance:function()&#123;console.log(&#39;跳舞&#39;)&#125;,sing:function()&#123;console.log(&#39;唱歌&#39;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-对象原型-proto"><a href="#4-对象原型-proto" class="headerlink" title="(4)对象原型(__proto__)"></a>(4)对象原型(<code>__proto__</code>)</h4><p>​    在每一个实例对象中都会有一个属性<code>__proto__</code>指向构造函数的prototype对象，由此实例对象可以直接使用原型的方法</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li><p><code>[[prototype]]</code>和<code>__proto__</code>意义相同，浏览器显示<code>[[prototype]]</code>，写代码写<code>__proto__</code></p></li><li><p><code>__proto__</code>是一个只读属性不可以进行修改</p></li><li><p><strong><code>__proto__</code>中也有一个constructor属性，指向创建该实例对象的构造函数</strong></p><pre class="line-numbers language-none"><code class="language-none">console.log(ldy.__proto__ &#x3D;&#x3D;&#x3D; Star.prototype)  &#x2F;&#x2F;trueconsole.log(ldy.__proto__.constructor &#x3D;&#x3D;&#x3D; Star)   &#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="5-JS的继承：原型继承"><a href="#5-JS的继承：原型继承" class="headerlink" title="(5)JS的继承：原型继承"></a>(5)JS的继承：原型继承</h4><p>​    JS的面向对象大多借助原型对象实现继承的特性</p><p>​    核心思想：<code>子类构造函数的原型= new 父类构造函数</code></p><h5 id="使用原型对象来实现继承-错例"><a href="#使用原型对象来实现继承-错例" class="headerlink" title="使用原型对象来实现继承(错例)"></a>使用原型对象来实现继承(错例)</h5><p>​    样例：这个居然用一个写死的对象来当被继承的，我刚看还没反应过来，也是真的逆天</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;父类Person，这里是一个对象，而不是构造函数const Person &#x3D; &#123;head:1,eyes:2&#125;&#x2F;&#x2F;子类女人 构造函数 需要继承Personconst Woman &#x3D; &#123;&#125;&#x2F;&#x2F;核心步骤1：Women通过原型对象来继承Person，这是覆盖操作Woman.prototype &#x3D; Person&#x2F;&#x2F;核心步骤2：需要将Woman.prototype指回Women构造函数，不写这个指不回原来的Woman了Woman.prototype.constructor &#x3D; Woman&#x2F;&#x2F;生成Women的实例const red &#x3D; new Woman()&#x2F;&#x2F;打印父类的属性console.log(red.head)  &#x2F;&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="上面代码的问题"><a href="#上面代码的问题" class="headerlink" title="上面代码的问题"></a>上面代码的问题</h5><p>​    obj.prototype都是在堆里生成，如果直接等于Person，那么指向同一个地址，那么对于Woman.prototype的修改（增加函数），Man.prototype也会获得该函数，这是有问题的</p><p><a href="https://imgse.com/i/pAvYuBd"><img src="https://s21.ax1x.com/2024/12/26/pAvYuBd.png" alt="pAvYuBd.png"></a></p><h5 id="问题解决-正例-：与错的对比着看"><a href="#问题解决-正例-：与错的对比着看" class="headerlink" title="问题解决(正例)：与错的对比着看"></a>问题解决(正例)：与错的对比着看</h5><p>​    使用构造函数，通过<code>new</code>关键字来生成不同的对象来解决上面指向同一地址的问题</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;构造函数function Person()&#123;this.eyes &#x3D; 2this.head &#x3D; 1&#125;&#x2F;&#x2F;女人 构造函数function Woman()&#123;&#125;&#x2F;&#x2F;通过原型继承PersonWoman.prototype &#x3D; new Person()&#x2F;&#x2F;指回WomanWoman.prototype.constructor &#x3D; Woman&#x2F;&#x2F;给女人添加一个方法Women.prototype.baby &#x3D; function()&#123;console.log(&#39;宝贝&#39;)&#125;const red &#x3D; new Woman()console.log(red)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-原型链"><a href="#6-原型链" class="headerlink" title="(6)原型链"></a>(6)原型链</h4><p>​    基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是链状结构，我们将原型对象的链状结构关系称为原型链</p><p>​    注意：<strong>只要是对象就有<code>__proto__</code>指向原型对象，只要是原型对象就有constructor指向创造它的构造函数</strong></p><h5 id="原型链的原理"><a href="#原型链的原理" class="headerlink" title="原型链的原理"></a>原型链的原理</h5><p>​    原型对象中也有一个<code>__proto__</code>的属性，它的指向如下</p><p>​    JS中有一个最大的类Object，普通类的构造函数的原型对象里的对象原型指向Object的原型对象</p><pre class="line-numbers language-none"><code class="language-none">console.log(Person.prototype.__prot__ &#x3D;&#x3D;&#x3D; Object.prototype)   &#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    而<code>Object.prototype.__proto__</code>指向<code>null</code></p><pre class="line-numbers language-none"><code class="language-none">console.log(Object.prototype.__proto__)   &#x2F;&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="原型链图示"><a href="#原型链图示" class="headerlink" title="原型链图示"></a>原型链图示</h5><p><a href="https://imgse.com/i/pAvw45d"><img src="https://s21.ax1x.com/2024/12/26/pAvw45d.png" alt="原型链"></a></p><h5 id="原型链的使用"><a href="#原型链的使用" class="headerlink" title="原型链的使用"></a>原型链的使用</h5><p>​    因为原型对象里的方法，实例可以使用，那么通过继承，则可以获得父类的方法</p><p>​    原型链-查找规则图示：    <a href="https://imgse.com/i/pAv0FqU"><img src="https://s21.ax1x.com/2024/12/26/pAv0FqU.png" alt="原型链-查找规则"></a></p><p>​    第6条样例：</p><pre class="line-numbers language-none"><code class="language-none">console.log(red instanceof Person)   &#x2F;&#x2F;trueconsole.log(red instanceof Object)   &#x2F;&#x2F;trueconsole.log(red instanceof Array)   &#x2F;&#x2F;falseconsole.log([1,2,3] instanceof Array)   &#x2F;&#x2F;trueconsole.log(Array instanceof Object)   &#x2F;&#x2F;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-深浅拷贝"><a href="#3-深浅拷贝" class="headerlink" title="3. 深浅拷贝"></a>3. 深浅拷贝</h3><p>​    浅拷贝、深拷贝只针对引用类型</p><p>​    因为如果对引用类型采用直接赋值的操作进行拷贝，老对象和新对象在堆中指向的同一个对象，对新对象修改就是在对老对象进行修改，两个对象相互影响这样不符合拷贝的初衷</p><h4 id="1-浅拷贝："><a href="#1-浅拷贝：" class="headerlink" title="(1)浅拷贝："></a>(1)浅拷贝：</h4><p>​    对引用数据执行浅拷贝，它里面是简单数据类型则直接拷贝值，如果是引用数据类型则拷贝的是地址</p><h5 id="常见方法："><a href="#常见方法：" class="headerlink" title="常见方法："></a>常见方法：</h5><p>​    1.拷贝对象：Object.assign()  /  展开运算符{…obj}</p><p>​    2.拷贝数组：Array.prototype.concat()  /  […arr]</p><h5 id="对象拷贝的例子："><a href="#对象拷贝的例子：" class="headerlink" title="对象拷贝的例子："></a>对象拷贝的例子：</h5><pre class="line-numbers language-none"><code class="language-none">const obj &#x3D; &#123;uname:&#39;pink&#39;,age:18&#125;&#x2F;&#x2F;浅拷贝const o &#x3D; &#123;...obj&#125;&#x2F;&#x2F;或 &#x2F;&#x2F;const o &#x3D; &#123;&#125;&#x2F;&#x2F;Object.assign(o,obj)o.age &#x3D; 20console.log(o)   &#x2F;&#x2F;20console.log(obj)   &#x2F;&#x2F;18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    数组自己举一反三</p><p>​    <strong>浅拷贝只拷贝最外面这一层，如果对象里还有对象（即引用数据类型），那对象的对象修改，又会出现直接赋值的情况</strong></p><h4 id="2-深拷贝："><a href="#2-深拷贝：" class="headerlink" title="(2)深拷贝："></a>(2)深拷贝：</h4><p>​    拷贝的是对象，不是地址</p><h5 id="常见方法：-1"><a href="#常见方法：-1" class="headerlink" title="常见方法："></a>常见方法：</h5><p>​    1.通过递归实现深拷贝</p><p>​    2.lodash/cloneDeep</p><p>​    3.通过JSON.stringify()实现</p><h5 id="递归实现深拷贝："><a href="#递归实现深拷贝：" class="headerlink" title="递归实现深拷贝："></a>递归实现深拷贝：</h5>]]></content>
      
      
      
        <tags>
            
            <tag> JS高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高级01-JS的面向对象</title>
      <link href="/2024/12/22/JS%E9%AB%98%E7%BA%A701-JS%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2024/12/22/JS%E9%AB%98%E7%BA%A701-JS%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1. 作用域"></a>1. 作用域</h3><p>​    规定变量被访问的范围</p><p>​    <code>JS中共有4种作用域：全局作用域、局部作用域(块作用域)、函数作用域(普通函数)以及eval作用域，作用域会影响this的指向</code></p><h4 id="1-局部作用域：-1-函数作用域、2-块作用域"><a href="#1-局部作用域：-1-函数作用域、2-块作用域" class="headerlink" title="(1)局部作用域：{1.函数作用域、2.块作用域}"></a>(1)局部作用域：{1.函数作用域、2.块作用域}</h4><p>​    1.函数内部声明的变量只能在函数内部被访问，函数执行完毕，函数内部的变量实际被清空了</p><p>​    2.<code>&#123;&#125;</code>包裹的为代码块（包括if的，for的），let、const会产生块作用域，var不会产生块作用域</p><p>​    注意：局部作用域外部未再次定义就使用会报错</p><h4 id="2-全局作用域"><a href="#2-全局作用域" class="headerlink" title="(2)全局作用域"></a>(2)全局作用域</h4><p>​    <code>&lt;script&gt;</code> 标签内和.js文件内，即【最外层】就是所谓的全局作用域，全局作用域中声明的变量，任何其他作用域都可以被访问</p><h4 id="3-垃圾回收机制"><a href="#3-垃圾回收机制" class="headerlink" title="(3)垃圾回收机制"></a>(3)垃圾回收机制</h4><ul><li>引用计数法：跟踪被引用的次数，如果为0则释放内存，缺点：相互引用的变量无法销毁会造成内存泄漏</li><li>标记清除法：从根部扫描对象，查不到的对象会被回收，解决了引用计数法的缺点</li></ul><h4 id="4-闭包"><a href="#4-闭包" class="headerlink" title="(4)闭包"></a>(4)闭包</h4><p>​    内层函数访问到外层函数的作用域：闭包=内层函数 + 外层函数的变量</p><p>​    <a href="https://imgse.com/i/pAqh4IO"><img src="https://s21.ax1x.com/2024/12/15/pAqh4IO.png" alt="闭包的使用"></a></p><p>​    此时，调用fun()函数可以打印出a的值，调用outer()也可以</p><h5 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h5><p>​    1. 在内定义数据，实现数据的私有</p><h5 id="闭包引发的问题"><a href="#闭包引发的问题" class="headerlink" title="闭包引发的问题"></a>闭包引发的问题</h5><p>​    因为函数一直被调用，变量无法回收，会导致内存的泄露</p><h4 id="5-变量提升"><a href="#5-变量提升" class="headerlink" title="(5)变量提升"></a>(5)变量提升</h4><p>​    属于JS语言缺陷，它允许变量声明之前即被访问（仅存在于var声明变量），只提升声明不提升赋值且仅提升到当前作用域最前面，实际开发少用var</p><h3 id="2-函数进阶"><a href="#2-函数进阶" class="headerlink" title="2. 函数进阶"></a>2. 函数进阶</h3><h4 id="1-函数提升"><a href="#1-函数提升" class="headerlink" title="(1)函数提升"></a>(1)函数提升</h4><p>​    函数在声明之前就可以被调用，原因：JS会把所有函数声明提升到当前作用域的最前面</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;fn()function fu()&#123;console(&#39;函数提升&#39;)&#125;&lt;&#x2F;script&gt;&#x2F;&#x2F;函数可以正常执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-普通函数的两种定义格式-命名函数和匿名函数"><a href="#2-普通函数的两种定义格式-命名函数和匿名函数" class="headerlink" title="(2)普通函数的两种定义格式(命名函数和匿名函数)"></a>(2)普通函数的两种定义格式(命名函数和匿名函数)</h4><h5 id="命名函数"><a href="#命名函数" class="headerlink" title="命名函数"></a>命名函数</h5><p>​    有一个确切的名字，可以直接使用</p><p>​    语法：</p><pre class="line-numbers language-none"><code class="language-none">function fn1() &#123; console.log(&quot;这是命名函数&quot;) &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p>​    匿名函数本身没有名字，但可以通过变量 <code>fn2</code> 来调用它</p><p>​    匿名函数属于函数表达式，不存在函数提升</p><p>​    语法：</p><pre class="line-numbers language-none"><code class="language-none">const fn2 &#x3D; function() &#123; console.log(&quot;我是匿名函数表达式&quot;) &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-普通函数-命名函数和匿名函数-的this"><a href="#3-普通函数-命名函数和匿名函数-的this" class="headerlink" title="(3)普通函数(命名函数和匿名函数)的this"></a>(3)普通函数(命名函数和匿名函数)的this</h4><p>​    命名函数 和 匿名函数在 <code>this</code> 的绑定行为上是相同的，<code>this</code> 的值由函数的调用方式决定</p><h4 id="4-箭头函数"><a href="#4-箭头函数" class="headerlink" title="(4)箭头函数"></a>(4)箭头函数</h4><p>​    箭头函数属于表达式函数，不存在函数提升</p><p>​    <strong>基本语法，有简写小心区分</strong></p><p>​    1. 最基本的语法</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;&#x2F;&#x2F;箭头函数，参数xconst fn &#x3D; (x) &#x3D;&gt; &#123;console.log(x)&#125;&#x2F;&#x2F;调用fn(1)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2. 当参数只有一个时可以省略小括号，只有一行代码时可以省略大括号</p><pre class="line-numbers language-none"><code class="language-none">const fn &#x3D; x &#x3D;&gt; console.log(x)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    3. 只有一行代码时可以省略return</p><pre class="line-numbers language-none"><code class="language-none">const fn &#x3D; x &#x3D;&gt; x+x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <code>4. 箭头函数可以直接返回一个对象</code></p><pre class="line-numbers language-none"><code class="language-none">const fn &#x3D; (uname) &#x3D;&gt; (&#123;name:uname&#125;)&#x2F;&#x2F;调用fn(&#39;刘就成&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-箭头函数的this（一定要注意作用域）"><a href="#5-箭头函数的this（一定要注意作用域）" class="headerlink" title="(5)箭头函数的this（一定要注意作用域）"></a>(5)箭头函数的this（一定要注意作用域）</h4><p>​    在普通函数中，每一个新函数根据它是如何被调用的来定义这个函数的this值</p><p>​    箭头函数不会创建自己的this，它只会从自己的作用域链的上一层沿用this，即看上一层作用域的this指向谁</p><p>​    <em>易错代码1</em></p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;const obj &#x3D; &#123;  uname: &#39;hello&#39;,  sayHi: () &#x3D;&gt; &#123;    console.log(this);  &#x2F;&#x2F; this指向window，而不是obj，因为obj不是作用域  &#125;&#125;obj.sayHi()&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <em>易错代码2</em></p><pre class="line-numbers language-none"><code class="language-none">const obj &#x3D; &#123;  name: &#39;Alice&#39;,  greet: function() &#123;    &#x2F;&#x2F; 这里的 this 指向 obj    setTimeout(() &#x3D;&gt; &#123;      console.log(this.name); &#x2F;&#x2F; 箭头函数继承外部 greet() 的 this    &#125;, 1000);  &#125;&#125;;obj.greet();  &#x2F;&#x2F; 输出 &#39;Alice&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-解构、遍历与过滤"><a href="#3-解构、遍历与过滤" class="headerlink" title="3. 解构、遍历与过滤"></a>3. 解构、遍历与过滤</h3><p>​    解构是快速批量的将[值/对象属性和方法]给变量的简洁语法</p><h4 id="1-数组解构"><a href="#1-数组解构" class="headerlink" title="(1)数组解构"></a>(1)数组解构</h4><p>​    变量的顺序对应数组单元值的位置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//1.普通情况</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">//数组解构</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> arrconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment">//3</span><span class="token comment">//2.变量少，单元值多，可以用剩余参数接</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">//1</span>console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment">//[3,4]</span><span class="token comment">//3.多维数组</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token punctuation">[</span>c<span class="token punctuation">,</span>d<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arrconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">//1</span>console<span class="token punctuation">,</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment">//2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>  <span class="token comment">//4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-对象解构"><a href="#2-对象解构" class="headerlink" title="(2)对象解构"></a>(2)对象解构</h4><p>​    <strong>解构的变量名必须和原对象的属性名一致，如果找不到对应的会被赋值为undefined</strong>，要起别名可以使用<code>名称:新名称</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;普通情况const obj &#x3D; &#123;uname:&#39;刘就成&#39;,age:24&#125;const &#123;uname:name,age&#125; &#x3D; obj console.log(name)  &#x2F;&#x2F;刘就成console.log(age)  &#x2F;&#x2F;24&#x2F;&#x2F;多级对象解构const pig &#x3D; &#123;name:&#39;佩奇&#39;,family:&#123;mother:妈妈,father:爸爸&#125;&#125;const &#123;name, family:&#123;mother,father&#125;&#125; &#x3D; pigconsole.log(name)  &#x2F;&#x2F;佩奇console.log(mother)  &#x2F;&#x2F;妈妈console.log(father)  &#x2F;&#x2F;爸爸&#x2F;&#x2F;可以只要对象中的一部分,在函数传参时可以传pig，写函数体时只用familyconst &#123;family&#125; &#x3D; pig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-foreach遍历数组"><a href="#3-foreach遍历数组" class="headerlink" title="(3)foreach遍历数组"></a>(3)foreach遍历数组</h4><p>​    只能遍历数组不能遍历对象，且内部没有return</p><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><p>​    语法：当前数组元素必写，索引号可选</p><pre class="line-numbers language-none"><code class="language-none">被遍历的数组.forEach(function(当前数组元素,【当前数组索引号】))&#123;&#x2F;&#x2F;函数体&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    样例：</p><pre class="line-numbers language-none"><code class="language-none">const arr &#x3D; [&#39;ren&#39;,&#39;green&#39;,&#39;pink&#39;]arr.forEach(function(item,index)&#123;console.log(item)   &#x2F;&#x2F;数组元素：red green pinkconsole.log(index)  &#x2F;&#x2F;索引号：0,1,2&#125;)&#x2F;&#x2F;改为箭头函数同时省略index的写法arr.forEach(item &#x3D;&gt; &#123;console.log(item)   &#x2F;&#x2F;数组元素：red green pink&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-filter方法过滤数组"><a href="#4-filter方法过滤数组" class="headerlink" title="(4)filter方法过滤数组"></a>(4)filter方法过滤数组</h4><p>​    返回一个符合条件的新数组，过滤不会影响原数组</p><h5 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h5><p>​    语法：currentValue必须写，index可选</p><pre class="line-numbers language-none"><code class="language-none">被遍历的数组.filter(function(currentValue,index)&#123;retun 筛选条件&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    样例：</p><pre class="line-numbers language-none"><code class="language-none">const arr &#x3D; [10,20,30]const newArr &#x3D; arr.filter(function(item,index)&#123;return item &gt;&#x3D; 20&#125;)console.log(newArr)  &#x2F;&#x2F;[20,30]&#x2F;&#x2F;改为箭头函数同时省略index的写法const newArr &#x3D; arr.filter(item &#x3D;&gt; item&gt;&#x3D; 20)console.log(newArr)  &#x2F;&#x2F;[20,30]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-深入对象"><a href="#4-深入对象" class="headerlink" title="4. 深入对象"></a>4. 深入对象</h3><p>​    <strong>对象的定义可以用修饰符const、let、var，但是对象里面的属性和方法不可以用修饰符</strong>，只能直接通过对象引用来修改它们</p><h4 id="1-创建对象的三种方式"><a href="#1-创建对象的三种方式" class="headerlink" title="(1)创建对象的三种方式"></a>(1)创建对象的三种方式</h4><ul><li><p>利用对象字面量创建对象</p><pre class="line-numbers language-none"><code class="language-none">const o &#x3D; &#123;name:&#39;佩奇&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>利用new Object创建对象</p><pre class="line-numbers language-none"><code class="language-none">const o &#x3D; new Object(&#123;name:&#39;佩奇&#39;&#125;)console.log(o)  &#x2F;&#x2F;&#123;name:&#39;佩奇&#39;&#125;&#x2F;&#x2F;也可以直接往对象变量里追加const o &#x3D; new Object()o.age &#x3D; 10console.log(o)  &#x2F;&#x2F;&#123;age:10&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用构造函数创建对象</p></li></ul><h4 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="(2)构造函数"></a>(2)构造函数</h4><p>​    构造函数是一种特殊的函数，主要用来创建对象，通过构造函数可以快速创建多个类似的对象</p><h5 id="构造函数的约定"><a href="#构造函数的约定" class="headerlink" title="构造函数的约定"></a>构造函数的约定</h5><p>​    1. <strong>构造函数的命名以大写字母开头</strong></p><p>​    2. 构造函数只能由“new”操作符来执行</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>​    例子：创建一个猪对象</p><pre class="line-numbers language-none"><code class="language-none">function Pig(uname,age)&#123;this.uname &#x3D; unamethis.age &#x3D; age&#125;const peiqi &#x3D; new Pig(&#39;佩奇&#39;,6)  &#x2F;&#x2F;实例化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="构造函数的存储"><a href="#构造函数的存储" class="headerlink" title="构造函数的存储"></a>构造函数的存储</h5><p>​    <strong>函数对象（包括构造函数）是存储在内存中的一个对象，这通常是在堆中</strong>，因为函数对象可以是动态创建的，并且可能会在多个地方被引用</p><p>​    如下代码：<code>Person</code> 函数本身是一个对象，它会被存储在堆内存中，通过 <code>new</code> 关键字创建的 <code>person1</code> 实例（对象）也是存储在堆内存中</p><pre class="line-numbers language-none"><code class="language-none">function Person(name) &#123;  this.name &#x3D; name;&#125;const person1 &#x3D; new Person(&#39;Alice&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-对象的this和普通函数的this以及箭头函数的this"><a href="#3-对象的this和普通函数的this以及箭头函数的this" class="headerlink" title="(3)对象的this和普通函数的this以及箭头函数的this"></a>(3)对象的this和普通函数的this以及箭头函数的this</h4><ul><li>如果你调用一个函数时使用 <code>new</code> 关键字，JavaScript 会将 <code>this</code> 绑定到新创建的对象。</li><li>如果函数是作为方法调用的，<code>this</code> 会指向调用该方法的对象。</li><li>如果函数是直接调用的，<code>this</code> 会指向全局对象</li></ul><p>​    需要注意的是：箭头函数的 <code>this</code>继承自外部函数或上下文的 <code>this</code>，它没有自己的 <code>this</code></p><h4 id="4-实例成员和静态成员"><a href="#4-实例成员和静态成员" class="headerlink" title="(4)实例成员和静态成员"></a>(4)实例成员和静态成员</h4><p>​    在 JavaScript 中，属性/方法不一定要在类或构造函数定义时就明确地定义，也可以在实例化对象后通过实例来添加和调用属性/方法</p><h5 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h5><p>​    通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员（实例属性和实例方法）</p><p>​    样例：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;实例成员function Pig(name)&#123;&#x2F;&#x2F;实例属性this.name &#x3D; name&#125;const peiqi &#x3D; new Pig(&#39;佩奇&#39;)&#x2F;&#x2F;实例属性peiqi.name &#x3D; &#39;小猪&#39;&#x2F;&#x2F;实例方法peiqi.sayHi &#x3D; () &#x3D;&gt; &#123;console.log(&#39;你好&#39;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h5><p>​    构造函数的属性和方法被称为静态成员(静态属性、静态方法)</p><p>​    说明：</p><pre><code> 1. 静态成员只能构造函数访问 2. 静态方法中的this指向构造函数</code></pre><p>​    样例：</p><pre class="line-numbers language-none"><code class="language-none">function Pig(name)&#123;&#x2F;&#x2F;实例属性this.name &#x3D; name&#125;&#x2F;&#x2F;静态属性Pig.eyes &#x3D; 2console.log(Pig.eyes)&#x2F;&#x2F;静态方法Pig.sayHi &#x3D; function()&#123;console.log(&#39;hi&#39;)&#125;Pig.sayHi()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-内置构造函数"><a href="#5-内置构造函数" class="headerlink" title="5. 内置构造函数"></a>5. 内置构造函数</h3><p>​    内置构造函数是 JavaScript 内部预定义的函数，允许你创建特定类型的对象，并提供了一些基本功能和属性</p><h4 id="1-JS的包装类型"><a href="#1-JS的包装类型" class="headerlink" title="(1)JS的包装类型"></a>(1)JS的包装类型</h4><p>​    <strong>JS基本数据类型</strong>：字符串、数值、布尔、undefined、null</p><p>​    只有对象才有方法，但是在js中定义字符串、数值、布尔的变量也可以调用写好的方法，是因为js底层做了封装，将这些基本数据类型转为了复杂数据类型(对象)</p><h4 id="2-其他内置构造函数"><a href="#2-其他内置构造函数" class="headerlink" title="(2)其他内置构造函数"></a>(2)其他内置构造函数</h4><h5 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h5><p>​    定义：</p><pre class="line-numbers language-none"><code class="language-none">let obj &#x3D; new Object();&#x2F;&#x2F; 或者简写为：let obj &#x3D; &#123;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    Object常用的静态方法</p><ul><li><p>Object.keys(对象名)：获取对象中所有的属性，返回的是一个数组</p><pre class="line-numbers language-none"><code class="language-none">Object.keys(Pig)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Object.values(对象名)：获取对象所有属性的值，返回也是一个数组</p><pre class="line-numbers language-none"><code class="language-none">Object.values(Pig)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​    </p><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><p>​    数组的核心方法如下图所示：传参都为回调函数，reduce多一个初始值</p><p>​    map是对数组所有元素进行相同处理</p><p>​    <a href="https://imgse.com/i/pAXt6I0"><img src="https://s21.ax1x.com/2024/12/22/pAXt6I0.png" alt="pAXt6I0.png"></a></p><p>​    样例：(forEach，filter，map，reduce)</p><pre class="line-numbers language-none"><code class="language-none">const numbers &#x3D; [1, 2, 3, 4, 5];&#x2F;&#x2F; forEach:输出数组的每个元素numbers.forEach(function(num) &#123;  console.log(num);&#125;);&#x2F;&#x2F; filter:过滤出大于 3 的数字const filtered &#x3D; numbers.filter(function(num) &#123;  return num &gt; 3;&#125;);console.log(filtered);  &#x2F;&#x2F; [4, 5]&#x2F;&#x2F; map:每个数字乘以 2const doubled &#x3D; numbers.map(function(num) &#123;  return num * 2;&#125;);console.log(doubled);  &#x2F;&#x2F; [2, 4, 6, 8, 10]&#x2F;&#x2F; reduce:计算数组所有元素的总和，初始值是0，可以省略但会以数组的第一个值为初始值所以最好不要省&#x2F;&#x2F;accumulator是计数值(初始值由函数第二个参数决定)，currentValue是元素值(如果是对象就是完整对象)，计算时需要把数据拆出来const sum &#x3D; numbers.reduce(function(accumulator, currentValue) &#123;  return accumulator + currentValue;&#125;, 0);console.log(sum);  &#x2F;&#x2F; 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> JS高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>落实blog整改的要求.md</title>
      <link href="/2024/11/14/%E8%90%BD%E5%AE%9Eblog%E6%95%B4%E6%94%B9%E7%9A%84%E8%A6%81%E6%B1%82/"/>
      <url>/2024/11/14/%E8%90%BD%E5%AE%9Eblog%E6%95%B4%E6%94%B9%E7%9A%84%E8%A6%81%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h4 id="关于落实blog整改的要求"><a href="#关于落实blog整改的要求" class="headerlink" title="关于落实blog整改的要求"></a>关于落实blog整改的要求</h4><p>​    依据Rain关于学习习惯改革基本思想，对Rain对内门户网站做出一下整改要求</p><p>​    1.所有blog的名字需要简洁明了的概括blog内容，不得再以XXX0X的格式发布</p><p>​    2.blog应该记录重点、难点，不得以写书的方式进行blog的记录，应该明确重点，不会的记，会的就不用记了，力争打造一流blog信息    库。所以需对原先所有记录blog进行扫描，如果有弱智记录，全部删除</p><p>​    3.冗余blog，烂尾blog，能合并进行合并，不能合并全部清空删除</p><p>​    4.对blogUI、控件进一步优化，打造方便便捷的全新体验</p><p>​    5.降低blog密级，允许一部分人访问、浏览blog，逼促自身不固步自封，进一步向前</p><p>​    6.整改优化的md应该在标头添加Rain-重置<code>&lt;h2&gt;</code> 来标明</p><p>​    7.本要求之后的blog不受优化影响</p><p>​    政策详细-Rain2025改革</p><p>​    对所有基础技术栈依据博客进行完全性审核，不合格的该回炉重造，全部回炉重造<br>​    对博客中烂尾技术该删除全部删除，把冗余性给完全降低<br>​    博客内容进行细致化整理包含方向、工具、非方向三个大板块<br>​    落实博客整理以及博客内容精细化，让博客的作用发挥实处<br>​    建立面试以及面试题模块，方便对面试题的筛选<br>​    建立健全技术考核，每周对常用技术sql、前后端访问等吃饭性技术更新改革，让工作任务落到实处</p><p>​    整改日志</p><p>​    11.30：完成页面文字的更新</p><p>​    12.03：完成搜索功能</p><p>​    12.19：高亮优化、目录优化，启动一期整改，SQL、JS整改</p><p>​    1.6：添加背景，优化背景图片</p><p>​    1.8：导航栏颜色修改，主色调修改</p><p>​    1.12：添加JavaScript的blog图片</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mabatis03</title>
      <link href="/2023/11/13/Mabatis03/"/>
      <url>/2023/11/13/Mabatis03/</url>
      
        <content type="html"><![CDATA[<h2 id="多表操作与注解开发"><a href="#多表操作与注解开发" class="headerlink" title="多表操作与注解开发"></a>多表操作与注解开发</h2><h4 id="1-MyBatis多表操作的实体类设计-1"><a href="#1-MyBatis多表操作的实体类设计-1" class="headerlink" title="1. MyBatis多表操作的实体类设计(1)"></a>1. MyBatis多表操作的实体类设计(1)</h4><p>​    在多表操作时，在一对多的情况下会出现外键，外键虽然只关联副表的一个字段但表示通过整个那个外键的类来表示，如下图所示用户编号用整个用户对象来代替</p><p><a href="https://imgse.com/i/pC01jjx"><img src="https://s1.ax1x.com/2023/06/29/pC01jjx.png" alt="订单表的实体类设计"></a></p><h4 id="2-MyBatis多表操作的映射文件设计-一对一"><a href="#2-MyBatis多表操作的映射文件设计-一对一" class="headerlink" title="2. MyBatis多表操作的映射文件设计(一对一)"></a>2. MyBatis多表操作的映射文件设计(一对一)</h4><p>​    如整表查询为例，查询到的是user对象的字段但不能手动存入，所以在MyBatis配置文件中需要将查询到的数据进行封装，此时需要手动定义映射关系使用resultMap，简单关系使用resultType</p><p><a href="https://imgse.com/i/pC03zzn"><img src="https://s1.ax1x.com/2023/06/29/pC03zzn.png" alt="pC03zzn.png"></a></p><p>​    注意1：主键使用id标签，其他字段使用result标签</p><p>​    注意2：在 MyBatis 的 <code>resultMap</code> 标签中，<code>type</code> 属性用于指定映射结果的类型。它指定了结果映射的目标 Java 类型，表示将查询结果映射到哪个 Java 对象。<strong>图中因为起了别名所以没有使用全限定名</strong></p><p>​    在 MyBatis 中，<code>resultMap</code> 和 <code>resultType</code> 都是用于映射查询结果的标签，但它们在使用和功能上有一些区别。</p><ol><li><code>resultMap</code>：<code>resultMap</code> 是 MyBatis 中定义映射关系的标签，通过 <code>resultMap</code> 可以定义如何将查询结果映射到 Java 对象的属性。<code>resultMap</code> 可以包含多个 <code>result</code> 子标签，每个 <code>result</code> 标签指定了一个查询结果字段与 Java 对象属性之间的映射关系。使用 <code>resultMap</code> 可以方便地处理复杂的映射关系，如一对一、一对多等关联关系。<code>resultMap</code> 的定义可以在 XML 配置文件中，也可以通过注解方式定义。</li><li><code>resultType</code>：<code>resultType</code> 的映射与 Java 实体类是相关的。当使用 <code>resultType</code> 时，MyBatis 会将查询结果自动映射到指定的 Java 类型对象上。<code>resultType</code> 是 MyBatis 中直接指定查询结果类型的标签，通过 <code>resultType</code> 可以指定返回结果的 Java 类型。<code>resultType</code> 可以是任何可被映射的 Java 类型，如基本类型（int、String等）、自定义类、Map等。在使用 <code>resultType</code> 的情况下，MyBatis 会通过自动映射将查询结果的列名与对应的 Java 对象属性名进行匹配，并将结果赋值给对应的属性。相比于 <code>resultMap</code>，<code>resultType</code> 适用于简单的查询映射，不涉及复杂的关联关系。</li></ol><p>​    除了上图，还可以通过<code>&lt;association&gt;</code> 标签来定义user字段。在 MyBatis 中，<code>&lt;association&gt;</code> 元素用于在结果映射中定义对象之间的关联关系。它通常用于处理一对一的关联关系，其中一个对象包含对另一个对象的引用。</p><p><a href="https://imgse.com/i/pC0XW7Q"><img src="https://s1.ax1x.com/2023/06/30/pC0XW7Q.png" alt="另一种写法"></a></p><h4 id="3-MyBatis多表操作的实体类设计-2"><a href="#3-MyBatis多表操作的实体类设计-2" class="headerlink" title="3. MyBatis多表操作的实体类设计(2)"></a>3. MyBatis多表操作的实体类设计(2)</h4><p>​    用户对于订单是一对多的关系，所以此时需要给用户表中添加对应的订单list，这样可以在实体类中反映出一对多的关系</p><p><a href="https://imgse.com/i/pCByjeS"><img src="https://s1.ax1x.com/2023/07/01/pCByjeS.png" alt="pCByjeS.png"></a></p><h4 id="4-MyBatis多表操作的映射文件设计-一对多"><a href="#4-MyBatis多表操作的映射文件设计-一对多" class="headerlink" title="4. MyBatis多表操作的映射文件设计(一对多)"></a>4. MyBatis多表操作的映射文件设计(一对多)</h4><p>​    配置集合使用collection标签</p><p><a href="https://imgse.com/i/pCB6T7F"><img src="https://s1.ax1x.com/2023/07/01/pCB6T7F.png" alt="pCB6T7F.png"></a></p><p>​    注意：在原先order表中定义了字段uesr，user代表的是一个对象，但数据库表order中没有与之对应的字段，所以不需要配置，即<strong>实体表的数据可以根据需要&gt;=数据库表的数据</strong></p><h4 id="5-MyBatis多表操作设计-多对多"><a href="#5-MyBatis多表操作设计-多对多" class="headerlink" title="5. MyBatis多表操作设计(多对多)"></a>5. MyBatis多表操作设计(多对多)</h4><p>​    MyBatis的多对多操作与一对多相差不大，唯一需要注意的是，多对多有三张表</p><p><a href="https://imgse.com/i/pCDi21e"><img src="https://s1.ax1x.com/2023/07/01/pCDi21e.png" alt="pCDi21e.png"></a></p><p>​    创建实体类role和user，<strong>不用创建中间表的实体类，但需要中间表作为sql查询语句的桥梁</strong></p><p><a href="https://imgse.com/i/pCDioAP"><img src="https://s1.ax1x.com/2023/07/01/pCDioAP.png" alt="role实体类"></a></p><p><a href="https://imgse.com/i/pCDiq1g"><img src="https://s1.ax1x.com/2023/07/01/pCDiq1g.png" alt="user实体类"></a></p><p>​    编写多对多的MyBatis映射文件</p><p><a href="https://imgse.com/i/pCDFZH1"><img src="https://s1.ax1x.com/2023/07/01/pCDFZH1.png" alt="pCDFZH1.png"></a></p><p>​    测试查询情况</p><p><a href="https://imgse.com/i/pCDFmAx"><img src="https://s1.ax1x.com/2023/07/01/pCDFmAx.png" alt="pCDFmAx.png"></a></p><h4 id="6-多表查询知识小结与补充"><a href="#6-多表查询知识小结与补充" class="headerlink" title="6. 多表查询知识小结与补充"></a>6. 多表查询知识小结与补充</h4><p><a href="https://imgse.com/i/pCDFQ3D"><img src="https://s1.ax1x.com/2023/07/01/pCDFQ3D.png" alt="pCDFQ3D.png"></a></p><p>​    <strong>补充</strong></p><p>​    在 MyBatis 中，<code>&lt;collection&gt;</code> 和 <code>&lt;association&gt;</code> 元素都用于处理对象之间的关联关系，但它们有一些关键的区别。</p><ol><li>处理的数据类型：<ul><li><code>&lt;association&gt;</code> 用于处理一对一的关联关系，其中一个对象包含对另一个对象的引用。</li><li><code>&lt;collection&gt;</code> 用于处理一对多的关联关系，其中一个对象包含多个关联对象的集合。</li></ul></li><li>结果映射方式：<ul><li><code>&lt;association&gt;</code> 通过指定关联对象的属性和映射规则来创建关联对象，并将其设置到父对象中的对应属性中。</li><li><code>&lt;collection&gt;</code> 通过指定关联对象集合的属性和映射规则，以及用于构建每个关联对象的结果映射，来创建关联对象集合，并将其设置到父对象中的对应属性中。</li></ul></li><li>子元素的定义：<ul><li><code>&lt;association&gt;</code> 元素可以包含 <code>&lt;id&gt;</code> 和 <code>&lt;result&gt;</code> 子元素来映射关联对象的属性。</li><li><code>&lt;collection&gt;</code> 元素可以包含 <code>&lt;id&gt;</code>、<code>&lt;result&gt;</code>、<code>&lt;association&gt;</code>、<code>&lt;collection&gt;</code> 等子元素来映射关联对象的属性以及关联对象集合中的元素。</li></ul></li></ol><h4 id="7-MyBatis的常用注解"><a href="#7-MyBatis的常用注解" class="headerlink" title="7. MyBatis的常用注解"></a>7. MyBatis的常用注解</h4><p><a href="https://imgse.com/i/pCDxwtg"><img src="https://s1.ax1x.com/2023/07/02/pCDxwtg.png" alt="pCDxwtg.png"></a></p><p>​    注意：One和Many使用结果集封装，用于多表查询</p><p>​    使用注解后，不需要写MyBatis的映射文件，将注解写在接口中对应的方法上</p><p>​    使用注解并编写接口文件</p><p><a href="https://imgse.com/i/pCDzfqP"><img src="https://s1.ax1x.com/2023/07/02/pCDzfqP.png" alt="pCDzfqP.png"></a></p><p>​    在MyBatis核心配置文件中，需要将注解进行扫描，原先对映射文件的配置可以删除</p><p><a href="https://imgse.com/i/pCDzXq0"><img src="https://s1.ax1x.com/2023/07/02/pCDzXq0.png" alt="pCDzXq0.png"></a></p><h4 id="8-MyBatis注解实现复杂映射开发"><a href="#8-MyBatis注解实现复杂映射开发" class="headerlink" title="8. MyBatis注解实现复杂映射开发"></a>8. MyBatis注解实现复杂映射开发</h4><p>​    实现复杂关系映射之前我们可以在映射文件中通过配置<code>&lt;resultMap&gt;</code> 来实现，使用注解开发后，我们可以使用@Results注解，@Result注解，@One注解，@Many注解组合完成复杂关系的配置</p><p><a href="https://imgse.com/i/pC65JGq"><img src="https://s1.ax1x.com/2023/07/06/pC65JGq.png" alt="pC65JGq.png"></a></p><p><a href="https://imgse.com/i/pC65RsO"><img src="https://s1.ax1x.com/2023/07/06/pC65RsO.png" alt="pC65RsO.png"></a></p><h5 id="1-注解实现一对一查询"><a href="#1-注解实现一对一查询" class="headerlink" title="(1) 注解实现一对一查询"></a>(1) 注解实现一对一查询</h5><p>​    使用注解的方式完成封装，在接口类进行注解编写，下图为一对一的封装</p><p><a href="https://imgse.com/i/pCcJLgf"><img src="https://s1.ax1x.com/2023/07/07/pCcJLgf.png" alt="一对一的封装"></a></p><p>​    除了上面方式还可以使用<code>@One</code>标签来完成一对一封装，<code>@One</code>标签里可以引用其他接口的方法并获得执行结果</p><p><a href="https://imgse.com/i/pCcYssS"><img src="https://s1.ax1x.com/2023/07/07/pCcYssS.png" alt="一对一查询的第二种写法"></a></p><h5 id="2-注解实现一对多查询"><a href="#2-注解实现一对多查询" class="headerlink" title="(2) 注解实现一对多查询"></a>(2) 注解实现一对多查询</h5><p>​    使用<code>@Many</code>标签来完成一对多封装，<code>@Many</code>标签里也是可以引用其他接口的方法并获得执行结果</p><p><a href="https://imgse.com/i/pCctJS0"><img src="https://s1.ax1x.com/2023/07/07/pCctJS0.png" alt="一对多查询"></a></p><h5 id="3-注解实现多对多查询"><a href="#3-注解实现多对多查询" class="headerlink" title="(3) 注解实现多对多查询"></a>(3) 注解实现多对多查询</h5><p>​    使用<code>@Many</code>标签来完成多对多封装，<code>@Many</code>标签里也是可以引用其他接口的方法并获得执行结果</p><p><a href="https://imgse.com/i/pCcNN9I"><img src="https://s1.ax1x.com/2023/07/07/pCcNN9I.png" alt="要被引用的方法"></a></p><p><a href="https://imgse.com/i/pCcNZN9"><img src="https://s1.ax1x.com/2023/07/07/pCcNZN9.png" alt="多对多查询"></a></p><h5 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="(4) 注意事项"></a>(4) 注意事项</h5><p>​    相比于使用xml配置的方式，使用注解对于sql语句进行了拆分，将之前xml配置中的一条sql语句拆分成了两条</p>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mabatis02</title>
      <link href="/2023/11/13/Mabatis02/"/>
      <url>/2023/11/13/Mabatis02/</url>
      
        <content type="html"><![CDATA[<h4 id="1-MyBatis的增删改查操作"><a href="#1-MyBatis的增删改查操作" class="headerlink" title="1. MyBatis的增删改查操作"></a>1. MyBatis的增删改查操作</h4><p>​    MyBatis实现增删改查操作需要三步：<br>​<br>​    1. 编写接口方法：(Mapper接口，参数，返回值)<br>​    2. 编写SQL：xml映射文件<br>​    3. 执行方法</p><h4 id="2-MyBatis的查询操作"><a href="#2-MyBatis的查询操作" class="headerlink" title="2. MyBatis的查询操作"></a>2. MyBatis的查询操作</h4><h5 id="1-查询所有数据步骤"><a href="#1-查询所有数据步骤" class="headerlink" title="(1)查询所有数据步骤"></a>(1)查询所有数据步骤</h5><p>​    编写接口方法：Mapper接口</p><p><a href="https://imgse.com/i/pFm7yTS"><img src="https://s11.ax1x.com/2024/01/26/pFm7yTS.png" alt="BrandMapper"></a></p><p>​    编写xml映射文件</p><p><a href="https://imgse.com/i/pFm7cFg"><img src="https://s11.ax1x.com/2024/01/26/pFm7cFg.png" alt="BrandMapper.xml"></a></p><p>​    执行测试</p><p><a href="https://imgse.com/i/pFm7fln"><img src="https://s11.ax1x.com/2024/01/26/pFm7fln.png" alt="测试方法以及运行结果"></a></p><p>​    上述为最基本的使用代理的查询方式，但是注意，查询到的数据有些是封装上的，有些没有被封装上为null。原因是因为表的字段名称与实体类的字段名称不一致，如表中叫<code>brand_name</code>，而实体类中叫<code>brandName</code></p><p>​    解决方案1：将查询的sql语句起别名，别名与实体类一致；缺点每个sql查询都要定义一次别名</p><p>​    解决方案1优化：使用sql片段防止重复写一段sql，注意sql标签要写在mapper标签里面；缺点不灵活</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--在BrandMapper.xml中使用sql片段--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper.BrandMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--sql片段--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand_column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id,brand_name as brandName,company_name as companyName,ordered,description,status    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pojo.Brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand_column<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        from tb_brand    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    解决方案2：使用resultMap灵活的解决（最常用）</p><p>​    resultMap可以将实体类属性与表的字段映射，使用resultMap替换之前的resultType</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 自己对比代码感受一下，首先是type="pojo.Brand"是全限定名，id是唯一标识--></span><span class="token comment">&lt;!-- 这里&lt;select id="selectAll" resultMap="brandResultMap">使用的是resultMap，而不是resultType--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper.BrandMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- property是实体类属性名，column是数据库里列名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pojo.Brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 主键用id，其他键用result--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>companyName<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>company_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *        from tb_brand    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-通过id查询某条记录详情"><a href="#2-通过id查询某条记录详情" class="headerlink" title="(2)通过id查询某条记录详情"></a>(2)通过id查询某条记录详情</h5><p>​    编写mapper接口方法：selectById(int id)</p><p><a href="https://imgse.com/i/pFnLfJO"><img src="https://s11.ax1x.com/2024/01/27/pFnLfJO.png" alt="BrandMapper.java"></a></p><p>​    编写xml映射文件，注意：参数类型：parameterType可以省略，因为只传了一个参数</p><p><a href="https://imgse.com/i/pFnL5Se"><img src="https://s11.ax1x.com/2024/01/27/pFnL5Se.png" alt="BrandMapper.xml"></a></p><p>​    执行测试</p><p><a href="https://imgse.com/i/pFnLOFf"><img src="https://s11.ax1x.com/2024/01/27/pFnLOFf.png" alt="运行结果"></a></p><p>​    <strong>知识点：mybatis参数占位符</strong></p><ol><li><p>#{}：在执行sql时会将其替换为?，可以防止SQL注入</p><pre class="line-numbers language-none"><code class="language-none">select * from tb_brand where id&#x3D;#&#123;id&#125;&#x2F;&#x2F;假设传值1&#x2F;&#x2F;执行结果：select * from tb_brand where id&#x3D;?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>${}：拼sql，会存在SQL注入问题</p><pre class="line-numbers language-none"><code class="language-none">select * from tb_brand where id&#x3D;$&#123;id&#125;&#x2F;&#x2F;假设传值1&#x2F;&#x2F;执行结果：select * from tb_brand where id&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用时机</p><ul><li>参数传递的时候使用：#{}</li><li>动态传递sql的表名或列名不固定时使用：${}</li></ul></li></ol><p>​    <strong>知识点：特殊字符处理方法</strong></p><p>​    因为sql语句是写在xml文件中，所以有些字符不能正常使用比如<code>&lt;</code> </p><ol><li><p>使用转义字符</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//原sql：select * from tb_brand where id&lt;$&#123;id&#125;//转义改为select * from tb_brand where id <span class="token entity named-entity" title="&lt;">&amp;lt;</span> $&#123;id&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用CDATA区</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;原sql：select * from tb_brand where id&lt;$&#123;id&#125;&#x2F;&#x2F;CDATA区&lt;![CDATA[ 内容 ]]&gt;，中间写要用的字符select * from tb_brandwhere id &lt;![CDATA[ &lt; ]]&gt; #&#123;id&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="3-多条件查询-难点-：通过多个条件查询记录"><a href="#3-多条件查询-难点-：通过多个条件查询记录" class="headerlink" title="(3)多条件查询(难点)：通过多个条件查询记录"></a>(3)多条件查询(难点)：通过多个条件查询记录</h5><p>​    对于多条件参数的接收mybatis有三种接收方式</p><ol><li><p>使用注解<code>@Param接收</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">></span></span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token keyword">int</span> status<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"companyName"</span><span class="token punctuation">)</span><span class="token class-name">String</span> companyName<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"brandName"</span><span class="token punctuation">)</span><span class="token class-name">String</span> brandName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：@Param(“值”)要和xml中#{值}相对应</p></li><li><p>使用实体类封装后传参：用实体类set方法封装</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">></span></span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 注意：这里要作为条件的brand实体类的属性要和xml中#{}里的值一一对应，不然会封装不上</p></li><li><p>使用map封装后传参：</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Brand</span><span class="token punctuation">></span></span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span><span class="token class-name">Map</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 注意：这里要作为条件的Map的键要和xml中#{}里的值一一对应，不然会封装不上</p></li></ol><p>​    </p><p>​    上面三个条件查询mapper统一对应的xml如下所示</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByCondition<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>select *from tb_brandwherestatus=#&#123;status&#125;and company_name like #&#123;companyName&#125;and brand_name like #&#123;brandName&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>对第一种做一个示例</strong></p><p>​    编写mapper方法selectByCondition</p><p><a href="https://imgse.com/i/pFuNMrV"><img src="https://s11.ax1x.com/2024/01/29/pFuNMrV.png" alt="BrandMapper.java"></a></p><p>​    编写mapper的xml映射文件</p><p><a href="https://imgse.com/i/pFuN3aF"><img src="https://s11.ax1x.com/2024/01/29/pFuN3aF.png" alt="BrandMapper.xml"></a></p><p>​    测试执行，注意我这里为方便数据直接写了”%华为%”，正常是需要字符串选择模糊查询的方式<code>%</code>or<code>_</code></p><p><a href="https://imgse.com/i/pFuNNx1"><img src="https://s11.ax1x.com/2024/01/29/pFuNNx1.png" alt="运行测试"></a></p><p>​    注意：此时可以查询到数据，但是用户输入数据时可以不是三个，是一个或者两个，那么这时需要使用动态的多条件查询</p><h5 id="4-动态多条件查询-难点-：解决上面条件查询的问题"><a href="#4-动态多条件查询-难点-：解决上面条件查询的问题" class="headerlink" title="(4)动态多条件查询(难点)：解决上面条件查询的问题"></a>(4)动态多条件查询(难点)：解决上面条件查询的问题</h5><p>​    SQL语句会随着用户的输入或外部条件的变化而变化，我们称为动态SQL </p><p>​    将3示例改为动态SQL查询只需要修改mapper的xml映射文件为动态SQL，修改后的xml文件如下图所示</p><p><a href="https://imgse.com/i/pF3v2Fg"><img src="https://s11.ax1x.com/2024/02/11/pF3v2Fg.png" alt="修改后的xml映射文件"></a></p><p>​    注意：这里xml使用了三个参数在定义的mapper映射里面也要有三个参数对应，使用接口方法时的传参可以是null因为这里我使用动态sql保证程序正常运行</p><h4 id="3-动态sql语句"><a href="#3-动态sql语句" class="headerlink" title="3. 动态sql语句"></a>3. 动态sql语句</h4><p>​    MyBatis的动态sql提供if、choose、trim、foreach</p><h5 id="1-动态sql-if"><a href="#1-动态sql-if" class="headerlink" title="(1) 动态sql-if"></a>(1) 动态sql-if</h5><p><a href="https://imgse.com/i/pClpOw8"><img src="https://s1.ax1x.com/2023/06/17/pClpOw8.png" alt="if的使用例子"></a></p><p>​    其中where标签类似于<code>1=1</code>，让sql语句在没有where条件的时候也能正常执行，但<code>1=1</code>在没有条件时会查询出表中所有字段，而使用where标签就不会</p><p>​    if标签中的test<strong>必写</strong>，test里面写判断条件，写的是传入参数的判断，标签里写要拼凑的sql语句</p><h5 id="2-动态sql-choose-when-otherwise-：选择一个，类似Java中的switch语句"><a href="#2-动态sql-choose-when-otherwise-：选择一个，类似Java中的switch语句" class="headerlink" title="(2) 动态sql-choose(when,otherwise)：选择一个，类似Java中的switch语句"></a>(2) 动态sql-choose(when,otherwise)：选择一个，类似Java中的switch语句</h5><p><a href="https://imgse.com/i/pF89iDI"><img src="https://s11.ax1x.com/2024/02/11/pF89iDI.png" alt="choose的使用例子"></a></p><p>​    注意：这里where语句可以使用<code>&lt;where&gt;</code> 标签</p><h5 id="3-动态sql-foreach"><a href="#3-动态sql-foreach" class="headerlink" title="(3) 动态sql-foreach"></a>(3) 动态sql-foreach</h5><p>​    对于where传递参数像in关键字(多个or)时，可以使用foreach</p><p><a href="https://imgse.com/i/pCNRplT"><img src="https://s1.ax1x.com/2023/06/25/pCNRplT.png" alt="pCNRplT.png"></a></p><p>​    注意，<code>collection</code> 属性的值是传递集合应该与要传递的集合的名字一致，该集合可以是Java自带的，也可以是自定义的，以便 MyBatis 可以正确地将参数值传递给 <code>foreach</code> 元素进行循环迭代。</p><p>​    <code>open</code> 属性指定在循环开始时要输出的字符串，<code>separator</code> 属性指定在每个元素之间要输出的字符串，<code>close</code> 属性指定在循环结束时要输出的字符串。</p><p>​    <code>foreach</code> 元素的 <code>item</code> 属性指定循环中的当前元素变量名，其类似于增强for循环的x，作循环输出使用。<code>#&#123;id&#125;</code> 是一个占位符，代表当前循环的元素，这里使用了 MyBatis 的参数注入方式。</p><p>​    <code>item=&quot;id&quot;</code> 表示在循环中每个元素的变量名是 <code>id</code>。<code>#&#123;id&#125;</code> 则用于在 SQL 语句中引用这个变量，并将它替换为实际的元素值</p><h4 id="4-MyBatis的添加操作"><a href="#4-MyBatis的添加操作" class="headerlink" title="4. MyBatis的添加操作"></a>4. MyBatis的添加操作</h4><h5 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h5><p>​    修改操作和增加操作很像</p><p>​    在UserMapper.xml文件中编写修改操作</p><p><a href="https://imgse.com/i/p9BDgfJ"><img src="https://s1.ax1x.com/2023/05/09/p9BDgfJ.png" alt="p9BDgfJ.png"></a></p><p>​    在测试类中进行测试</p><p><a href="https://imgse.com/i/p9BrCtg"><img src="https://s1.ax1x.com/2023/05/09/p9BrCtg.png" alt="p9BrCtg.png"></a></p><h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><p>​    删除操作只需要传递一个id数字即可删除整行，所以不需要传递对象</p><p>​    在UserMapper.xml文件中编写删除操作，因为是传递整型，所以parameterType的值为整型的全包名；<code>#&#123;id&#125;</code>因为这里是只有一个类型且是简单类型的值，所以写啥都可以比如<code>#&#123;XXX&#125;</code>，写成id是为了提高代码可读性</p><p><a href="https://imgse.com/i/p9BrMh4"><img src="https://s1.ax1x.com/2023/05/09/p9BrMh4.png" alt="p9BrMh4.png"></a></p><p>​    在测试类中进行测试</p><p><a href="https://imgse.com/i/p9Br2E8"><img src="https://s1.ax1x.com/2023/05/09/p9Br2E8.png" alt="p9Br2E8.png"></a></p><p>​    删除操作的注意事项</p><p><a href="https://imgse.com/i/p9BsFUO"><img src="https://s1.ax1x.com/2023/05/09/p9BsFUO.png" alt="p9BsFUO.png"></a></p><h4 id="2-MyBatis映射文件深入"><a href="#2-MyBatis映射文件深入" class="headerlink" title="2. MyBatis映射文件深入"></a>2. MyBatis映射文件深入</h4><h5 id="4-sql语句的抽取"><a href="#4-sql语句的抽取" class="headerlink" title="(4) sql语句的抽取"></a>(4) sql语句的抽取</h5><pre><code>  使用sql标签进行抽取，抽取后通过定义的id名进行引入</code></pre><p><a href="https://imgse.com/i/pCNRXuD"><img src="https://s1.ax1x.com/2023/06/25/pCNRXuD.png" alt="pCNRXuD.png"></a></p><h4 id="3-MyBatis核心配置文件深入"><a href="#3-MyBatis核心配置文件深入" class="headerlink" title="3. MyBatis核心配置文件深入"></a>3. MyBatis核心配置文件深入</h4><h5 id="1-typeHandlers标签"><a href="#1-typeHandlers标签" class="headerlink" title="(1) typeHandlers标签"></a>(1) typeHandlers标签</h5><p>​    因为在Java和JDBC数据提取与存储的过程中相同的数据类型在这两种语言的存储方式是不一样的，MyBatis使用默认的类型处理器来对数据类型进行转换，有时如果需要指定类型转换就需要使用typeHandlers标签自定义进行转换</p><p><a href="https://imgse.com/i/pCNW6VH"><img src="https://s1.ax1x.com/2023/06/25/pCNW6VH.png" alt="pCNW6VH.png"></a></p><p><a href="https://imgse.com/i/pCNWxMT"><img src="https://s1.ax1x.com/2023/06/25/pCNWxMT.png" alt="pCNWxMT.png"></a></p><p>​    实际开发中，泛型改为你要转化的类型，回调方法是MyBatis框架会自动调用，只需要将其设置好就可以了</p><p>​    自定义类型转换器的实现</p><p>​    实现<code>BaseTypeHandler&lt;T&gt;</code>接口，并实现其对应的四个方法</p><p><a href="https://imgse.com/i/pCNjsLd"><img src="https://s1.ax1x.com/2023/06/25/pCNjsLd.png" alt="前两个方法"></a></p><p><a href="https://imgse.com/i/pCNj5Qg"><img src="https://s1.ax1x.com/2023/06/25/pCNj5Qg.png" alt="后两个方法"></a></p><p>​    在MyBatis核心配置文件中配置，把该类的全限定名进行配置</p><p><a href="https://imgse.com/i/pCNvlkt"><img src="https://s1.ax1x.com/2023/06/25/pCNvlkt.png" alt="pCNvlkt.png"></a></p><p>​    编写测试代码</p><p><a href="https://imgse.com/i/pCNvd7n"><img src="https://s1.ax1x.com/2023/06/25/pCNvd7n.png" alt="pCNvd7n.png"></a></p><h5 id="2-plugins标签-插件标签"><a href="#2-plugins标签-插件标签" class="headerlink" title="(2) plugins标签(插件标签)"></a>(2) plugins标签(插件标签)</h5><p><a href="https://imgse.com/i/pCNxn3T"><img src="https://s1.ax1x.com/2023/06/25/pCNxn3T.png" alt="pCNxn3T.png"></a></p><p>​    plugins标签的解析步骤</p><p>​    在pom.xml文件中导入pagehelper坐标和jsqlparser</p><p><a href="https://imgse.com/i/pCNx4bj"><img src="https://s1.ax1x.com/2023/06/25/pCNx4bj.png" alt="pCNx4bj.png"></a></p><p>​    在MyBatis核心配置文件中编写配置PageHelper插件</p><p><a href="https://imgse.com/i/pC0uvGt"><img src="https://s1.ax1x.com/2023/06/29/pC0uvGt.png" alt="pC0uvGt.png"></a></p><p>​    在数据库中进行分页查询时，不同的数据库系统可能有不同的方言（Dialect）来支持分页查询。以下是一些常见的数据库系统及其对应的方言：</p><ol><li>MySQL：MySQL 方言的分页查询可以使用 LIMIT 和 OFFSET 子句。通常的语法是 <code>LIMIT &lt;pageSize&gt; OFFSET &lt;offset&gt;</code>，其中 <code>&lt;pageSize&gt;</code> 是每页的记录数，<code>&lt;offset&gt;</code> 是偏移量（页数减一乘以每页记录数）。</li></ol><p>​    在测试代码中设置分页相关的参数，除了代码演示的还有很多，包括是否为第一页、是否为最后一页等</p><p><a href="https://imgse.com/i/pC0Qk3q"><img src="https://s1.ax1x.com/2023/06/29/pC0Qk3q.png" alt="pC0Qk3q.png"></a></p><h4 id="4-知识小结"><a href="#4-知识小结" class="headerlink" title="4. 知识小结"></a>4. 知识小结</h4><p><a href="https://imgse.com/i/pC0QmbF"><img src="https://s1.ax1x.com/2023/06/29/pC0QmbF.png" alt="pC0QmbF.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mabatis01</title>
      <link href="/2023/11/13/Mabatis01/"/>
      <url>/2023/11/13/Mabatis01/</url>
      
        <content type="html"><![CDATA[<h4 id="1-原始jdbc操作分析"><a href="#1-原始jdbc操作分析" class="headerlink" title="1. 原始jdbc操作分析"></a>1. 原始jdbc操作分析</h4><p>​    原始jdbc开发存在的问题如下：</p><p>​    1. 数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能<br>​    2. sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码<br>​    3. 查询操作时，需要手动将结果集的数据手动封装到实体中。插入操作时，需要手动将实体的数据设置到sql语句的占位符位置</p><p>​    应对上述问题给出的解决方案</p><p>​    1. 使用数据库连接池初始化连接资源<br>​    2. 将sql语句抽取到xml配置文件中<br>​    3. 使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射    </p><h4 id="2-MyBatis简介"><a href="#2-MyBatis简介" class="headerlink" title="2. MyBatis简介"></a>2. MyBatis简介</h4><p>​    MyBatis就是实现上面解决方案的框架</p><p><a href="https://imgse.com/i/p907DEQ"><img src="https://s1.ax1x.com/2023/05/09/p907DEQ.png" alt="p907DEQ.png"></a></p><p>​    注意：持久层指的就是Dao层</p><h4 id="3-MyBatis传统开发步骤"><a href="#3-MyBatis传统开发步骤" class="headerlink" title="3. MyBatis传统开发步骤"></a>3. MyBatis传统开发步骤</h4><p>​    1. 添加MyBatis坐标<br>​    2. 创建user数据表，添加数据<br>​    3. 编写User实体类<br>​    4. 编写接口定义需要的方法(这个是我学到后面加的,因为MyBatis是动态代理的)<br>​    5. 编写映射文件UserMapper.xml，里面主要写sql语句<br>​    6. 编写核心文件SqlMapConfig.xml，里面主要是MyBatis框架的核心配置<br>​    7. 编写测试类</p><p>​    在pom.xml文件中引入坐标，主要是要引入jdbc驱动和MyBatis框架</p><p><a href="https://imgse.com/i/p90HdR1"><img src="https://s1.ax1x.com/2023/05/09/p90HdR1.png" alt="p90HdR1.png"></a></p><p>​    创建User数据库表</p><p><a href="https://imgse.com/i/p90HrqO"><img src="https://s1.ax1x.com/2023/05/09/p90HrqO.png" alt="p90HrqO.png"></a></p><p>​    创建数据库表对应的实体，生成get()、set()以及toString()方法</p><p><a href="https://imgse.com/i/p90H6de"><img src="https://s1.ax1x.com/2023/05/09/p90H6de.png" alt="p90H6de.png"></a></p><p>​    编写映射文件UserMapper.xml，在文件中需要引入约束头，这个约束头是官网可以找到的，下图中前两行为约束头；namespace为命名空间通过命名空间才能找到对应的sql语句；id为命名空间下对应的sql方法，resultType为对应实体表的映射，表示查询结果放在映射的实体类的对象中吗，namespace可以随意写。另外，如果没有在Idea和数据库连接，那么idea不会自动识别表信息则<code>user</code>会爆红</p><p><a href="https://imgse.com/i/p90bpeU"><img src="https://s1.ax1x.com/2023/05/09/p90bpeU.png" alt="p90bpeU.png"></a></p><p>​    编写核心文件，配置MyBatis框架，核心文件也有对应的约束头，下图前两行为约束头；default表示默认的数据源环境，将要默认的数据源的id作为属性值传入，<code>&lt;transactionManager type=&quot;&quot;&gt;</code>表示事务管理器要指定的类型；<code>&lt;dataSource type=&quot;&quot;&gt;</code>表示数据源的类型，内部为jdbc连接参数，核心文件中除了配置数据源环境还需要加载映射文件</p><p><a href="https://imgse.com/i/p90buwD"><img src="https://s1.ax1x.com/2023/05/09/p90buwD.png" alt="核心文件图1"></a></p><p><a href="https://imgse.com/i/p9B95y4"><img src="https://s1.ax1x.com/2023/05/09/p9B95y4.png" alt="核心文件图1"></a></p><p>​    新建一个java类编写测试代码</p><p><a href="https://imgse.com/i/p9BC44P"><img src="https://s1.ax1x.com/2023/05/09/p9BC44P.png" alt="p9BC44P.png"></a></p><h4 id="4-MyBatis映射文件概述"><a href="#4-MyBatis映射文件概述" class="headerlink" title="4. MyBatis映射文件概述"></a>4. MyBatis映射文件概述</h4><p><a href="https://imgse.com/i/p9B1lpF"><img src="https://s1.ax1x.com/2023/05/09/p9B1lpF.png" alt="p9B1lpF.png"></a></p><h4 id="5-MyBatis的代理开发方式-企业开发常用"><a href="#5-MyBatis的代理开发方式-企业开发常用" class="headerlink" title="5. MyBatis的代理开发方式(企业开发常用)"></a>5. MyBatis的代理开发方式(企业开发常用)</h4><h5 id="1-代理开发方式的要求"><a href="#1-代理开发方式的要求" class="headerlink" title="(1) 代理开发方式的要求"></a>(1) 代理开发方式的要求</h5><p><a href="https://imgse.com/i/pCQvj2t"><img src="https://s1.ax1x.com/2023/06/17/pCQvj2t.png" alt="要求1"></a></p><p>​    即如下图所示</p><p><a href="https://imgse.com/i/pCQxCVg"><img src="https://s1.ax1x.com/2023/06/17/pCQxCVg.png" alt="pCQxCVg.png"></a></p><p>​    <strong>注意：除了上述要求外，代理开发中xml文件和Mapper接口要放置在同一目录下</strong></p><p>​    <strong>(2)代理开发方式步骤</strong></p><p>​    编写xml文件和Dao的接口，按照上面四点配置一一对应</p><p><a href="https://imgse.com/i/pCQx8R1"><img src="https://s1.ax1x.com/2023/06/17/pCQx8R1.png" alt="pCQx8R1.png"></a></p><p><a href="https://imgse.com/i/pCQxtsK"><img src="https://s1.ax1x.com/2023/06/17/pCQxtsK.png" alt="pCQxtsK.png"></a></p><p>​    在service层中通过反射获取接口的对象，注意：与原先传统方式有别的是sqlSession对象调用的方法，且传统是在Dao的实现进行配置，而代理方式直接在service层进行相应配置，这个<strong>生成的mapper对象可以调用所有配置好的方法</strong></p><p><a href="https://imgse.com/i/pCQxDJA"><img src="https://s1.ax1x.com/2023/06/17/pCQxDJA.png" alt="pCQxDJA.png"></a></p><p>​    <strong>(3)代理开发的包扫描</strong></p><p>​    在代理开发中，核心配置文件的xml文件扫描可以替换为包扫描，这样可以简化开发</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--加载sql映射文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/test/mapper/UserMapper.xml/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Mapper代理方式的包扫描--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/test/mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-MyBatis的核心配置文件中的标签"><a href="#6-MyBatis的核心配置文件中的标签" class="headerlink" title="6. MyBatis的核心配置文件中的标签"></a>6. MyBatis的核心配置文件中的标签</h4><h5 id="1-environments标签"><a href="#1-environments标签" class="headerlink" title="(1) environments标签"></a>(1) environments标签</h5><p>​    数据库环境的配置，支持多环境配置</p><p><a href="https://imgse.com/i/pCkg661"><img src="https://s1.ax1x.com/2023/06/08/pCkg661.png" alt="pCkg661.png"></a></p><p>​    注意：default的属性值给的是下面的id值，表示默认环境</p><p><a href="https://imgse.com/i/pCk22gs"><img src="https://s1.ax1x.com/2023/06/08/pCk22gs.png" alt="pCk22gs.png"></a></p><p>​    UNPOOLED表面于POOLED效果差不多，但是它的底层实现没有使用数据源连接池，而是使用传统的JDBC的获得请求，释放请求资源</p><h5 id="2-mapper标签"><a href="#2-mapper标签" class="headerlink" title="(2) mapper标签"></a>(2) mapper标签</h5><p>​    该标签的作用是加载映射的，加载方式有如下几种：</p><p><a href="https://imgse.com/i/pCkRxQs"><img src="https://s1.ax1x.com/2023/06/08/pCkRxQs.png" alt="pCkRxQs.png"></a></p><p>​    第三种是注释的方式，第四种是指扫包，意味着包下的全部实现注册为映射器，第一种是当前用的最多也是最重要的方式</p><h5 id="3-Properties标签"><a href="#3-Properties标签" class="headerlink" title="(3) Properties标签"></a>(3) Properties标签</h5><p>​    实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件</p><p>​    通过导入对应properties文件来解耦合</p><p><a href="https://imgse.com/i/pCZuiB6"><img src="https://s1.ax1x.com/2023/06/11/pCZuiB6.png" alt="pCZuiB6.png"></a></p><h5 id="4-typeAliases标签"><a href="#4-typeAliases标签" class="headerlink" title="(4) typeAliases标签"></a>(4) typeAliases标签</h5><p>​    通过typeAliases标签设置全限定名的别名</p><p><a href="https://imgse.com/i/pCZKCGQ"><img src="https://s1.ax1x.com/2023/06/11/pCZKCGQ.png" alt="pCZKCGQ.png"></a>    全限定名的使用场景</p><p><a href="https://imgse.com/i/pCZKixs"><img src="https://s1.ax1x.com/2023/06/11/pCZKixs.png" alt="pCZKixs.png"></a></p><p>​    使用别名后</p><p><a href="https://imgse.com/i/pCZKKG4"><img src="https://s1.ax1x.com/2023/06/11/pCZKKG4.png" alt="pCZKKG4.png"></a></p><p>​    注意：常用的类型MyBatis已经帮我们设置好了别名，下表数据类型没有写权限定名有些不够严谨，如下图所示</p><p><a href="https://imgse.com/i/pCZKILq"><img src="https://s1.ax1x.com/2023/06/11/pCZKILq.png" alt="pCZKILq.png"></a></p><h5 id="5-标签的顺序"><a href="#5-标签的顺序" class="headerlink" title="(5) 标签的顺序"></a>(5) 标签的顺序</h5><p>​    在MyBatis的xml配置文件中，标签应该按照如下顺序进行配置</p><p><a href="https://imgse.com/i/pCZK2FS"><img src="https://s1.ax1x.com/2023/06/11/pCZK2FS.png" alt="pCZK2FS.png"></a></p><h4 id="7-MyBatis相应API"><a href="#7-MyBatis相应API" class="headerlink" title="7. MyBatis相应API"></a>7. MyBatis相应API</h4><h5 id="1-SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#1-SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="(1) SqlSession工厂构建器SqlSessionFactoryBuilder"></a>(1) SqlSession工厂构建器SqlSessionFactoryBuilder</h5><p><a href="https://imgse.com/i/pCm1kp8"><img src="https://s1.ax1x.com/2023/06/13/pCm1kp8.png" alt="pCm1kp8.png"></a></p><h5 id="2-SqlSession工厂对象SqlSessionFactory"><a href="#2-SqlSession工厂对象SqlSessionFactory" class="headerlink" title="(2) SqlSession工厂对象SqlSessionFactory"></a>(2) SqlSession工厂对象SqlSessionFactory</h5><p><a href="https://imgse.com/i/pCm1gHA"><img src="https://s1.ax1x.com/2023/06/13/pCm1gHA.png" alt="pCm1gHA.png"></a></p><p>​    注意：只有增删改操作会用到这个事物操作</p><h5 id="3-SqlSession会话对象"><a href="#3-SqlSession会话对象" class="headerlink" title="(3) SqlSession会话对象"></a>(3) SqlSession会话对象</h5><p>​    第一个API是指查询一个对象(返回值是泛型)，后四个为查增改删操作</p><p>​    注意：第一个参数是MyBatis的xml文件所定义的方法，第二个参数是xml文件中所定义的方法要的参数</p><p><a href="https://imgse.com/i/pCm3Pb9"><img src="https://s1.ax1x.com/2023/06/13/pCm3Pb9.png" alt="pCm3Pb9.png"></a></p><p>​    后两个方法是事务的操作</p><p>​    注意：后面学习Spring框架后，事务交给Spring完成</p>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构08</title>
      <link href="/2023/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8408/"/>
      <url>/2023/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8408/</url>
      
        <content type="html"><![CDATA[<h2 id="查找和排序"><a href="#查找和排序" class="headerlink" title="查找和排序"></a>查找和排序</h2><h4 id="1-查找和排序的关系"><a href="#1-查找和排序的关系" class="headerlink" title="1. 查找和排序的关系"></a>1. 查找和排序的关系</h4><p>​    排序是查找的前提，排序是重点</p><h4 id="2-排序的稳定性"><a href="#2-排序的稳定性" class="headerlink" title="2. 排序的稳定性"></a>2. 排序的稳定性</h4><p>​    当两个元素值是一样的设定为A和B，A在B的前面，在排完序之后A依然在B的前面则称排序是稳定的，否则排序是不稳定的</p><h4 id="3-排序"><a href="#3-排序" class="headerlink" title="3. 排序"></a>3. 排序</h4><ul><li><p>冒泡</p></li><li><p>插入</p><p>从两个元素开始，按照规定插入，保证这两个有序，然后插入第三个元素并保证这三个元素有序，依次类推</p></li><li><p>选择</p><p>以升序为例，在所有的元素中筛选出最小的，然后与序列中第一个元素交换位置，再从剩余元素中找出最小的与序列的第二个元素交换位置，依次类推</p></li><li><p>快速排序</p></li><li><p>归并排序</p><p>两个两个有序，四个四个有序，最后整体有序</p></li></ul><h4 id="4-选择排序的算法实现-直接选择排序"><a href="#4-选择排序的算法实现-直接选择排序" class="headerlink" title="4. 选择排序的算法实现-直接选择排序"></a>4. 选择排序的算法实现-直接选择排序</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//直接选择排序</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a <span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>min<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//选出最小元素</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>min<span class="token operator">=</span>i <span class="token punctuation">,</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;</span>len <span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将最小的值与前排元素交换位置</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token operator">!=</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-快速排序"><a href="#5-快速排序" class="headerlink" title="5. 快速排序"></a>5. 快速排序</h4><p>​    先找到某一个元素的排好序的确切位置，一般假定是第一个元素，把数据变为两半，然后在这两半数据中再重复之前动作，直到完全排好序</p><p>​    快速排序细节上也分为很多种，但整体思路是一样的</p><p>​    当前讲解一种的伪算法</p><p>​    假设升序排序，首先定义两个指针(L、H)分别指向首元素和末尾元素，将首元素的值保存在临时变量(val)中。</p><p>​    先移动h，将h指的值与val里的值作比较，如果h所指的值比val的小，则将h所指的值赋给L所指的值，若比val大则继续移动h；值发生交换则开始移动L，L所指的值与val作比较，如果比val小则继续移动L，如果比val大，则将L所指的指赋给H所指的值，值发生交换则开始移动H；以此类推，最后当L与H相交时，将val赋值给两个指针所指向的节点，以该节点作为分界在分别对截成的两个数组的前后进行快速排序</p><p><a href="https://imgse.com/i/p9xnifH"><img src="https://s1.ax1x.com/2023/05/31/p9xnifH.png" alt="第一轮快速排序后的数组元素顺序"></a></p><p>​    范例：快速排序算法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//递归调用快速排序</span><span class="token keyword">void</span> <span class="token function">Quicksort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a <span class="token punctuation">,</span><span class="token keyword">int</span> low <span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">findnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Quicksort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a <span class="token punctuation">,</span><span class="token keyword">int</span> low <span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>high<span class="token operator">></span>low<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">findnum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Quicksort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>low<span class="token punctuation">,</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Quicksort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//找出第一个元素完全排好序后应该放在的位置，在该位置放置该元素，并将该位置返回</span><span class="token keyword">int</span> <span class="token function">findnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>high<span class="token operator">></span>low<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>high<span class="token operator">></span>low<span class="token operator">&amp;&amp;</span>tmp<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            high<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>high<span class="token operator">></span>low<span class="token operator">&amp;&amp;</span>tmp<span class="token operator">>=</span>a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            low<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    a<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">return</span> low<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">Quicksort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-全课总结"><a href="#6-全课总结" class="headerlink" title="6. 全课总结"></a>6. 全课总结</h4><p>​    <strong>再次讨论什么是数据结构？</strong></p><p>​    答：数据结构是研究数据的存储和数据操作的一门学问</p><p>​    <strong>数据的存储分为哪两个部分？</strong></p><p>​    答：个体的存储</p><p>​            个体关系的存储</p><p>​            从某个角度而言，数据的存储最核心的就是个体关系的存储，个体的存储可以忽略不计</p><p>​    <strong>再次讨论什么是泛型</strong></p><p>​    答：同一种逻辑结构，无论该逻辑结构物理存储是什么样子的，我们可以对它执行相同的操作</p><h4 id="7-未来展望"><a href="#7-未来展望" class="headerlink" title="7. 未来展望"></a>7. 未来展望</h4><p>​    学习图，如深度遍历，广度遍历</p><p>​    学习哈希表</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring07</title>
      <link href="/2023/05/31/Spring07/"/>
      <url>/2023/05/31/Spring07/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring的事务控制"><a href="#Spring的事务控制" class="headerlink" title="Spring的事务控制"></a>Spring的事务控制</h2><h4 id="1-编程式事务控制三大对象"><a href="#1-编程式事务控制三大对象" class="headerlink" title="1. 编程式事务控制三大对象"></a>1. 编程式事务控制三大对象</h4><p><strong>(1). PlatformTransactionManager(平台事务管理器)</strong></p><p>​    PlatformTransactionManager接口是Spring的事务管理器，它里面提供了我们常用的操作事务的方法</p><p><a href="https://imgse.com/i/p9dvSyt"><img src="https://s1.ax1x.com/2023/05/07/p9dvSyt.png" alt="p9dvSyt.png"></a></p><p>​    注意：PlatformTransactionManager是接口类型，不同的Dao层技术有不同的事项类，如Dao层技术是jdbc或mybatis时为：<code>org.springframework.jdbc.datasource.DataSourceTransactionManager</code>，Dao层技术是hibernate时为：<code>org.springframework.orm.hibernate5.HibernateTransactionManager</code></p><p><strong>(2). TransactionDefinition(事务定义对象)</strong></p><p>​    它里面有如下方法</p><p><a href="https://imgse.com/i/p9dxKgA"><img src="https://s1.ax1x.com/2023/05/07/p9dxKgA.png" alt="p9dxKgA.png"></a></p><p>​    这个里面的api不重要，<strong>重要的是明白对象是封装一些事物相关参数</strong></p><p>​    事务的隔离级别</p><p><a href="https://imgse.com/i/p9dxBD0"><img src="https://s1.ax1x.com/2023/05/07/p9dxBD0.png" alt="p9dxBD0.png"></a></p><p>​    事务的传播行为</p><p><a href="https://imgse.com/i/p9wz9tU"><img src="https://s1.ax1x.com/2023/05/08/p9wz9tU.png" alt="p9wz9tU.png"></a></p><p><strong>(3). TransactionStatus(事物的状态对象)</strong></p><p>​    TransactionStatus接口提供的是事物具体的运行状态，方法介绍如下(api不重要，了解即可)</p><p><a href="https://imgse.com/i/p9wzTD1"><img src="https://s1.ax1x.com/2023/05/08/p9wzTD1.png" alt="p9wzTD1.png"></a></p><p>​    注意：事物的状态是被动信息不是主动设置的</p><p><strong>(4). 三者的关系</strong></p><p>​    平台事务管理器：控制事物行为，需要通过配置方式指定</p><p>​    事务定义对象：维护事物的参数信息，需要通过配置方式指定</p><p>​    事物的状态对象：在事物运行的过程中封装状态信息，被动的产生</p><p>​    平台事务管理器+事务定义对象=事物的状态对象</p><h4 id="2-基于XML的声明式事务控制"><a href="#2-基于XML的声明式事务控制" class="headerlink" title="2. 基于XML的声明式事务控制"></a>2. 基于XML的声明式事务控制</h4><p><strong>(1).什么是声明式事务控制</strong></p><p><a href="https://imgse.com/i/p90SHMj"><img src="https://s1.ax1x.com/2023/05/08/p90SHMj.png" alt="p90SHMj.png"></a></p><p>​    注意：Spring对于声明式事务控制的底层实现是AOP</p><p><strong>(2).声明式事务的实现</strong></p><p>​    声明式事务控制明确事项：</p><ul><li>谁是切点：就是业务方法(在service层)</li><li>谁是通知：就是事务控制</li><li>配置切面：增强和切点配置</li></ul><p>​    基础三个层，controller层执行方法提交，service层编写业务方法，Dao层编写底层jdbc方法</p><p>​    controller层</p><p><a href="https://imgse.com/i/p909KhT"><img src="https://s1.ax1x.com/2023/05/08/p909KhT.png" alt="p909KhT.png"></a></p><p>​    service层</p><p><a href="https://imgse.com/i/p909Vns"><img src="https://s1.ax1x.com/2023/05/08/p909Vns.png" alt="p909Vns.png"></a></p><p>​    Dao层</p><p><a href="https://imgse.com/i/p909Ch8"><img src="https://s1.ax1x.com/2023/05/08/p909Ch8.png" alt="p909Ch8.png"></a></p><p>​    上述三层的业务逻辑为，A账户向B账户转钱，A账户-500，B账户+500，问题在于service层如果执行完accountDao.out()方法后被异常中断，会导致A账户减少了钱，但B账户没有增加钱</p><p>​    <strong>通过声明式事务改进上面业务</strong></p><p>​    对于事务的增强，需要引入对应的命名空间<code>tx</code>，pom.xml文件中也需要引入</p><p><a href="https://imgse.com/i/p90903D"><img src="https://s1.ax1x.com/2023/05/08/p90903D.png" alt="p90903D.png"></a></p><p><a href="https://imgse.com/i/p9092UP"><img src="https://s1.ax1x.com/2023/05/08/p9092UP.png" alt="p9092UP.png"></a></p><p>​        在xml文件中，将service层作为目标对象，内部的那个业务方法作为切点。在平台事务管理器中注入了dataSource为数据源对象。在配置事务通知中，<code>transaction-manager=&quot;&quot;</code>属性值为平台事务管理器。配置事务的织入中，<code>&lt;aop:advisor&gt;</code>表示为aop对事物织入，其中<code>advice-ref</code>为通知引用</p><p><a href="https://imgse.com/i/p90P2p8"><img src="https://s1.ax1x.com/2023/05/08/p90P2p8.png" alt="p90P2p8.png"></a></p><p><a href="https://imgse.com/i/p90CqLd"><img src="https://s1.ax1x.com/2023/05/08/p90CqLd.png" alt="p90CqLd.png"></a></p><p>​    注意：织入方式也可以抽取切点表达式</p><p>​    <code>&lt;tx:attributes&gt;</code>表示定义事务的属性信息，<code>&lt;tx:method&gt;</code>可以配置多个，其中<code>name</code>属性表示哪些方法被增强，<code>*</code>表示任意方法，其还有其他属性，详细看TransactionDefinition(事务定义对象)这一小节</p><p>​    详细写全后的代码，name表示切点方法名称，isolation表示事务的隔离级别，propagation表示事务的传播行为，timeout表示超时时间，read-only表示是否只读</p><p><a href="https://imgse.com/i/p90iyDJ"><img src="https://s1.ax1x.com/2023/05/08/p90iyDJ.png" alt="p90iyDJ.png"></a></p><h4 id="3-基于注解的声明式事务控制"><a href="#3-基于注解的声明式事务控制" class="headerlink" title="3. 基于注解的声明式事务控制"></a>3. 基于注解的声明式事务控制</h4><p>​    对上面业务使用注解方式配置</p><p>​    dao层代码</p><p><a href="https://imgse.com/i/p90AK41"><img src="https://s1.ax1x.com/2023/05/08/p90AK41.png" alt="p90AK41.png"></a></p><p>​    service层代码，<code>@Transactional</code>注解写在方法前表示对当前方法增加事务，写在类前表示对类中所有方法增加事务，该注解编译时遵循就近原则，该注解可以配置例如隔离级别、传播行为等</p><p><a href="https://imgse.com/i/p90A42V"><img src="https://s1.ax1x.com/2023/05/08/p90A42V.png" alt="p90A42V.png"></a></p><p>​    在xml文件中配置组件扫描</p><p><a href="https://imgse.com/i/p90AGuD"><img src="https://s1.ax1x.com/2023/05/08/p90AGuD.png" alt="p90AGuD.png"></a></p><p>​    不能被注解代替的xml配置以及在xml文件中配置注解驱动</p><p><a href="https://imgse.com/i/p90P2p8"><img src="https://s1.ax1x.com/2023/05/08/p90P2p8.png" alt="p90P2p8.png"></a></p><p><a href="https://imgse.com/i/p90Ah80"><img src="https://s1.ax1x.com/2023/05/08/p90Ah80.png" alt="p90Ah80.png"></a></p><p>​    controller层测试</p><p><a href="https://imgse.com/i/p90ATrF"><img src="https://s1.ax1x.com/2023/05/08/p90ATrF.png" alt="p90ATrF.png"></a></p><p>​    总结</p><p><a href="https://imgse.com/i/p90EPVH"><img src="https://s1.ax1x.com/2023/05/08/p90EPVH.png" alt="p90EPVH.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring06</title>
      <link href="/2023/05/31/Spring06/"/>
      <url>/2023/05/31/Spring06/</url>
      
        <content type="html"><![CDATA[<h4 id="1-SpringAOP的入门"><a href="#1-SpringAOP的入门" class="headerlink" title="1. SpringAOP的入门"></a>1. SpringAOP的入门</h4><p><strong>SpringAOP的简介</strong></p><p><a href="https://imgse.com/i/p9GSeds"><img src="https://s1.ax1x.com/2023/05/01/p9GSeds.png" alt="p9GSeds.png"></a></p><p><a href="https://imgse.com/i/p9GS1QU"><img src="https://s1.ax1x.com/2023/05/01/p9GS1QU.png" alt="p9GS1QU.png"></a></p><p>​    你可以理解为，一个项目A功能要和B、C、D三个功能结合形成三个不同的功能，传统OOP哪怕封装也需要进行调用，而AOP则是写好A功能放那就行，通过配置的方式使用A功能，<strong>即这4个功能相互独立，在运行时(内存中)通过配置指定结合，A功能可以看作一个增强，A和B功能通过配置方式结合组合的功能叫做切面</strong></p><p><strong>AOP的作用及其优势</strong></p><ul><li>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强</li><li>优势：减少重复代码，提高开发效率，并且便于维护</li></ul><p><strong>AOP的底层实现</strong></p><p><a href="https://imgse.com/i/p9GpwAs"><img src="https://s1.ax1x.com/2023/05/01/p9GpwAs.png" alt="p9GpwAs.png"></a></p><p><strong>SpringAOP的动态代理技术</strong></p><ul><li>JDK代理：基于接口的动态代理技术</li><li>cglib代理：基于父类的动态代理技术</li></ul><p><a href="https://imgse.com/i/p9GpfE9"><img src="https://s1.ax1x.com/2023/05/01/p9GpfE9.png" alt="p9GpfE9.png"></a></p><p><strong>JDK代理</strong></p><p>​    上一个blog有详细代码，这里略</p><p><strong>cglib代理</strong></p><p>​    在导入的<code>Spring-conntext</code>中已经集成了cglib的坐标，不需要额外导包</p><p>​    基于cglib生成代理对象的步骤</p><pre><code>1. 创建增强器 2. 设置父类 3. 设置回调 4. 创建代理对象</code></pre><p>​    cglib的代码演示，Target是目标对象，Advice是添加功能的对象里面有要添加的方法，内部的intercept方法类似invoke方法其中methodProxy形参不用管</p><p><a href="https://imgse.com/i/p9NNBuR"><img src="https://s1.ax1x.com/2023/05/05/p9NNBuR.png" alt="p9NNBuR.png"></a></p><p><a href="https://imgse.com/i/p9NNPcd"><img src="https://s1.ax1x.com/2023/05/05/p9NNPcd.png" alt="p9NNPcd.png"></a></p><h4 id="2-AOP相关概念"><a href="#2-AOP相关概念" class="headerlink" title="2. AOP相关概念"></a>2. AOP相关概念</h4><p>​    <strong>AOP的相关术语</strong></p><ul><li>Target(目标对象)：代理的目标对象</li><li>Proxy(代理)：一个类被AOP植入增强后产生的一个结果代理类</li><li>Joinpoint(连接点)：所谓连接点是指那些被拦截到的点(方法)。在Spring中，这些点指的是方法，因为Spring只支持方法类型的连接点，<strong>可以被增强的方法叫做连接点</strong></li><li><strong>Pointcut(切入点)**：切入点是指我们要对哪些Joipoint进行拦截的定义，</strong>连接点真正要被增强了叫做切入点**</li><li><strong>Advice(通知/增强)**：通知是指拦截到Joinpoint之后所要做的事情就是通知，</strong>将连接点和一些功能结合的方法叫做增强**</li><li>**Aspect(切面)**：是切入点和通知(引介)的结合</li><li>Weaving(织入)：是指把增强应用到目标对象来创建新的代理对象的过程。Spring采用动态代理织入，而Aspect采用编译期织入和类装载期织入，<strong>切入点和通知结合的过程</strong></li></ul><h4 id="3-AOP开发明确的事项"><a href="#3-AOP开发明确的事项" class="headerlink" title="3. AOP开发明确的事项"></a>3. AOP开发明确的事项</h4><p><a href="https://imgse.com/i/p9NgXkQ"><img src="https://s1.ax1x.com/2023/05/05/p9NgXkQ.png" alt="p9NgXkQ.png"></a></p><h4 id="4-基于XML的AOP开发"><a href="#4-基于XML的AOP开发" class="headerlink" title="4. 基于XML的AOP开发"></a>4. 基于XML的AOP开发</h4><p> <strong>(1)基于XML的AOP开发的步骤</strong></p><ol><li>导入AOP相关坐标</li><li>创建目标接口和目标类(内部有切点)</li><li>创建切面类(内部有增强方法)</li><li>将目标类和切面类的对象创建权交给spring</li><li>在<code>applicationContext.xml</code>中配置织入关系</li><li>测试代码</li></ol><p>​    在pom.xml导入spring-context和aspectjweaver坐标，spring本身有aop的实现，第三方aspectj也有且很优秀，spring官方主张使用aspectj</p><p><a href="https://imgse.com/i/p9NhHIO"><img src="https://s1.ax1x.com/2023/05/05/p9NhHIO.png" alt="p9NhHIO.png"></a></p><p>​    创建目标接口和目标类，下图只有目标类</p><p><a href="https://imgse.com/i/p9N5Pn1"><img src="https://s1.ax1x.com/2023/05/05/p9N5Pn1.png" alt="p9N5Pn1.png"></a></p><p>​    创建切面类</p><p><a href="https://imgse.com/i/p9N4sld"><img src="https://s1.ax1x.com/2023/05/05/p9N4sld.png" alt="p9N4sld.png"></a></p><p>​    创建xml文件完成配置，将目标对象和切面对象交给Spring管理，并在xml文件中告诉Spring框架哪些切点需要被增强。<strong>注意：aop需要引入命名空间</strong>。其中，<code>aop:before</code>表示在切点之前执行<code>mehod=&quot;&quot;</code>方法，pointcut里面配置的是切点表达式里面的方法是要被增强的方法</p><p>​    <code>&lt;aop:config&gt;</code>：表示aop的配置</p><p>​    <code>&lt;aop:aspect ref=&quot;myAspect&quot;&gt;</code>：指定切面是谁</p><p>​    <code>&lt;aop:before&gt;</code>：表示增强(通知)的类型</p><p>​    <code>method=&quot;before&quot;&gt;</code>：表示前置增强要执行的方法的名字是什么，即切面myAspect内部的before方法</p><p>​    <code>pointcup=&quot;execution(public void com.itheima.aop.Target.save())&quot;</code>：表示切点表达式，<strong>可以通过切点表达式指定多个方法，见下面详解</strong></p><p><a href="https://imgse.com/i/p9NHU0A"><img src="https://s1.ax1x.com/2023/05/05/p9NHU0A.png" alt="p9NHU0A.png"></a></p><p><a href="https://imgse.com/i/p9NHkWT"><img src="https://s1.ax1x.com/2023/05/05/p9NHkWT.png" alt="p9NHkWT.png"></a></p><p>​    测试代码，在pom.xml配置</p><p><a href="https://imgse.com/i/p9NbQBj"><img src="https://s1.ax1x.com/2023/05/05/p9NbQBj.png" alt="p9NbQBj.png"></a></p><p>​    编写测试代码</p><p><a href="https://imgse.com/i/p9NbUvF"><img src="https://s1.ax1x.com/2023/05/05/p9NbUvF.png" alt="p9NbUvF.png"></a></p><p>​    运行结果</p><p><a href="https://imgse.com/i/p9NbDER"><img src="https://s1.ax1x.com/2023/05/05/p9NbDER.png" alt="p9NbDER.png"></a></p><p> <strong>(2)切点表达式的写法</strong></p><p>​    表达式语法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//execution是关键字</span><span class="token function">execution</span><span class="token punctuation">(</span><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 方法返回值类型 包名<span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>访问修饰符可以省略</li><li>返回值类型、包名、类名、方法名可以使用星号<code>*</code>代表任意</li><li>包名与类名之间一个点<code>.</code>代表当前包下的类，两个点<code>..</code>表示当前包及该包子包下的类</li><li>参数列表可以使用两个点<code>..</code>表示任意个数、任意类型的参数列表</li></ul><p>​    最常用的形式：表示aop包下的任意类的任意方法任意参数任意返回值</p><p><a href="https://imgse.com/i/p9UOiee"><img src="https://s1.ax1x.com/2023/05/06/p9UOiee.png" alt="p9UOiee.png"></a></p><p> <strong>(3)通知的种类</strong></p><p>​    通知的配置语法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>aop<span class="token operator">:</span>通知类型 method<span class="token operator">=</span><span class="token string">"切面类中方法名"</span> pointcut<span class="token operator">=</span><span class="token string">"切点表达式"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>通知类型<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    通知的类型</p><p><a href="https://imgse.com/i/p9UOtS0"><img src="https://s1.ax1x.com/2023/05/06/p9UOtS0.png" alt="p9UOtS0.png"></a></p><p>​    <strong>注意：除环绕通知外其余的都比较简单，不需要传特定参数，直接使用就行</strong></p><p>​    环绕通知</p><p>​    因为无法区分里面的方法是在之前执行还是之后执行，所以在编写环绕通知的方法时要给一个参数类型<code>ProceedingJoinPoint pjp</code>该参数表示切点，通过<code>pjp.proceed()</code>方法区分在其前面执行的方法在切点前执行，在其后执行的方法在切点后执行</p><p>​    在MyAspect.java中编写环绕通知的方法</p><p><a href="https://imgse.com/i/p9UXobF"><img src="https://s1.ax1x.com/2023/05/06/p9UXobF.png" alt="p9UXobF.png"></a></p><p> <strong>(4)切点表达式的抽取</strong></p><p><a href="https://imgse.com/i/p9UjM5j"><img src="https://s1.ax1x.com/2023/05/06/p9UjM5j.png" alt="p9UjM5j.png"></a></p><p>​    对之前代码进行抽取</p><p><a href="https://imgse.com/i/p9Uj32q"><img src="https://s1.ax1x.com/2023/05/06/p9Uj32q.png" alt="p9Uj32q.png"></a></p><p> <strong>(5)知识要点总结</strong></p><p><a href="https://imgse.com/i/p9Ujrxx"><img src="https://s1.ax1x.com/2023/05/06/p9Ujrxx.png" alt="p9Ujrxx.png"></a></p><h4 id="5-基于注解的AOP开发"><a href="#5-基于注解的AOP开发" class="headerlink" title="5. 基于注解的AOP开发"></a>5. 基于注解的AOP开发</h4><p><strong>(1)基于注解的aop开发步骤</strong></p><p><a href="https://imgse.com/i/p9ar2nO"><img src="https://s1.ax1x.com/2023/05/06/p9ar2nO.png" alt="p9ar2nO.png"></a></p><p>​    编写目标类，接口略</p><p><a href="https://imgse.com/i/p9aRBq0"><img src="https://s1.ax1x.com/2023/05/06/p9aRBq0.png" alt="p9aRBq0.png"></a></p><p>​    编写切面类</p><p><a href="https://imgse.com/i/p9aWaFO"><img src="https://s1.ax1x.com/2023/05/06/p9aWaFO.png" alt="p9aWaFO.png"></a></p><p>​    编写xml配置</p><p><a href="https://imgse.com/i/p9aWx1J"><img src="https://s1.ax1x.com/2023/05/06/p9aWx1J.png" alt="p9aWx1J.png"></a></p><p>​    编写测试类</p><p><a href="https://imgse.com/i/p9af34S"><img src="https://s1.ax1x.com/2023/05/06/p9af34S.png" alt="p9af34S.png"></a></p><p><strong>(2)注解通知的类型</strong></p><p>​    通知配置的语法：<code>@通知注解(&quot;切点表达式&quot;)</code></p><p>​    注解通知的类型</p><p><a href="https://imgse.com/i/p9af2uR"><img src="https://s1.ax1x.com/2023/05/06/p9af2uR.png" alt="p9af2uR.png"></a></p><p>​    注意：注解只是替代原先xml文件的配置，但是需要的方法还是要有的，例如环绕配置如下</p><p><a href="https://imgse.com/i/p9afoCD"><img src="https://s1.ax1x.com/2023/05/06/p9afoCD.png" alt="p9afoCD.png"></a></p><p><strong>(3)切点表达式的抽取</strong></p><p><a href="https://imgse.com/i/p9ahFrn"><img src="https://s1.ax1x.com/2023/05/06/p9ahFrn.png" alt="p9ahFrn.png"></a></p><p><strong>(4)注解开发aop的小结</strong></p><p><a href="https://imgse.com/i/p9ahaxH"><img src="https://s1.ax1x.com/2023/05/06/p9ahaxH.png" alt="p9ahaxH.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构07</title>
      <link href="/2023/05/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8407/"/>
      <url>/2023/05/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8407/</url>
      
        <content type="html"><![CDATA[<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h4 id="1-树的定义"><a href="#1-树的定义" class="headerlink" title="1. 树的定义"></a>1. 树的定义</h4><p>​    <strong>专业的定义：</strong></p><p>​    1. 有且只有一个称为根的节点<br>​    2. 有若干个互不相交的子树，这些子树本身也是一颗树</p><p>​    <strong>通俗的定义：</strong></p><p>​    1. 树是由节点和边(指针)组成<br>​    2. 每个节点只有一个父节点但可以有多个子节点<br>​    3. 但有一个节点例外，该节点没有父节点，此节点称为根节点</p><h4 id="2-树的专业术语"><a href="#2-树的专业术语" class="headerlink" title="2. 树的专业术语"></a>2. 树的专业术语</h4><ul><li>节点：树的节点由数据元素及其若干分支组成</li><li>父节点：节点上面紧挨着的节点</li><li>子节点：父节点下面一层的节点</li><li>兄弟：父节点下的所有子结点互为兄弟结点</li><li>子孙：以某节点为根的子树中的任一节点</li><li>深度：从根节点到最底层节点的层数，根节点是第一层</li><li>叶子节点：没有子节点的节点</li><li>非终端节点：非叶子节点</li><li>度：子节点的个数</li></ul><p>​    </p><h4 id="3-树的分类"><a href="#3-树的分类" class="headerlink" title="3. 树的分类"></a>3. 树的分类</h4><ul><li><p>一般树</p><p>任意一个节点的子节点的个数都不受限制</p></li><li><p>二叉树</p><p>任意一个节点的子节点的个数最多两个，且子节点的位置不可更改</p></li><li><p>森林</p><p>n个互不相交的树的集合</p></li></ul><h4 id="4-二叉树的分类"><a href="#4-二叉树的分类" class="headerlink" title="4. 二叉树的分类"></a>4. 二叉树的分类</h4><ul><li><p>一般二叉树</p></li><li><p>满二叉树</p><p>在不增加树的层数的情况下，无法再多添加一个节点的二叉树</p></li><li><p>完全二叉树</p><p>如果只是删除了满二叉树最底层最右边的连续若干个节点，这样形成的二叉树就是完全二叉树</p></li></ul><h4 id="5-树的存储"><a href="#5-树的存储" class="headerlink" title="5. 树的存储"></a>5. 树的存储</h4><h5 id="1-二叉树的存储-比较成熟"><a href="#1-二叉树的存储-比较成熟" class="headerlink" title="(1) 二叉树的存储(比较成熟)"></a>(1) 二叉树的存储(比较成熟)</h5><p>​    <strong>连续存储[必须是完全二叉树]</strong></p><p>​    优点：查找某个节点的父节点和子节点(也包括判断有没有子节点)速度很快，时间复杂度O(1)</p><p>​    缺点：耗用内存空间过大</p><p>​    当二叉树不是完全的时候需要去补全，先转换为满二叉树再转化为完全二叉树，如下图所示，蓝色为补全节点，黄框可以不补全</p><p><a href="https://imgse.com/i/p9IHXcR"><img src="https://s1.ax1x.com/2023/05/22/p9IHXcR.png" alt="图5.1 二叉树补全"></a></p><p>​    存蓝点的原因是方便还原树的形状</p><p>​    通过先序、中序、后序可以将树从非线性结构转换为线性结构，使用数组存储时，不可以 只存储有效节点，因为只通过先序、中序、后序的任一一种无法还原原先的二叉树</p><p>​    <strong>链式存储(不是链表存)</strong></p><p>​    每一个节点分成三个部分，左右存指针，中间存数据</p><p><a href="https://imgse.com/i/p9oSKUI"><img src="https://s1.ax1x.com/2023/05/22/p9oSKUI.png" alt="图5.2 链式存储树的方式"></a></p><p>​    内存浪费：空指针浪费n+1个</p><p>​    找父节点也很困难</p><h5 id="2-一般树的存储方法"><a href="#2-一般树的存储方法" class="headerlink" title="(2) 一般树的存储方法"></a>(2) 一般树的存储方法</h5><ol><li><p>双亲表示法</p><p>使用数组的方式进行存储，一个存储块分为两个区域，一个区域存节点名，另一个区域存父节点所在的数组元素的下标</p><p><strong>双亲表示法求父节点方便</strong></p><p><a href="https://imgse.com/i/p9TKczF"><img src="https://s1.ax1x.com/2023/05/23/p9TKczF.png" alt="p9TKczF.png"></a></p><p><a href="https://imgse.com/i/p9TKBaq"><img src="https://s1.ax1x.com/2023/05/23/p9TKBaq.png" alt="双亲表示法"></a></p></li><li><p>孩子表示法</p><p>使用数组的方式进行存储，也是分成两个区域，一个区域存节点，另一个区域是链表存指针依次指向其子节点</p><p><strong>孩子表示法求子节点方便</strong></p><p><a href="https://imgse.com/i/p9TJNbF"><img src="https://s1.ax1x.com/2023/05/23/p9TJNbF.png" alt="左边为树，右边是表示方法"></a></p></li><li><p>孩子双亲表示法</p><p>把上面两种方法结合在一起，在数组中存放三个域</p><p><strong>求父节点和子节点都很方便</strong></p><p><a href="https://imgse.com/i/p9TJI2t"><img src="https://s1.ax1x.com/2023/05/23/p9TJI2t.png" alt="p9TJI2t.png"></a></p></li><li><p>二叉树表示法</p><p>因为在实现过程中对于孩子双亲表示法不方便，所以使用了二叉树表示法，<strong>二叉树方便使用代码来表示</strong>，详细见第6大节</p></li></ol><h5 id="3-森林的存储"><a href="#3-森林的存储" class="headerlink" title="(3) 森林的存储"></a>(3) 森林的存储</h5><p>​    一般是把森林转化为二叉树再进行存储</p><p>​    把森林中每一个树的根节点当作兄弟节点，然后像一般树转化为二叉树那样将森林转换为二叉树</p><p><a href="https://imgse.com/i/p97CHeS"><img src="https://s1.ax1x.com/2023/05/24/p97CHeS.png" alt="森林转化为二叉树"></a></p><h4 id="6-普通树的二叉树表示法"><a href="#6-普通树的二叉树表示法" class="headerlink" title="6. 普通树的二叉树表示法"></a>6. 普通树的二叉树表示法</h4><p>​    把一个普通树转化成二叉树来存储</p><p>​    <strong>转换方法：设法保证任意一个节点的左指针域指向它的第一个孩子，右指针域指向它的兄弟节点，只要能满足此条件，就可以把一个普通树转化为二叉树</strong></p><p><a href="https://imgse.com/i/p9TYbS1"><img src="https://s1.ax1x.com/2023/05/23/p9TYbS1.png" alt="普通树转化为二叉树图示"></a></p><p>​    一个普通树转化成的二叉树一定没有右子树</p><h4 id="7-二叉树的操作"><a href="#7-二叉树的操作" class="headerlink" title="7. 二叉树的操作"></a>7. 二叉树的操作</h4><p>​    1. 遍历，先中后的遍历都是指二叉树的遍历<br>​    2. 已知两种遍历序列求原始二叉树</p><p>​        <strong>通过先中或中后遍历序列可以还原二叉树</strong>，但先后不能还原出原始二叉树</p><p>​    <strong>注意：遍历时当访问到根节点时将该节点记录</strong></p><h5 id="1-二叉树的先序遍历"><a href="#1-二叉树的先序遍历" class="headerlink" title="(1). 二叉树的先序遍历"></a>(1). 二叉树的先序遍历</h5><p>​    <strong>先序遍历[先访问根节点]</strong></p><p>​    递归的进行(先访问树的根节点，再访问左子树，再访问右子树)</p><p><a href="https://imgse.com/i/p9bvb4A"><img src="https://s1.ax1x.com/2023/05/26/p9bvb4A.png" alt="p9bvb4A.png"></a></p><h5 id="2-二叉树的中序遍历"><a href="#2-二叉树的中序遍历" class="headerlink" title="(2). 二叉树的中序遍历"></a>(2). 二叉树的中序遍历</h5><p>​    <strong>中序遍历[中间访问根节点]</strong></p><p>​    递归的进行(先遍历树的左子树，再访问根节点，再遍历右子树)</p><p><a href="https://imgse.com/i/p9qSLC9"><img src="https://s1.ax1x.com/2023/05/26/p9qSLC9.png" alt="p9qSLC9.png"></a></p><h5 id="3-二叉树的后序遍历"><a href="#3-二叉树的后序遍历" class="headerlink" title="(3). 二叉树的后序遍历"></a>(3). 二叉树的后序遍历</h5><p>​    <strong>后序遍历[最后访问根节点]</strong></p><p>​    递归的进行(先遍历树的左子树，再遍历右子树，再访问根节点)</p><p><a href="https://imgse.com/i/p9qPRaT"><img src="https://s1.ax1x.com/2023/05/26/p9qPRaT.png" alt="p9qPRaT.png"></a></p><h5 id="4-已知先序和中序求后序"><a href="#4-已知先序和中序求后序" class="headerlink" title="(4). 已知先序和中序求后序"></a>(4). 已知先序和中序求后序</h5><p>​    首先使用先序和中序将二叉树求出来，然后再通过二叉树求出后序</p><p>​    使用先序确定节点顺序(找每个子树的根节点)，中序确定是左子树还是右子树</p><p><a href="https://imgse.com/i/p9X15FS"><img src="https://s1.ax1x.com/2023/05/29/p9X15FS.png" alt="由先序和中序得出原始二叉树"></a></p><p>​    从树可以得出后序为：DECBHGFA</p><h5 id="5-已知中序和后序求先序"><a href="#5-已知中序和后序求先序" class="headerlink" title="(5). 已知中序和后序求先序"></a>(5). 已知中序和后序求先序</h5><p>​    首先使用中序和后序将二叉树求出来，然后再通过二叉树求出先序</p><p>​    使用后序确定节点顺序(找根节点，子树中最后出现的节点为根节点)，中序确定是左子树还是右子树，把大的树不断递归上面方法变成小树最后得出具体节点</p><p><a href="https://imgse.com/i/p9X82Uf"><img src="https://s1.ax1x.com/2023/05/29/p9X82Uf.png" alt="由中序和后序得出原始二叉树"></a></p><p>​    从树可以得出先序为：ABCDEFGH</p><h4 id="8-树的应用"><a href="#8-树的应用" class="headerlink" title="8. 树的应用"></a>8. 树的应用</h4><ul><li><p>树是数据库中数据组织一种重要形式</p></li><li><p>操作系统子、父进程的关系本身就是一棵树</p></li><li><p>面向对象语言中类的继承关系</p></li><li><p>哈夫曼树：一个事物有n种可能取值，每一种取值又有不同的概率，如何使得工作的效率达到最高</p></li></ul><h4 id="9-链式二叉树遍历的具体程序演示"><a href="#9-链式二叉树遍历的具体程序演示" class="headerlink" title="9. 链式二叉树遍历的具体程序演示"></a>9. 链式二叉树遍历的具体程序演示</h4><p>​    静态链式二叉树的创建与先序、中序、后序遍历代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token comment">//二叉树英文叫Binart Tree</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BTNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    <span class="token comment">//p是指针 L是左 child是子节点</span>    <span class="token keyword">struct</span> <span class="token class-name">BTNode</span> <span class="token operator">*</span>pLchild<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">BTNode</span> <span class="token operator">*</span>pRchlid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BTN<span class="token punctuation">,</span><span class="token operator">*</span>PBTN<span class="token punctuation">;</span><span class="token comment">//该函数为静态的创造树，但内存是需要动态分配的</span>PBTN <span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先序遍历</span><span class="token keyword">void</span>  <span class="token function">PreTraverseBTree</span><span class="token punctuation">(</span>PBTN pT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//中序遍历</span><span class="token keyword">void</span>  <span class="token function">InTraverseBTree</span><span class="token punctuation">(</span>PBTN pT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后序遍历</span><span class="token keyword">void</span>  <span class="token function">PostTraverseBTree</span><span class="token punctuation">(</span>PBTN pT<span class="token punctuation">)</span><span class="token punctuation">;</span>PBTN <span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    PBTN pA <span class="token operator">=</span> <span class="token punctuation">(</span>PBTN<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PBTN pB <span class="token operator">=</span> <span class="token punctuation">(</span>PBTN<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PBTN pC <span class="token operator">=</span> <span class="token punctuation">(</span>PBTN<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PBTN pD <span class="token operator">=</span> <span class="token punctuation">(</span>PBTN<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PBTN pE <span class="token operator">=</span> <span class="token punctuation">(</span>PBTN<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pA<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    pA<span class="token operator">-></span>pLchild <span class="token operator">=</span> pB<span class="token punctuation">;</span>    pA<span class="token operator">-></span>pRchlid <span class="token operator">=</span> pC<span class="token punctuation">;</span>    pB<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>    pB<span class="token operator">-></span>pLchild <span class="token operator">=</span> pB<span class="token operator">-></span>pRchlid <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    pC<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>    pC<span class="token operator">-></span>pLchild <span class="token operator">=</span> pD<span class="token punctuation">;</span>    pC<span class="token operator">-></span>pRchlid <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    pD<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">;</span>    pD<span class="token operator">-></span>pLchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    pD<span class="token operator">-></span>pRchlid <span class="token operator">=</span> pE<span class="token punctuation">;</span>    pE<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token string">'E'</span><span class="token punctuation">;</span>    pE<span class="token operator">-></span>pLchild <span class="token operator">=</span> pE<span class="token operator">-></span>pRchlid <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//返回根节点的地址</span>    <span class="token keyword">return</span> pA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PreTraverseBTree</span><span class="token punctuation">(</span>PBTN pT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> pT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span>pT<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> pT<span class="token operator">-></span>pLchild<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">PreTraverseBTree</span><span class="token punctuation">(</span>pT<span class="token operator">-></span>pLchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> pT<span class="token operator">-></span>pRchlid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">PreTraverseBTree</span><span class="token punctuation">(</span>pT<span class="token operator">-></span>pRchlid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span>  <span class="token function">InTraverseBTree</span><span class="token punctuation">(</span>PBTN pT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> pT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> pT<span class="token operator">-></span>pLchild<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">InTraverseBTree</span><span class="token punctuation">(</span>pT<span class="token operator">-></span>pLchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span>pT<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> pT<span class="token operator">-></span>pRchlid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">InTraverseBTree</span><span class="token punctuation">(</span>pT<span class="token operator">-></span>pRchlid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span>  <span class="token function">PostTraverseBTree</span><span class="token punctuation">(</span>PBTN pT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> pT<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> pT<span class="token operator">-></span>pLchild<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">PostTraverseBTree</span><span class="token punctuation">(</span>pT<span class="token operator">-></span>pLchild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> pT<span class="token operator">-></span>pRchlid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">PostTraverseBTree</span><span class="token punctuation">(</span>pT<span class="token operator">-></span>pRchlid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span>pT<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    PBTN pT <span class="token operator">=</span> <span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PostTraverseBTree</span><span class="token punctuation">(</span>pT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构06</title>
      <link href="/2023/05/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8406/"/>
      <url>/2023/05/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8406/</url>
      
        <content type="html"><![CDATA[<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h4 id="1-递归的定义"><a href="#1-递归的定义" class="headerlink" title="1. 递归的定义"></a>1. 递归的定义</h4><p>​    一个函数自己直接或间接调用自己</p><h4 id="2-递归满足的三个条件"><a href="#2-递归满足的三个条件" class="headerlink" title="2. 递归满足的三个条件"></a>2. 递归满足的三个条件</h4><ol><li>一个明确的终止条件</li><li>该函数所处理的数据规模必须在递减(相对于终止条件而言)</li><li>这个转化必须是可解的</li></ol><h4 id="3-循环和递归的区别"><a href="#3-循环和递归的区别" class="headerlink" title="3. 循环和递归的区别"></a>3. 循环和递归的区别</h4><p>​    理论上所有的循环都可以转化为递归，但用递归解决的问题用循环不一定可以解决</p><p><strong>递归的特点</strong></p><ul><li>易理解</li><li>速度慢</li><li>存储空间大</li></ul><p><strong>循环的特点</strong></p><ul><li>不易理解</li><li>速度快</li><li>存储空间小</li></ul><h4 id="4-汉诺塔"><a href="#4-汉诺塔" class="headerlink" title="4. 汉诺塔"></a>4. 汉诺塔</h4><p>​     汉诺塔的伪算法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>先把A柱子上的前n<span class="token operator">-</span><span class="token number">1</span>个盘子从A借助C移动到B将A柱子上的第n个盘子直接移到C再将B柱子上的n<span class="token operator">-</span><span class="token number">1</span>个盘子借助A移到C<span class="token punctuation">&#125;</span><span class="token comment">//当n的值等于1时可以直接移动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    C语言对于汉诺塔的实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//函数参数的意义：将n个盘子从x借助y移动到z</span><span class="token keyword">void</span> <span class="token function">hannota</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">char</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> y <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> z <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入有几个盘子：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将A上n个盘子借助B移动到C</span>    <span class="token function">hannota</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//x,y,z对应A,B,C</span><span class="token keyword">void</span> <span class="token function">hannota</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> x<span class="token punctuation">,</span><span class="token keyword">char</span> y<span class="token punctuation">,</span><span class="token keyword">char</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"直接将第%d个盘子从%c移动到%c\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将A上的n-1个盘子借助C移动到B</span>        <span class="token function">hannota</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将第n个盘子从A移动到C</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"直接将第%d个盘子从%c移动到%c\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//最后将B上n-1个盘子借助A移动到C，此时B等于是之前的A，A与B的角色相互转化</span>        <span class="token function">hannota</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-递归的应用"><a href="#5-递归的应用" class="headerlink" title="5. 递归的应用"></a>5. 递归的应用</h4><p>​    树和森林就是递归的方式定义的</p><p>​    树和图的很多算法都是以递归来实现</p><p>​    很多数学公式就是以递归方式定义的，如斐波拉契序列(1,2,3,5,8,13,21,34)</p><h4 id="6-为什么数据结构难"><a href="#6-为什么数据结构难" class="headerlink" title="6. 为什么数据结构难"></a>6. 为什么数据结构难</h4><p>​    需要将现实中多维的事务在计算机中以一维内存的方式进行表示</p><p>​    在Java中，ArrayList是数组实现的，LinkedList是链表实现的</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java动态代理</title>
      <link href="/2023/05/04/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2023/05/04/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="1-代理模式的概念"><a href="#1-代理模式的概念" class="headerlink" title="1. 代理模式的概念"></a>1. 代理模式的概念</h4><p>​    为其他对象提供一种代理以控制对这个对象的访问，在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户类和目标对象之间起到桥梁的作用</p><h4 id="2-代理的作用"><a href="#2-代理的作用" class="headerlink" title="2. 代理的作用"></a>2. 代理的作用</h4><p>​    1. 功能增强：在原有的功能上增加额外的功能，新增加的功能叫做功能增强<br>​    2. 控制访问：代理类不让直接访问目标</p><h4 id="3-代理的实现方式"><a href="#3-代理的实现方式" class="headerlink" title="3. 代理的实现方式"></a>3. 代理的实现方式</h4><ol><li><p>静态代理</p><p>代理类是自己手工实现的，自己创建一个Java类，表示代理类，同时你所要代理的目标类是确定的</p></li><li><p>动态代理</p><p>当静态代理中目标类很多的时候，可以使用动态代理，避免静态代理具有的缺点</p></li></ol><h4 id="4-静态代理详解"><a href="#4-静态代理详解" class="headerlink" title="4. 静态代理详解"></a>4. 静态代理详解</h4><p>​    静态代理的特点：实现简单、容易理解</p><p>​    静态代理的缺点：当目标类增加，代理类可能也需要成倍的增加，造成代理类数量过多；当接口中功能增加或者修改会影响众多的实现类，厂家类，代理都需要修改</p><p>​    范例：模拟一个用户买u盘的行为，用户是客户端类，商家是代理，厂家是目标类；商家和厂家都是卖u盘的，他们完成的功能是一致的</p><p>​    三者的关系：用户(客户端)—–商家(代理)—–厂家(目标)</p><p><a href="https://imgse.com/i/p9JZg3Q"><img src="https://s1.ax1x.com/2023/05/02/p9JZg3Q.png" alt="p9JZg3Q.png"></a></p><p>​    代码太low不想copy了，大致思路：创建一个卖u盘方法，厂家实现这个方法，商家也要实现这个方法，在这个方法中商家调用厂家实现的方法，在此基础上增加一点功能(给优惠券、加价格)，用户通过调用商家的方法购买u盘</p><p>​    代理类完成的功能：<br>​    1. 目标类中方法的调用<br>​    2.  功能增强</p><h4 id="5-动态代理详解"><a href="#5-动态代理详解" class="headerlink" title="5. 动态代理详解"></a>5. 动态代理详解</h4><p>​    动态代理是指代理类对象在程序运行时由JVM根据反射机制动态生成的。动态代理不需要定义代理类的.java源文件</p><p>​    动态代理时jdk运行期间，动态创建class字节码并加载到JVM。</p><p>​    <strong>动态代理的实现方式常用的有两种</strong></p><ul><li>使用JDK动态代理：使用Java反射包<code>(java.lang.reflect)</code>中的类<code>(InvocationHandler,Method,Proxy)</code>和接口实现动态代理的功能</li><li>通过CGLIB动态代理：cglib是第三方的工具库，它可以创建代理对象；cglib的原理是继承，cglib通过继承目标类，创建它的子类，在子类中重写父类中同名的方法，实现功能的修改，因为cglib是继承，重写方法，所以要求目标类不能是final的，方法也不能是final的。cglib这个要求比较宽松所以其在很多框架都有使用，如<code>mybatis</code>，<code>spring</code></li></ul><p>​    注意：对于无接口的类，要为其创建动态代理，就要使用cglib实现</p><h4 id="6-JDK动态代理"><a href="#6-JDK动态代理" class="headerlink" title="6. JDK动态代理"></a>6. JDK动态代理</h4><p><strong>反射机制在动态代理的应用</strong></p><p>​    新建一个print接口以及printImpl和printImpl2实现类</p><p><a href="https://imgse.com/i/p9YpmBF"><img src="https://s1.ax1x.com/2023/05/03/p9YpmBF.png" alt="p9YpmBF.png"></a></p><p><a href="https://imgse.com/i/p9Yp191"><img src="https://s1.ax1x.com/2023/05/03/p9Yp191.png" alt="p9Yp191.png"></a></p><p><a href="https://imgse.com/i/p9YptBD"><img src="https://s1.ax1x.com/2023/05/03/p9YptBD.png" alt="p9YptBD.png"></a></p><p>​    通过反射机制，使得只需要替换实例的名字，就可以执行不同语句的输出</p><p><a href="https://imgse.com/i/p9YpbbF"><img src="https://s1.ax1x.com/2023/05/03/p9YpbbF.png" alt="p9YpbbF.png"></a></p><p>​    运行结果</p><p><a href="https://imgse.com/i/p9Ypx81"><img src="https://s1.ax1x.com/2023/05/03/p9Ypx81.png" alt="p9Ypx81.png"></a></p><p><strong>JDK动态代理的实现</strong></p><p>​    反射包java.lang.reflect，三个类：InvocationHandler，Method，Proxy</p><p>​    InvocationHandler(中文名：调用处理器)接口：其中只有一个方法invoke()</p><p>​    invoke方法表示代理对象要执行的功能代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>invoke方法的参数：</p><ul><li>Object proxy：jdk创建的代理对象，通过静态方法newProxyInstance()创建该代理对象，详细见下面</li><li>Method：目标类中的方法</li><li>Object[] args：目标类中方法的参数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span><span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>newProxyInstance方法的参数：</p><ul><li>ClassLoader：类加载器，负责向内存中加载对象，使用反射获取对象的classLoader，如：<code>a.getclass().getClassLoader()</code>。使用时需要<strong>目标对象的类加载器</strong></li><li>Class&lt;?&gt;[]：接口，<strong>目标对象实现的接口</strong>，也是反射获取的</li><li>InvocationHandler：<strong>自己写的代理类</strong>要完成的功能</li><li>返回值：就是代理对象</li></ul><p><strong>实现动态代理的步骤</strong></p><ol><li>创建接口，定义目标类要完成的功能</li><li>创建目标类实现接口</li><li>创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能<ul><li>调用目标方法</li><li>增强功能</li></ul></li><li>使用proxy类的静态方法，创建代理对象，并把返回值转为接口类型</li></ol><p>​    创建learn接口，定义day方法</p><p><a href="https://imgse.com/i/p9Yv1De"><img src="https://s1.ax1x.com/2023/05/04/p9Yv1De.png" alt="p9Yv1De.png"></a></p><p>​    创建learnImpl目标类实现该接口</p><p><a href="https://imgse.com/i/p9Yv0KS"><img src="https://s1.ax1x.com/2023/05/04/p9Yv0KS.png" alt="p9Yv0KS.png"></a></p><p>​    创建handle类实现InvocationHandler接口，并在invoke方法中完成代理类的功能</p><p><a href="https://imgse.com/i/p9YvWvT"><img src="https://s1.ax1x.com/2023/05/04/p9YvWvT.png" alt="p9YvWvT.png"></a></p><p>​    创建main类，在main方法中使用proxy类的静态方法创建代理对象，并由代理对象执行接口方法(增强后的)</p><p><a href="https://imgse.com/i/p9YxQGq"><img src="https://s1.ax1x.com/2023/05/04/p9YxQGq.png" alt="p9YxQGq.png"></a></p><h4 id="7-Proxy-newProxyInstance-方法的补充"><a href="#7-Proxy-newProxyInstance-方法的补充" class="headerlink" title="7. Proxy.newProxyInstance()方法的补充"></a>7. Proxy.newProxyInstance()方法的补充</h4><p>​    该方法的API</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span><span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    第一个参数：loader为用于定义代理类的类加载器，目前我已知有两种写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.先获得对象，如上面获得对象a，调用a.getClass().getClassLoader()获得</span><span class="token comment">//2.知道对象的类，使用反射加载，如上面代码以learn接口为例，使用learn.class.getClassLoader()获得</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    第二个参数：interfaces为代理类要实现的接口列表，目前我已知也有两种写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.先获得对象，如上面获得对象a，调用a.getClass().getInterfaces()获得</span><span class="token comment">//2.知道对象的类，使用反射加载，如上面代码以learn接口为例，使用new class[]&#123;learn.class&#125;获得</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring05-restful开发风格、拦截器与异常处理</title>
      <link href="/2023/04/29/Spring05-restful%E5%BC%80%E5%8F%91%E9%A3%8E%E6%A0%BC%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2023/04/29/Spring05-restful%E5%BC%80%E5%8F%91%E9%A3%8E%E6%A0%BC%E3%80%81%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="1-RESTfulAPI"><a href="#1-RESTfulAPI" class="headerlink" title="1.RESTfulAPI"></a>1.RESTfulAPI</h3><p>​    API（接口）：Web应用暴露出来的让别人访问的请求路径</p><h4 id="1-调用别人写好功能的方式"><a href="#1-调用别人写好功能的方式" class="headerlink" title="(1)调用别人写好功能的方式"></a>(1)调用别人写好功能的方式</h4><p>​    1.API：给第三方发请求，获取响应数据</p><p>​    2.SDK：导入jar包</p><h4 id="2-RESTful风格介绍"><a href="#2-RESTful风格介绍" class="headerlink" title="(2)RESTful风格介绍"></a>(2)RESTful风格介绍</h4><p>​    REST全称（Resource Representational State Transfer）主张万物皆资源，对Web的操作就是对资源的操作，在url中使用资源名作为路径，用http动词来表示对资源的操作</p><ul><li>Resource：资源</li><li>Representational：表现形式，比如JSON、XML、JPEG等</li><li>State Transfer：状态变化，通过http动词（GET、POST、PUT、DELETE）实现</li></ul><h4 id="3-REST风格的CRUD案例"><a href="#3-REST风格的CRUD案例" class="headerlink" title="(3)REST风格的CRUD案例"></a>(3)REST风格的CRUD案例</h4><h5 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h5><p>​    1.生成Spring boot项目</p><p>​    2.在application.properties中配置数据库连接</p><p>​    3.准备一个bean包（与启动类同目录，一下都一样），创建实体类employee.java</p><p>​    4.准备dao包，创建Dao的接口以及在该包下新建impl包创建Dao接口的实现类</p><p>​    5.准备service包，创建Service的接口以及在该包下新建impl包创建Service接口的实现类</p><p>​    6.将项目的maven换成自己的maven，检查导入pom.xml的坐标是否冒红</p><p>​    7.在Spring boot中编写测试代码</p><p>​    8.编写Controller类，实现具体的增删改查功能，并通过PostMan发送请求进行测试</p><h5 id="样例：REST风格的CRUD项目实战"><a href="#样例：REST风格的CRUD项目实战" class="headerlink" title="样例：REST风格的CRUD项目实战"></a>样例：REST风格的CRUD项目实战</h5><p>​    1.在idea中新建Spring boot项目，相应的配置如下图所示：</p><p><a href="https://imgse.com/i/pEtmgDx"><img src="https://s21.ax1x.com/2025/03/07/pEtmgDx.png" alt="项目配置"></a></p><p>​    2.在application.properties中配置数据库连接，<strong>注意：</strong>在 Spring Boot 中，JdbcTemplate 通常是通过 DataSource 配置自动注入的。如果你在应用中配置了 DataSource（比如通过 application.properties 文件配置数据库连接信息），Spring Boot 会自动为你创建一个 JdbcTemplate Bean，无需显式声明</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;application.propertiesspring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;restfulspring.datasource.username&#x3D;rootspring.datasource.password&#x3D;123456spring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.创建实体类employee.java</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;employee.java@Datapublic class Employee &#123;private Long id;private String name;private Integer age;private String email;private String gender;private String address;private BigDecimal salary;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    4.创建EmployeeDao.java和EmployeeDaoImpl.java；注意：要Spring容器管理的bean注释写在实现类上；以下代码实现Dao层的CRUD</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;EmployeeDao.javapublic interface EmployeeDao &#123;&#x2F;&#x2F;根据ID查询员工信息Employee getEmployeeById(Long id);&#x2F;&#x2F;新增员工void addEmployee(Employee employee);&#x2F;&#x2F;修改员工void updateEmployee(Employee employee);&#x2F;&#x2F;根据ID删除员工void deleteEmployee(Long id);&#x2F;&#x2F;查询所有List&lt;Employee&gt; getList();&#125;&#x2F;&#x2F;EmployeeDaoImpl.java@Componentpublic class EmployeeDaoImpl implements EmployeeDao &#123;@Autowiredprivate JdbcTemplate jdbcTemplate;@Overridepublic Employee getEmployeeById(Long id) &#123;String sql &#x3D; &quot;select * from employee where id &#x3D; ?&quot;;Employee employee &#x3D; jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper&lt;&gt;(Employee.class), id);return employee;&#125;@Overridepublic void addEmployee(Employee employee) &#123;String sql &#x3D; &quot;insert into employee(name, age, email, gender, address,salary) values(?,?,?,?,?,?)&quot;;int update &#x3D; jdbcTemplate.update(sql,employee.getName(),employee.getAge(),employee.getEmail(),     employee.getGender(),employee.getAddress(),employee.getSalary());System.out.println(&quot;新增成功，影响行数&quot;+update);&#125;@Overridepublic void updateEmployee(Employee employee) &#123;String sql &#x3D;&quot;update employee set name&#x3D;?,age&#x3D;?,email&#x3D;?,gender&#x3D;?,address&#x3D;?,salary&#x3D;? where id &#x3D; ?&quot;;int update &#x3D; jdbcTemplate.update(sql,employee.getName(),employee.getAge(),employee.getEmail(),employee.getGender(),employee.getAddress(),employee.getSalary(),employee.getId());System.out.println(&quot;更新成功，影响行数：&quot;+update);&#125;@Overridepublic void deleteEmployee(Long id) &#123;String sql &#x3D; &quot;delete from employee where id &#x3D; ?&quot;;int update &#x3D; jdbcTemplate.update(sql, id);&#125;@Overridepublic List&lt;Employee&gt; getList() &#123;String sql &#x3D; &quot;select * from employee&quot;;List&lt;Employee&gt; list &#x3D; jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;&gt;(Employee.class));return list;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    5.创建EmployeeService.java和EmployeeServiceImpl.java；注意：要Spring容器管理的bean注释写在实现类上</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;EmployeeService.javapublic interface EmployeeService &#123;&#x2F;&#x2F;根据id查询用户Employee getEmployeeById(Long id);&#x2F;&#x2F;保存用户void saveEmployee(Employee employee);&#x2F;&#x2F;删除用户void deleteEmployee(Long id);&#x2F;&#x2F;更新用户void updateEmployee(Employee employee);&#x2F;&#x2F;查询所有用户List&lt;Employee&gt; getList();&#125;&#x2F;&#x2F;EmployeeServiceImpl.java@Servicepublic class EmployeeServiceImpl implements EmployeeService &#123;@AutowiredEmployeeDao employeeDao;@Overridepublic Employee getEmployeeById(Long id) &#123;Employee employee &#x3D; employeeDao.getEmployeeById(id);return employee;&#125;@Overridepublic void saveEmployee(Employee employee) &#123;employeeDao.addEmployee(employee);&#125;@Overridepublic void deleteEmployee(Long id) &#123;employeeDao.deleteEmployee(id);&#125;@Overridepublic void updateEmployee(Employee employee) &#123;&#x2F;&#x2F;防null处理Long id &#x3D; employee.getId();if (id &#x3D;&#x3D; null) &#123;return;&#125;&#x2F;&#x2F;1、去数据库查询employee原来的值Employee employeeold &#x3D; employeeDao.getEmployeeById(id);&#x2F;&#x2F;2、把页面带来的覆盖原来的值，页面没带来的值保持原状&#x2F;&#x2F;姓名if (StringUtils.hasText(employee.getName())) &#123;  &#x2F;&#x2F;判断name有值（不是null，不是空串，不是空白字符）&#x2F;&#x2F;把数据库的值改为页面传来的值employeeold.setName(employee.getName());&#125;&#x2F;&#x2F;邮箱if (StringUtils.hasText(employee.getEmail())) &#123;&#x2F;&#x2F;把数据库的值改为页面传来的值employeeold.setEmail(employee.getEmail());&#125;&#x2F;&#x2F;性别if (StringUtils.hasText(employee.getGender())) &#123;&#x2F;&#x2F;把数据库的值改为页面传来的值employeeold.setGender(employee.getGender());&#125;&#x2F;&#x2F;地址if (StringUtils.hasText(employee.getAddress())) &#123;&#x2F;&#x2F;把数据库的值改为页面传来的值employeeold.setAddress(employee.getAddress());&#125;&#x2F;&#x2F;年龄if (employee.getAge() !&#x3D; null) &#123;employeeold.setAge(employee.getAge());&#125;&#x2F;&#x2F;工资if (employee.getSalary() !&#x3D; null) &#123;employeeold.setSalary(employee.getSalary());&#125;&#x2F;&#x2F;3、对数据库进行修改employeeDao.updateEmployee(employeeold);&#125;@Overridepublic List&lt;Employee&gt; getList() &#123;return employeeDao.getList();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    6.配置maven为自己的maven，自己的maven记得换镜像源，配置如下图所示</p><p><a href="https://imgse.com/i/pENSXxU"><img src="https://s21.ax1x.com/2025/03/09/pENSXxU.png" alt="配置为自己的maven"></a></p><p>​    7.在test包里Spring运行Test同级下新建EmployeeDaoTest.java作为单元测试类，以下测试的仅为Dao层，Service层同理的测法</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;EmployeeDaoTest.java@SpringBootTestpublic class EmployeeDaoTest &#123;@AutowiredEmployeeDao employeeDao;@Testvoid testEmployee() &#123;&#x2F;&#x2F;测试通过id查询emp的方法Employee emp &#x3D; employeeDao.getEmployeeById(1L);System.out.println(emp.toString());&#x2F;&#x2F;测试新增emp的方法Employee emp2 &#x3D; new Employee();emp2.setName(&quot;王五&quot;);emp2.setAge(22);emp2.setEmail(&quot;aaa&quot;);emp2.setGender(&quot;男&quot;);emp2.setAddress(&quot;广州&quot;);emp2.setSalary(new BigDecimal(&quot;0.2&quot;));employeeDao.addEmployee(emp2);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    8.编写EmployeeRestController.java，实现具体的增删改查功能</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;EmployeeRestController.java@RestControllerpublic class EmployeeRestController &#123;@AutowiredEmployeeService employeeService;@RequestMapping(value &#x3D; &quot;&#x2F;employee&#x2F;&#123;id&#125;&quot;,method &#x3D; RequestMethod.GET)public Employee get(@PathVariable Long id) &#123;Employee employee &#x3D; employeeService.getEmployeeById(id);return employee;&#125;@RequestMapping(value &#x3D; &quot;&#x2F;employee&#x2F;&#123;id&#125;&quot;,method &#x3D; RequestMethod.DELETE)public String deleteEmployee(@PathVariable(&quot;id&quot;) Long id) &#123;employeeService.deleteEmployee(id);return &quot;ok&quot;;&#125;&#x2F;&#x2F;新增员工，要求，前端把员工的Json放在请求体中@RequestMapping(value &#x3D; &quot;&#x2F;employee&quot;,method &#x3D; RequestMethod.POST)public String addEmployee(@RequestBody Employee employee) &#123;employeeService.saveEmployee(employee);return &quot;ok&quot;;&#125;&#x2F;&#x2F;修改员工，通过json请求，且需要包括id@RequestMapping(value &#x3D; &quot;&#x2F;employee&quot;,method &#x3D; RequestMethod.PUT)public String updateEmployee(@RequestBody Employee employee) &#123;employeeService.updateEmployee(employee);return &quot;ok&quot;;&#125;&#x2F;&#x2F;查询所有员工@RequestMapping(value&#x3D;&quot;&#x2F;employees&quot;,method &#x3D; RequestMethod.GET)public List&lt;Employee&gt; all()&#123;List&lt;Employee&gt; employees &#x3D; employeeService.getList();return employees;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-REST风格的CRUD案例的优化-统一返回R对象"><a href="#4-REST风格的CRUD案例的优化-统一返回R对象" class="headerlink" title="(4)REST风格的CRUD案例的优化-统一返回R对象"></a>(4)REST风格的CRUD案例的优化-统一返回R对象</h4><p>​    Controller层方法返回值不统一，有String类型，也有Employee类型，对于前端而言希望得到的是一个统一返回</p><h5 id="统一返回内容格式（R对象格式）"><a href="#统一返回内容格式（R对象格式）" class="headerlink" title="统一返回内容格式（R对象格式）"></a>统一返回内容格式（R对象格式）</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;code：业务的状态码，200是成功，其余都是失败，前后端会一起商定不同的业务状态码在前端需要显示的效果&#x2F;&#x2F;msg：服务端返回给前端的提示消息&#x2F;&#x2F;data：服务器返回给前端的数据，一个数据放对象，多个数据放数组&#x2F;&#x2F;返回内容格式&#123;&quot;code&quot;:300,&quot;msg&quot;:&quot;余额不足&quot;,&quot;data&quot;:null&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="前端统一处理（R对象）"><a href="#前端统一处理（R对象）" class="headerlink" title="前端统一处理（R对象）"></a>前端统一处理（R对象）</h5><p>​    1.前端发送请求，接受服务器数据</p><p>​    2.判断状态码，成功显示数据，失败显示提示信息或执行其他操作</p><h5 id="使用R对象的开发步骤"><a href="#使用R对象的开发步骤" class="headerlink" title="使用R对象的开发步骤"></a>使用R对象的开发步骤</h5><p>​    1.新建common包，在包下新建类R</p><p>​    2.在Controller的方法中将返回的数据封装为R返回</p><h5 id="样例：使用统一返回对象（R）对Controller层优化"><a href="#样例：使用统一返回对象（R）对Controller层优化" class="headerlink" title="样例：使用统一返回对象（R）对Controller层优化"></a>样例：使用统一返回对象（R）对Controller层优化</h5><p>​    1.新建common包，新建类R.java</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;R.java@Datapublic class R&lt;T&gt; &#123;private Integer code;private String msg;private T data;&#x2F;&#x2F;为了不再Controller再组装R，所以R需要提供一个返回成功的静态方法public static &lt;T&gt; R&lt;T&gt; ok(T data) &#123;R&lt;T&gt; r &#x3D; new R&lt;T&gt;();r.setCode(200);r.setMsg(&quot;ok&quot;);r.setData(data);return r;&#125;&#x2F;&#x2F;重载一个不返回任何数据的方法public static R ok() &#123;R r &#x3D; new R();r.setCode(200);r.setMsg(&quot;ok&quot;);return r;&#125;&#x2F;&#x2F;有失败逻辑时调用的方法public static &lt;T&gt; R&lt;T&gt; error(Integer code ,String msg , T data) &#123;R&lt;T&gt; r &#x3D; new R&lt;T&gt;();r.setCode(code);r.setMsg(msg);r.setData(data);return r;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.优化Controller，在Controller的方法中将返回的数据封装为R返回</p><pre class="line-numbers language-none"><code class="language-none">@RestControllerpublic class EmployeeRestController &#123;@AutowiredEmployeeService employeeService;@RequestMapping(value &#x3D; &quot;&#x2F;employee&#x2F;&#123;id&#125;&quot;,method &#x3D; RequestMethod.GET)public R get(@PathVariable Long id) &#123;Employee employee &#x3D; employeeService.getEmployeeById(id);return R.ok(employee);&#125;@RequestMapping(value &#x3D; &quot;&#x2F;employee&#x2F;&#123;id&#125;&quot;,method &#x3D; RequestMethod.DELETE)public R deleteEmployee(@PathVariable(&quot;id&quot;) Long id) &#123;employeeService.deleteEmployee(id);return R.ok();&#125;&#x2F;&#x2F;新增员工，要求，前端把员工的Json放在请求体中@RequestMapping(value &#x3D; &quot;&#x2F;employee&quot;,method &#x3D; RequestMethod.POST)public R addEmployee(@RequestBody Employee employee) &#123;employeeService.saveEmployee(employee);return R.ok();&#125;&#x2F;&#x2F;修改员工，通过json请求，且需要包括id@RequestMapping(value &#x3D; &quot;&#x2F;employee&quot;,method &#x3D; RequestMethod.PUT)public R updateEmployee(@RequestBody Employee employee) &#123;employeeService.updateEmployee(employee);return R.ok();&#125;&#x2F;&#x2F;查询所有员工@RequestMapping(value&#x3D;&quot;&#x2F;employees&quot;,method &#x3D; RequestMethod.GET)public R all()&#123;List&lt;Employee&gt; employees &#x3D; employeeService.getList();return R.ok(employees);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-跨域"><a href="#2-跨域" class="headerlink" title="2. 跨域"></a>2. 跨域</h3><p>​    <strong>跨域（CORS, Cross-Origin Resource Sharing）</strong> 是指 <strong>浏览器</strong> 出于 同源策略（Same-Origin Policy）的安全限制，阻止从一个域（A）向另一个域（B）发起请求</p><h5 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h5><p>​    协议、域名、端口不完全相同，就会触发跨域问题</p><table><thead><tr><th><strong>请求地址（前端）</strong></th><th><strong>后端 API 地址</strong></th><th><strong>是否跨域？</strong></th><th><strong>原因</strong></th></tr></thead><tbody><tr><td><code>http://localhost:3000</code></td><td><code>http://localhost:8080</code></td><td>✅ 跨域</td><td>端口不同</td></tr><tr><td><code>http://example.com</code></td><td><code>https://example.com</code></td><td>✅ 跨域</td><td>协议不同</td></tr><tr><td><code>http://sub.example.com</code></td><td><code>http://example.com</code></td><td>✅ 跨域</td><td>子域名不同</td></tr><tr><td><code>http://example.com:80</code></td><td><code>http://example.com:8080</code></td><td>✅ 跨域</td><td>端口不同</td></tr><tr><td><code>http://example.com</code></td><td><code>http://example.com</code></td><td>❌ <strong>同源</strong></td><td>完全相同</td></tr></tbody></table><h5 id="后端解决跨域问题-允许前端的请求跨域"><a href="#后端解决跨域问题-允许前端的请求跨域" class="headerlink" title="后端解决跨域问题-允许前端的请求跨域"></a>后端解决跨域问题-允许前端的请求跨域</h5><p>​    原理：在服务器给浏览器的响应头中添加字段，<code>Access-Control-Allow-Origin = *</code>，SpringBoot通过注释实现</p><p>​    在SpringBoot中只需要在类名或方法上添加注释@CrossOrigin，该类或方法就可以跨域访问</p><p>​    前端对复杂的跨域请求会发送两次</p><p>​        1.options请求：预检请求，浏览器会先发送options请求，询问服务器是否允许当前域名进行跨域访问</p><p>​        2.真正的请求：POST、DELETE、PUT等</p><h3 id="3-Spring开发中的常用注解"><a href="#3-Spring开发中的常用注解" class="headerlink" title="3. Spring开发中的常用注解"></a>3. Spring开发中的常用注解</h3><h4 id="1-Data"><a href="#1-Data" class="headerlink" title="(1)@Data"></a>(1)@Data</h4><p>​    <code>@Data</code> 写在类前，它是 <strong>Lombok</strong> 提供的一个注解，用于自动生成常见的 Java 类方法，从而减少样板代码。该注解可以自动为你的类生成 getter、setter、toString()、equals() 和 hashCode()等方法</p><h5 id="样例：-Data的使用"><a href="#样例：-Data的使用" class="headerlink" title="样例：@Data的使用"></a>样例：@Data的使用</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;Employee.javaimport lombok.Data;@Datapublic class User &#123;    private Long id;    private String name;    &#x2F;&#x2F;写包装类，这样值可以为null    private Integer age;    private String email;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-SpringBootTest"><a href="#2-SpringBootTest" class="headerlink" title="(2)@SpringBootTest"></a>(2)@SpringBootTest</h4><p>​    <code>@SpringBootTest</code>写在类前，它用于测试 Spring Boot 应用的集成测试（不是单元测试）。这个注解会启动整个 Spring 上下文，它支持依赖注入，通常用于 <strong>Web</strong>、<strong>服务层</strong>或 <strong>数据库层</strong>等需要集成测试的场景</p><h5 id="样例：-SpringBootTest的使用"><a href="#样例：-SpringBootTest的使用" class="headerlink" title="样例：@SpringBootTest的使用"></a>样例：@SpringBootTest的使用</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;MyApplicationTests.java@SpringBootTestpublic class MyApplicationTests &#123;    @Test    void contextLoads() &#123;        &#x2F;&#x2F; 测试 Spring 应用是否成功启动    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Test"><a href="#3-Test" class="headerlink" title="(3)@Test"></a>(3)@Test</h4><p>​    <code>@Test</code>写在方法前，它是 JUnit 框架的核心注解，用于标记测试方法。在 <strong>Spring Boot</strong> 中，常与<code>@SpringBootTest</code> 等注解配合使用，用于集成测试，<code>有该注解标记的方法可以直接运行</code></p><h4 id="4-RestController"><a href="#4-RestController" class="headerlink" title="(4)@RestController"></a>(4)@RestController</h4><p>​    <code>@RestController</code>写在类前，它等价于<code>@Controller</code>+<code>@ResponseBody</code></p><h4 id="5-CrossOrigin"><a href="#5-CrossOrigin" class="headerlink" title="(5)@CrossOrigin"></a>(5)@CrossOrigin</h4><p>​    <code>@CrossOrigin</code>写在类前或方法前，用于允许域（Origin）访问 Spring Boot 提供的 API，避免浏览器 CORS（跨域资源共享）限制，写类前允许整个类的API，写方法前则允许该方法</p><h5 id="样例：-CrossOrigin的使用"><a href="#样例：-CrossOrigin的使用" class="headerlink" title="样例：@CrossOrigin的使用"></a>样例：@CrossOrigin的使用</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;BankController.java@RestController@CrossOrigin  &#x2F;&#x2F; 允许所有跨域请求public class BankController &#123;&#x2F;&#x2F;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-JdbcTemplate（数据层）"><a href="#4-JdbcTemplate（数据层）" class="headerlink" title="4. JdbcTemplate（数据层）"></a>4. JdbcTemplate（数据层）</h3><p>​    <code>JdbcTemplate</code> 是 Spring 提供的一个核心类，它封装了常见的数据库操作，不再需要手动编写重复的代码来获取数据库连接、执行 SQL 和关闭连接。只需要写Sql语句，并用JdbcTemplate对象调用对应的API，即可获得查询结果。具体API要使用时用ChatGPT查</p><p>​    如果项目已经使用了 <strong>MyBatis</strong>，通常 **不需要再使用 <code>JdbcTemplate</code>**，它们的功能是重叠的</p><h3 id="5-SpringMVC拦截器"><a href="#5-SpringMVC拦截器" class="headerlink" title="5. SpringMVC拦截器"></a>5. SpringMVC拦截器</h3><p>​    <strong>Spring MVC 拦截器</strong>（<code>HandlerInterceptor</code>）用于在 <strong>请求到达 Controller 之前、执行 Controller 方法之后、视图渲染之前</strong> 进行拦截和处理</p><p>​    <code>拦截器也是AOP思想的具体实现</code></p><h4 id="1-SpringMVC对请求的处理流程"><a href="#1-SpringMVC对请求的处理流程" class="headerlink" title="(1)SpringMVC对请求的处理流程"></a>(1)SpringMVC对请求的处理流程</h4><blockquote><p>请求 → 监听器（Listener） → 过滤器（Filter） → 拦截器（Interceptor） → Controller 处理请求</p></blockquote><ul><li><strong>监听器（Listener）</strong>：监听应用/Session/请求的生命周期，全局事件处理</li><li><strong>过滤器（Filter）</strong>：拦截 HTTP 请求/响应，处理权限、日志、编码、跨域</li><li><strong>拦截器（Interceptor）</strong>：拦截 Spring MVC 方法（Spring业务逻辑），适用于权限校验、日志、AOP 逻辑</li></ul><h4 id="2-监听器、拦截器和过滤器的使用场景"><a href="#2-监听器、拦截器和过滤器的使用场景" class="headerlink" title="(2)监听器、拦截器和过滤器的使用场景"></a>(2)监听器、拦截器和过滤器的使用场景</h4><table><thead><tr><th>需求</th><th>监听器（Listener）</th><th>过滤器（Filter）</th><th>拦截器（Interceptor）</th></tr></thead><tbody><tr><td><strong>统计在线人数</strong></td><td>✅ 适用</td><td>❌ 不适用</td><td>❌ 不适用</td></tr><tr><td><strong>初始化系统资源</strong></td><td>✅ 适用</td><td>❌ 不适用</td><td>❌ 不适用</td></tr><tr><td><strong>跨域（CORS）处理</strong></td><td>❌ 不适用</td><td>✅ 适用</td><td>❌ 不适用</td></tr><tr><td><strong>登录认证</strong></td><td>❌ 不适用</td><td>✅ 适用</td><td>✅ 适用</td></tr><tr><td><strong>权限控制</strong></td><td>❌ 不适用</td><td>✅ 适用</td><td>✅ 适用（推荐）</td></tr><tr><td><strong>请求日志记录</strong></td><td>❌ 不适用</td><td>✅ 适用</td><td>✅ 适用</td></tr><tr><td><strong>修改请求参数</strong></td><td>❌ 不适用</td><td>✅ 适用</td><td>✅ 适用</td></tr></tbody></table><h4 id="3-SpringMVC拦截器的使用"><a href="#3-SpringMVC拦截器的使用" class="headerlink" title="(3)SpringMVC拦截器的使用"></a>(3)SpringMVC拦截器的使用</h4><h5 id="SpringMVC拦截器使用步骤"><a href="#SpringMVC拦截器使用步骤" class="headerlink" title="SpringMVC拦截器使用步骤"></a>SpringMVC拦截器使用步骤</h5><p>​    1.创建拦截器类实现<code>HandlerInterceptor</code>接口</p><p>​    2.在Spring-mvc.xml配置interceptor</p><p>​    3.访问被拦截的Controller方法，测试拦截效果</p><h5 id="样例：SpringMVC拦截器的使用"><a href="#样例：SpringMVC拦截器的使用" class="headerlink" title="样例：SpringMVC拦截器的使用"></a>样例：SpringMVC拦截器的使用</h5><p>​    1.新建MyInterceptor.java实现<code>HandlerInterceptor</code>接口，该接口中的方法都是使用default修饰符来空实现，所以需要将要使用的方法覆盖，一共有三个方法：<strong>preHandle()**：请求进入Controller之前执行（适用于权限校验、参数校验），<code>若返回false后面的所有流程都不会执行</code>；</strong>postHandle()<strong>：Controller方法执行后执行（适用于修改返回数据/视图）；</strong>afterCompletion()**： 视图渲染完成后执行（适用于日志记录、异常处理）</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;MyInterceptor.javapublic class MyInterceptor implements HandlerInterceptor&#123;&#x2F;&#x2F;在Controller层方法执行之前执行public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)&#123;&#x2F;&#x2F; 检查 Session 中是否有用户        String user &#x3D; (String) request.getSession().getAttribute(&quot;user&quot;);        if (user &#x3D;&#x3D; null) &#123;            response.sendRedirect(&quot;&#x2F;login&quot;); &#x2F;&#x2F; 未登录，重定向到登录页面            return false; &#x2F;&#x2F; 拦截请求：不会再执行Controller的方法        &#125;        return true; &#x2F;&#x2F; 继续请求&#125;&#x2F;&#x2F;在Controller层方法执行之后，视图对象返回之前执行public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModeAndView modeAndView)&#123;System.out.println(&quot;【拦截器】postHandle 执行...&quot;);&#125;&#x2F;&#x2F;在视图渲染完成之后执行public void afterCompletion(HttpServletRequest request, HttpServletResponse response,  Object handler, Exception ex)&#123;System.out.println(&quot;【拦截器】afterCompletion 执行...&quot;);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在spring-mvc.xml文件里配置拦截器，<code>&lt;mvc:interceptors&gt;</code> 标签内部可以配置多个拦截器，<code>&lt;mvc:interceptor&gt;</code>表示一个拦截器，<code>&lt;mvc:mapping&gt;</code>中配置对哪些资源执行拦截操作</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;spring-mvc.xml&#x2F;&#x2F;配置拦截器&lt;mvc:interceptors&gt;    &lt;mvc:interceptor&gt;    &#x2F;&#x2F; &#x2F;**表示对所有的方法都进行拦截操作        &lt;mvc:mapping path&#x3D;&quot;&#x2F;secure&#x2F;**&quot;&#x2F;&gt;        &#x2F;&#x2F;放行&#x2F;login        &lt;mvc:exclude-mapping path&#x3D;&quot;&#x2F;login&quot;&#x2F;&gt;        &lt;bean class&#x3D;&quot;com.itheima.interceptor.MyInterceptor&quot;&#x2F;&gt;    &lt;&#x2F;mvc:interceptor&gt;&lt;&#x2F;mvc:interceptors&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.编写UserController.java，并在浏览器模拟请求</p><blockquote><p>请求路径：<code>http://localhost:8080/login</code></p></blockquote><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controller@RequestMappingpublic class UserController &#123;    &#x2F;&#x2F;登录接口（模拟登录）    @GetMapping(&quot;&#x2F;login&quot;)    @ResponseBody    public String login(HttpServletRequest request) &#123;        HttpSession session &#x3D; request.getSession();        session.setAttribute(&quot;user&quot;, &quot;admin&quot;); &#x2F;&#x2F; 模拟登录，设置 Session        return &quot;登录成功！欢迎你，admin&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-多个拦截器拦截一个页面其中函数的运行效果"><a href="#4-多个拦截器拦截一个页面其中函数的运行效果" class="headerlink" title="(4)多个拦截器拦截一个页面其中函数的运行效果"></a>(4)多个拦截器拦截一个页面其中函数的运行效果</h4><p>​    在spring-mvc.xml的配置顺序决定了拦截器的率先执行顺序</p><p><a href="https://imgse.com/i/p9M30Tf"><img src="https://s1.ax1x.com/2023/04/26/p9M30Tf.png" alt="运行结果"></a></p><h3 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6. 异常处理"></a>6. 异常处理</h3><h4 id="1-异常处理的方式"><a href="#1-异常处理的方式" class="headerlink" title="(1)异常处理的方式"></a>(1)异常处理的方式</h4><ul><li>编程式异常处理<ul><li>try-catch、throw、exception</li></ul></li><li><strong>声明式异常处理（开发推荐）</strong><ul><li>SpringMVC提供了@ExceptionHandle、@ControllerAdvice等便捷的声明式注解来进行异常处理</li></ul></li></ul><h4 id="2-SpringMVC中本类异常处理的注解-ExceptionHandle-异常类的全限定名-class"><a href="#2-SpringMVC中本类异常处理的注解-ExceptionHandle-异常类的全限定名-class" class="headerlink" title="(2)SpringMVC中本类异常处理的注解-@ExceptionHandle(异常类的全限定名.class)"></a>(2)SpringMVC中本类异常处理的注解-@ExceptionHandle(异常类的全限定名.class)</h4><p>​    <code>@ExceptionHandle</code>写在Controller类中的方法上，如果这个Controller类中出现异常，其会自动在本类中找@ExceptionHandle标记的方法（<code>可以是多个</code>），有对应的异常处理则执行对应方法，如果多个能处理则精确的优先</p><p>​    <code>其修饰的方法传入什么异常，就监管什么异常</code></p><h5 id="样例：-ExceptionHandle的使用"><a href="#样例：-ExceptionHandle的使用" class="headerlink" title="样例：@ExceptionHandle的使用"></a>样例：@ExceptionHandle的使用</h5><p>​    <code>请求路径：http://localhost:8080/hello?i=0</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;HelloController.java@RestControllerpublic class HelloController &#123;@GetMapping(&quot;&#x2F;hello&quot;)public R hello(Integer i)&#123;int b &#x3D; 10&#x2F; i;return R.ok(b);&#125;&#x2F;&#x2F;对算术异常 (ArithmeticException)进行管理，只要该Controller中发生算数异常则调用这个异常处理方法@ExceptionHandler(ArithmeticException.class)public R handleArithmeticException(ArithmeticException ex)&#123;return R.error(100,&quot;执行异常&quot;,ex.getMessage());&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-SpringMVC中全局异常处理的注解-ControllerAdvice"><a href="#3-SpringMVC中全局异常处理的注解-ControllerAdvice" class="headerlink" title="(3)SpringMVC中全局异常处理的注解-@ControllerAdvice"></a>(3)SpringMVC中全局异常处理的注解-@ControllerAdvice</h4><p>​    <code>@ControllerAdvice</code>写在类上，表示这个类是一个全局“助手”类，专门用来辅助所有 <code>@Controller</code>处理一些通用逻辑，它的应用场景如下：</p><ul><li><strong>全局异常处理</strong>（最常见用法）</li><li>全局数据绑定（给所有 Controller 统一绑定数据）</li><li>全局数据格式转换（参数解析、类型转换）</li></ul><p>​    <code>@ControllerAdvice</code> 默认对整个 Spring 容器中所有 Controller 有效，拦截所有 @Controller 或 @RestController 抛出的异常</p><h5 id="样例：使用-ControllerAdvice-ExceptionHandle实现全局异常处理"><a href="#样例：使用-ControllerAdvice-ExceptionHandle实现全局异常处理" class="headerlink" title="样例：使用@ControllerAdvice+@ExceptionHandle实现全局异常处理"></a>样例：使用@ControllerAdvice+@ExceptionHandle实现全局异常处理</h5><p>​    新建advice包作为增强包，在该包下新建GlobalExceptionHandle.java作为全局异常处理类</p><p>​    这里的返回值是继续交由前端处理，可以理解为向前端发送了一个异常，等价与service用try-catch处理异常的catch返回R.error()，由于可以监管所有controller，所以项目开发中必用到</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;GlobalExceptionHandle.java@ControllerAdvicepublic class GlobalExceptionHandle &#123;        @ResponseBody@ExceptionHandler(Exception.class)&#x2F;&#x2F;不一定返回R可以是其他类型String、Map等，看实际项目的前端需求public R error(Exception e)&#123;return R.error(500,e.getMessage(),null);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-异常处理优先级与保底机制"><a href="#4-异常处理优先级与保底机制" class="headerlink" title="(4)异常处理优先级与保底机制"></a>(4)异常处理优先级与保底机制</h4><h5 id="异常处理的优先级"><a href="#异常处理的优先级" class="headerlink" title="异常处理的优先级"></a>异常处理的优先级</h5><blockquote><p>本类 &gt; 全局</p><p>精确 &gt; 模糊</p></blockquote><h5 id="异常处理的默认行为"><a href="#异常处理的默认行为" class="headerlink" title="异常处理的默认行为"></a>异常处理的默认行为</h5><p>​    如果出现了异常，本类和全局都不能处理，SpringBoot底层对SpringMVC有兜底处理机制，这是自适应的（如果是浏览器则返回错误页面，如果是Postman则返回以json为格式的错误数据）</p><h4 id="5-异常处理在实际开发（商用）中的使用"><a href="#5-异常处理在实际开发（商用）中的使用" class="headerlink" title="(5)异常处理在实际开发（商用）中的使用"></a>(5)异常处理在实际开发（商用）中的使用</h4><p>​    前后端项目中，前端感知异常状态，后端只编写正确的业务逻辑，如果出现业务问题，后端通过抛业务异常（需要自定义）的方式提前中断业务逻辑</p><h5 id="异常处理的使用步骤（商用）"><a href="#异常处理的使用步骤（商用）" class="headerlink" title="异常处理的使用步骤（商用）"></a>异常处理的使用步骤（商用）</h5><p>​    1.编写异常枚举类BizExceptionEnume，用于设定异常码以及对应的异常信息（这些是不变的）</p><p>​    2.编写自定义异常类BizException，里面需要有异常码和异常信息字段，并通过构造器允许赋值</p><p>​    3.在Sevice层中，对于非正常的业务流程new一个自定义异常对象</p><p>​    4.在异常处理类中，获得自定义异常对象，并将状态码和信息返回给前端</p><h5 id="样例：异常处理的实际使用"><a href="#样例：异常处理的实际使用" class="headerlink" title="样例：异常处理的实际使用"></a>样例：异常处理的实际使用</h5><p>​    1.编写枚举类BizExceptionEnume.java，设定异常码以及码对应的信息</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;BizExceptionEnume.javapublic enum BizExceptionEnume &#123;&#x2F;&#x2F;ORDER_xxx：订单模块相关异常ORDER_CLOSED(10001,&quot;订单已关闭&quot;),ORDER_NOT_EXIST(10002,&quot;订单不存在&quot;),ORDER_TIMEOUT(10003,&quot;订单超时&quot;);@Getterprivate Integer code;@Getterprivate String message;private BizExceptionEnume(Integer code, String message) &#123;this.code &#x3D; code;this.message &#x3D; message;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.新建一个exception包，在里面自定义异常BizException.java</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;BizException.java@Datapublic class BizException extends RuntimeException &#123;private Integer code;private String message;public BizException(Integer code, String message) &#123;super(message);this.code &#x3D; code;this.message &#x3D; message;&#125;public BizException(BizExceptionEnume bizExceptionEnume) &#123;super(bizExceptionEnume.getMessage());this.code &#x3D; bizExceptionEnume.getCode();this.message &#x3D; bizExceptionEnume.getMessage();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.在service层中将错误流程new一个异常对象，并抛出异常，这里用的是 restfu开发的service作为样例，优化的是它的update方法，之前遇到错误是直接return</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;EmployeeServiceImplpublic void updateEmployee(Employee employee) &#123;&#x2F;&#x2F;防null处理Long id &#x3D; employee.getId();if (id &#x3D;&#x3D; null) &#123;&#x2F;&#x2F;终端业务：这里原先是直接returnthrow new BizException(BizExceptionEnume.ORDER_CLOSED);&#125;&#x2F;&#x2F;1、去数据库查询employee原来的值Employee employeeold &#x3D; employeeDao.getEmployeeById(id);&#x2F;&#x2F;2、把页面带来的覆盖原来的值，页面没带来的值保持原状&#x2F;&#x2F;姓名if (StringUtils.hasText(employee.getName())) &#123;  &#x2F;&#x2F;判断name有值（不是null，不是空串，不是空白字符）&#x2F;&#x2F;把数据库的值改为页面传来的值employeeold.setName(employee.getName());&#125;&#x2F;&#x2F;邮箱if (StringUtils.hasText(employee.getEmail())) &#123;&#x2F;&#x2F;把数据库的值改为页面传来的值employeeold.setEmail(employee.getEmail());&#125;&#x2F;&#x2F;性别if (StringUtils.hasText(employee.getGender())) &#123;&#x2F;&#x2F;把数据库的值改为页面传来的值employeeold.setGender(employee.getGender());&#125;&#x2F;&#x2F;地址if (StringUtils.hasText(employee.getAddress())) &#123;&#x2F;&#x2F;把数据库的值改为页面传来的值employeeold.setAddress(employee.getAddress());&#125;&#x2F;&#x2F;年龄if (employee.getAge() !&#x3D; null) &#123;employeeold.setAge(employee.getAge());&#125;&#x2F;&#x2F;工资if (employee.getSalary() !&#x3D; null) &#123;employeeold.setSalary(employee.getSalary());&#125;&#x2F;&#x2F;3、对数据库进行修改employeeDao.updateEmployee(employeeold);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    4.通过异常处理类GlobalExceptionHandle.java，将异常处理并将异常信息发送给前端</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;GlobalExceptionHandle.java@ControllerAdvicepublic class GlobalExceptionHandle &#123;@ResponseBody@ExceptionHandler(BizException.class)public R error(BizException be)&#123;return R.error(be.getCode(), be.getMessage(), null);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    运行结果如下图所示，不带id发送请求</p><p><a href="https://imgse.com/i/pEUjspT"><img src="https://s21.ax1x.com/2025/03/14/pEUjspT.png" alt="错误的请求后，后端返回的请求结果"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring04-SpringMVC对http请求的接收以及响应的发送</title>
      <link href="/2023/04/25/Spring04-SpringMVC%E5%AF%B9http%E8%AF%B7%E6%B1%82%E7%9A%84%E6%8E%A5%E6%94%B6%E4%BB%A5%E5%8F%8A%E5%93%8D%E5%BA%94%E7%9A%84%E5%8F%91%E9%80%81/"/>
      <url>/2023/04/25/Spring04-SpringMVC%E5%AF%B9http%E8%AF%B7%E6%B1%82%E7%9A%84%E6%8E%A5%E6%94%B6%E4%BB%A5%E5%8F%8A%E5%93%8D%E5%BA%94%E7%9A%84%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h3 id="1-SpringMVC注解功能的启用"><a href="#1-SpringMVC注解功能的启用" class="headerlink" title="1. SpringMVC注解功能的启用"></a>1. SpringMVC注解功能的启用</h3><p>​    如果要使用SpringMVC相关的注解，需要在spring-mvc.xml中进行配置，不写的话无法正常使用SpringMVC提供的注解</p><p>​    <code>若是SpringBoot的项目默认自动启用</code></p><h5 id="样例：SpringMVC注解的启用"><a href="#样例：SpringMVC注解的启用" class="headerlink" title="样例：SpringMVC注解的启用"></a>样例：SpringMVC注解的启用</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;spring-mvc.xml&#x2F;&#x2F;启用 Spring MVC 注解支持，和Spring注解开发的组件扫描类似&lt;mvc:annotation-driven &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-SpringMVC与Http协议的关联"><a href="#2-SpringMVC与Http协议的关联" class="headerlink" title="2. SpringMVC与Http协议的关联"></a>2. SpringMVC与Http协议的关联</h3><p>​    SpringMVC 是服务器端的框架，在 SpringMVC 中，请求（Request）是指由客户端发起的 HTTP 请求，响应（Response）是服务器对请求的回应</p><h4 id="1-HttpServletRequest和HttpServletResponse在SpringMVC的使用"><a href="#1-HttpServletRequest和HttpServletResponse在SpringMVC的使用" class="headerlink" title="(1)HttpServletRequest和HttpServletResponse在SpringMVC的使用"></a>(1)HttpServletRequest和HttpServletResponse在SpringMVC的使用</h4><p>​    在 SpringMVC 中，HttpServletRequest 和 HttpServletResponse 是处理 HTTP 请求和响应的核心对象，通常用于控制器(Controller)的方法中接收和处理 HTTP 请求，以及构建和发送 HTTP 响应。请求和响应分别代表了 HTTP 通信的两个重要阶段。请求阶段是从客户端到服务器的过程，响应阶段是从服务器到客户端的过程</p><h5 id="样例：HttpServletRequest-和-HttpServletResponse的使用"><a href="#样例：HttpServletRequest-和-HttpServletResponse的使用" class="headerlink" title="样例：HttpServletRequest 和 HttpServletResponse的使用"></a>样例：HttpServletRequest 和 HttpServletResponse的使用</h5><p>​    写在形参，SpringMVC会自动注入这两个对象</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;&#x2F;&#x2F;UserController.java@RequestMapping(&quot;&#x2F;quick&quot;)public String quick(HttpServletRequest req, HttpServletResponse resp) &#123;    &#x2F;&#x2F; 这里的 req 和 resp 可以用来操作请求和响应&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="访问时的过程"><a href="#访问时的过程" class="headerlink" title="访问时的过程"></a>访问时的过程</h5><p>​    1.请求：当你访问 <code>http://localhost:8080/quick?name=lxs</code> 时，浏览器会向服务器发送一个 HTTP 请求。这个请求包含了 URL 和查询参数（例如 name=lxs），HttpServletRequest会接收这个请求，并提供你访问请求参数（如 req.getParameter(“name”)）的方式</p><p>​    2.处理：控制器方法 handleRequest()会根据请求数据进行处理。例如，它从 req 获取查询参数 name，然后可能进行一些业务逻辑处理</p><p>​    3.响应：控制器方法可以通过 HttpServletResponse设置响应的内容。你可以设置响应头、状态码，或者通过 req.setAttribute() 把数据存储到请求对象中（这是功能重叠的地方），并返回视图名</p><p>​    4.视图渲染：SpringMVC 会根据返回的视图名（例如 “lxsPage”）来渲染对应的视图（比如 JSP 页面）。在该页面中，你可以访问之前存储在请求中的数据（如 ${message}）</p><h4 id="2-HttpServletRequest对象"><a href="#2-HttpServletRequest对象" class="headerlink" title="(2)HttpServletRequest对象"></a>(2)HttpServletRequest对象</h4><p>​    表示客户端发送的 HTTP 请求。它包含了请求的各种信息，例如请求的 URL、请求参数、请求头、请求方法（如 GET 或 POST）、请求体等。通过 HttpServletRequest对象，你可以获取客户端提交的请求参数、请求头信息，甚至是请求体数据；还可以通过 req.setAttribute()存储数据，这些数据会在请求生命周期内有效，且可以通过请求转发传递给视图</p><h5 id="req的常用方法"><a href="#req的常用方法" class="headerlink" title="req的常用方法"></a>req的常用方法</h5><ul><li>req.getParameter(“paramName”)：获取请求中的参数</li><li>req.getHeader(“headerName”)：获取请求中的头部信息</li><li>req.getMethod()：获取请求的方法类型（如 GET 或 POST）</li></ul><h5 id="HttpServletRequest的生命周期"><a href="#HttpServletRequest的生命周期" class="headerlink" title="HttpServletRequest的生命周期"></a>HttpServletRequest的生命周期</h5><p>​    从 <strong>客户端发起请求</strong> 时开始，服务器接收到请求后，创建 <code>HttpServletRequest</code> 对象，并将其传递给 SpringMVC 控制器进行处理。在控制器处理请求并返回响应视图时，<code>HttpServletRequest</code> 对象是有效的。当请求完成并返回视图或重定向时，<code>HttpServletRequest</code> 对象的生命周期结束</p><h4 id="3HttpServletResponse对象"><a href="#3HttpServletResponse对象" class="headerlink" title="(3HttpServletResponse对象"></a>(3HttpServletResponse对象</h4><p>​    表示 HTTP 响应。它是用来向客户端返回响应的对象，可以用来设置响应的状态码、响应头以及响应体的内容；还可以控制页面跳转，有重定向：response.sendRedirect() 会让浏览器发起一个新的请求，响应对象会将浏览器重定向到新的 URL，还有请求转发：RequestDispatcher.forward()用于将请求转发到另一个资源（比如 JSP 页面）并继续在当前请求生命周期内处理。</p><h5 id="resp的常用方法"><a href="#resp的常用方法" class="headerlink" title="resp的常用方法"></a>resp的常用方法</h5><ul><li>resp.setStatus(200)：设置响应状态码为 200（表示成功）</li><li>resp.setHeader(“Content-Type”, “application/json”)：设置响应头</li><li>resp.getWriter().write(“response data”)：服务器端向客户端发送响应数据，这个数据需要客户端用axios或fetch来接收</li></ul><h5 id="HttpServletResponse的生命周期"><a href="#HttpServletResponse的生命周期" class="headerlink" title="HttpServletResponse的生命周期"></a>HttpServletResponse的生命周期</h5><p>​    从 <strong>服务器开始处理请求</strong> 并准备响应时开始，<code>HttpServletResponse</code> 用于设置响应头、状态码和响应内容。当服务器准备好响应内容并将其发送给客户端后，<code>HttpServletResponse</code> 的生命周期结束</p><h3 id="3-浏览器对于跳转还是数据的区分"><a href="#3-浏览器对于跳转还是数据的区分" class="headerlink" title="3. 浏览器对于跳转还是数据的区分"></a>3. 浏览器对于跳转还是数据的区分</h3><table><thead><tr><th align="center">响应方式</th><th align="center">状态码</th><th align="center"><code>Location</code> 头</th><th align="center">响应体</th></tr></thead><tbody><tr><td align="center">返回数据</td><td align="center">200 OK</td><td align="center">❌ 无</td><td align="center">✅ 有数据（JSON、HTML、文本等）</td></tr><tr><td align="center">跳转</td><td align="center">301/302</td><td align="center">✅ 有跳转 URL</td><td align="center">❌ 通常没有（有也会被忽略）</td></tr></tbody></table><h3 id="4-SpringMVC的数据响应"><a href="#4-SpringMVC的数据响应" class="headerlink" title="4. SpringMVC的数据响应"></a>4. SpringMVC的数据响应</h3><p>​    Spring MVC 的数据响应方式包括页面跳转（返回视图）、请求转发、重定向、JSON/XML 数据返回、文件下载、流数据响应、WebSocket 通信、自定义响应实体和异常处理，每种方式根据不同的需求返回不同类型的数据或资源</p><h4 id="1-页面跳转-根据请求路径跳转"><a href="#1-页面跳转-根据请求路径跳转" class="headerlink" title="(1)页面跳转-根据请求路径跳转"></a>(1)页面跳转-根据请求路径跳转</h4><p>​    最常见的方式，用于传统的 Web 应用，通常配合 JSP来渲染 HTML 页面，<strong>跳转的页面一定要有</strong></p><h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><p>​    浏览器访问：<code>http://localhost:8080/quick/success.jsp</code>，会跳转显示success.jsp页面</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;@RequestMapping(&quot;&#x2F;quick&quot;)public String save()&#123;System.out.println(&quot;运行成功&quot;);&#x2F;&#x2F;默认是转发方式，要重定向需要写为redirect:success.jspreturn &quot;success.jsp&quot;;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-页面跳转-返回ModelAndView对象（了解）"><a href="#2-页面跳转-返回ModelAndView对象（了解）" class="headerlink" title="(2)页面跳转-返回ModelAndView对象（了解）"></a>(2)页面跳转-返回ModelAndView对象（了解）</h4><p>​    Model表示模型，作用为封装数据；View表示视图，作用为展示页面。如果在返回视图给页面时，只有View，没有Model，那么这种页面跳转方式和直接根据请求路径跳转没有区别</p><h5 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h5><p>​    浏览器访问：<code>http://localhost:8080/quick/success.jsp</code>，会跳转显示success.jsp页面</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;@RequestMapping(&quot;&#x2F;quick&quot;)public String quick()&#123;&#x2F;&#x2F;创建ModelAndView对象，也可以通过形参quick(ModelAndView modelAndView)直接传递，SpringMVC会自动创建该对象ModelAndView modelAndView &#x3D; new ModelAndView();&#x2F;&#x2F;设置模型数据,addObject()第一个参数作为key，第二个参数为value，在jsp页面&lt;h1&gt;标签中用$&#123;username&#125;，获取到itcastmodelAndView.addObject(&quot;username&quot;,&quot;itcast&quot;);&#x2F;&#x2F;设置视图名称，访问的时候是success.jspmdoelAndView.setViewName(&quot;success&quot;);return modelAndView;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-SpringMVC注解-ResponseBody"><a href="#3-SpringMVC注解-ResponseBody" class="headerlink" title="(3)SpringMVC注解-@ResponseBody"></a>(3)SpringMVC注解-@ResponseBody</h4><p>​    @ResponseBody：该注解写在方法上，作用是告诉 Spring 框架，方法的返回值应该直接写入到 HTTP 响应体中，而不是放入视图或者模型中。该注解常用在构建 RESTful Web 服务时直接返回数据（比如 JSON 或 XML 格式）</p><p>样例：直接返回字符串，不进行跳转显示其他页面</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;@RequestMapping(&quot;&#x2F;quick&quot;)@ResponseBodypublic String quick()&#123;&#x2F;*等价于手动操作HttpServletResponse对象response.setContentType(&quot;text&#x2F;plain&quot;);    response.getWriter().write(&quot;你好，世界！&quot;);*&#x2F;return &quot;你好，世界！&quot;;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-回写数据-手动封装Json数据"><a href="#4-回写数据-手动封装Json数据" class="headerlink" title="(4)回写数据-手动封装Json数据"></a>(4)回写数据-手动封装Json数据</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>​    1.导入Json相关的坐标，用于处理对象转Json</p><p>​    2.编写controller逻辑</p><h5 id="样例：将对象信息以Json格式回写"><a href="#样例：将对象信息以Json格式回写" class="headerlink" title="样例：将对象信息以Json格式回写"></a>样例：将对象信息以Json格式回写</h5><p>​    1.首先在pom.xml导json相关的坐标，用于将一个对象的数据转化为Json字符串</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;pom.xml&lt;dependency&gt;&lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;&lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;&lt;version&gt;2.9.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;&lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;&lt;version&gt;2.9.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;&lt;artifactId&gt;jackson-annotations&lt;&#x2F;artifactId&gt;&lt;version&gt;2.9.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.编写Controller逻辑，通过ObjectMappe中方法writeValueAsString(要转成json格式字符串的对象)，将对象转换为Json格式</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;@RequestMapping(&quot;&#x2F;quick&quot;)@ResponseBodypublic String quick()&#123;&#x2F;&#x2F;User是一个实体类User user &#x3D; new User();user.setName(&quot;张三&quot;);user.setAge(24);&#x2F;&#x2F;Jackson库的转换工具类ObjectMapper objectMapper &#x3D; new ObjectMapper();String json &#x3D; objectMapper.writeValueAsString(user);return json;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-回写数据-直接返回对象-集合-SpringMVC封装好的功能会将对象或集合自动转为Json格式"><a href="#5-回写数据-直接返回对象-集合-SpringMVC封装好的功能会将对象或集合自动转为Json格式" class="headerlink" title="(5)回写数据-直接返回对象/集合-SpringMVC封装好的功能会将对象或集合自动转为Json格式"></a>(5)回写数据-直接返回对象/集合-SpringMVC封装好的功能会将对象或集合自动转为Json格式</h4><p>​    要使用SpringMVC自带的该功能需要在spring-mvc.xml（配置组件）文件中进行配置，对处理器适配器进行功能增强</p><p>​    <code>注意：SpringMVC的组件在 Spring 容器启动时会自动加载并生效，不需要显式地注入</code></p><h5 id="样例：配置处理器适配器，使其可以将返回对象自动转化为Json格式"><a href="#样例：配置处理器适配器，使其可以将返回对象自动转化为Json格式" class="headerlink" title="样例：配置处理器适配器，使其可以将返回对象自动转化为Json格式"></a>样例：配置处理器适配器，使其可以将返回对象自动转化为Json格式</h5><p>​    1.配置处理器适配器</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;spring-mvc.xml&#x2F;&#x2F;配置处理器适配器：使得对象会自动转为Json格式&lt;bean id&#x3D;&quot;jsonMessageConverter&quot; class&#x3D;&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;&gt;&lt;property name&#x3D;&quot;massageConverters&quot;&gt;&lt;list&gt;&lt;bean class&#x3D;&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&#x2F;&gt;&lt;&#x2F;list&gt;&lt;&#x2F;property&gt;&lt;&#x2F;bean&gt;&#x2F;&#x2F;以上处理器适配器的配置可以使用SpringMVC提供的注解驱动（也叫注解增强代替：增强@ResponseBody）&lt;mvc:annotation-driven&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在Controller中直接返回对象</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;@RequestMapping(&quot;&#x2F;quick&quot;)@ResponseBodypublic String quick()&#123;&#x2F;&#x2F;User是一个实体类User user &#x3D; new User();user.setName(&quot;张三&quot;);user.setAge(24);return user;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-SpringMVC请求参数的获取"><a href="#5-SpringMVC请求参数的获取" class="headerlink" title="5. SpringMVC请求参数的获取"></a>5. SpringMVC请求参数的获取</h3><p>​    客户端发送请求时一般也会携带对应的参数，我们需要对请求参数进行获取，以便进一步对请求进行处理</p><p>​    如果请求的数据是以 <strong>表单参数</strong> 或 <strong>查询参数</strong> 方式提交，Spring MVC <strong>可以自动绑定到对象，而不需要 @RequestBody</strong></p><h4 id="1-从请求中获得普通类型参数"><a href="#1-从请求中获得普通类型参数" class="headerlink" title="(1)从请求中获得普通类型参数"></a>(1)从请求中获得普通类型参数</h4><p>​    对于SpringMVC而言，Controller中的业务方法的参数名称与请求的参数name值一致，参数会自动映射匹配（数据类型也会自动进行转换）</p><blockquote><p><code>http://localhost:8080/user/quick?username=zhangsan&amp;age=18中的name值分别为username、age</code> </p></blockquote><p>​    </p><h5 id="样例：从请求中直接获得普通类型参数"><a href="#样例：从请求中直接获得普通类型参数" class="headerlink" title="样例：从请求中直接获得普通类型参数"></a>样例：从请求中直接获得普通类型参数</h5><p>​    请求为：<code>http://localhost:8080/user/quick?username=zhangsan&amp;age=18</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;@RequestMapping(&quot;&#x2F;quick&quot;)@ResponseBodypublic void quick(String username , int age)&#123;System.out.println(username);  &#x2F;&#x2F;张三System.out.println(age);  &#x2F;&#x2F;18&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-从请求中将参数打包为对象类型获得"><a href="#2-从请求中将参数打包为对象类型获得" class="headerlink" title="(2)从请求中将参数打包为对象类型获得"></a>(2)从请求中将参数打包为对象类型获得</h4><p>​    对于SpringMVC而言，Controller中的业务方法的对象参数里的属性与请求参数的name一致，参数值会自动注入给对象的属性（机制：数据绑定）</p><blockquote><p><code>http://localhost:8080/user/quick?username=zhangsan&amp;age=18中的name值分别为username、age</code> </p></blockquote><h5 id="样例：从请求中直接把值注入给对象里的属性"><a href="#样例：从请求中直接把值注入给对象里的属性" class="headerlink" title="样例：从请求中直接把值注入给对象里的属性"></a>样例：从请求中直接把值注入给对象里的属性</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;@RequestMapping(&quot;&#x2F;quick&quot;)@ResponseBodypublic void quick(User user)&#123;System.out.println(user.username);  &#x2F;&#x2F;张三System.out.println(user.age);  &#x2F;&#x2F;18&#125;&#125;&#x2F;&#x2F;User类略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-SpringMVC注解-RequestBody"><a href="#3-SpringMVC注解-RequestBody" class="headerlink" title="(3)SpringMVC注解-@RequestBody"></a>(3)SpringMVC注解-@RequestBody</h4><p>​    @RequestBody：该注解写在形参前，用于处理 <code>POST</code>、<code>PUT</code> 等方法提交的 <strong>JSON 或 XML 数据</strong>，并将请求参数封装转换为 Java 对象</p><h5 id="样例：获得ajax发送的请求，相应参数以List集合接收"><a href="#样例：获得ajax发送的请求，相应参数以List集合接收" class="headerlink" title="样例：获得ajax发送的请求，相应参数以List集合接收"></a>样例：获得ajax发送的请求，相应参数以List集合接收</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;@RequestMapping(&quot;&#x2F;quick&quot;)@ResponseBodypublic void quick(@RequestBody List&lt;User&gt; userlist)&#123;System.out.println(userlist);  &#125;&#125;&#x2F;&#x2F;仅需要User的类，List的类如果发的JSON是List数组就不需要，若发的JSON是包含List的对象就需要&#x2F;&#x2F;User类略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Spring-MVC-静态资源访问配置与数据乱码问题解决"><a href="#6-Spring-MVC-静态资源访问配置与数据乱码问题解决" class="headerlink" title="6. Spring MVC 静态资源访问配置与数据乱码问题解决"></a>6. Spring MVC 静态资源访问配置与数据乱码问题解决</h3><h4 id="1-SpringMVC对静态资源的处理方式"><a href="#1-SpringMVC对静态资源的处理方式" class="headerlink" title="(1)SpringMVC对静态资源的处理方式"></a>(1)SpringMVC对静态资源的处理方式</h4><p>​    <code>在SpringBoot是自动配置好的</code>，但是SpringMVC框架需要手动配置，如果不进行静态资源设置会使得访问静态资源（css、js等）不成功，因为在web.xml的文件中的前端控制器的配置是<code>/</code>，其是缺省的servlet，客户端发送请求找对应servlet进行处理，如果没有则全部交给缺省的进行处理，如下图所示：</p><p><a href="https://imgse.com/i/p9eU9aT"><img src="https://s1.ax1x.com/2023/04/23/p9eU9aT.png" alt="前端控制器配置"></a></p><h5 id="配置静态资源处理器（spring-mvc-xml）"><a href="#配置静态资源处理器（spring-mvc-xml）" class="headerlink" title="配置静态资源处理器（spring-mvc.xml）"></a>配置静态资源处理器（spring-mvc.xml）</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;spring-mvc.xml&#x2F;&#x2F;可以设置多组,mapping是请求访问的地址，location是实际资源存在根目录的位置&lt;mvc:resources mapping&#x3D;&quot;&#x2F;js&#x2F;**&quot; location&#x3D;&quot;&#x2F;js&#x2F;&quot;&gt;&#x2F;&#x2F;&lt;mvc:resources mapping&#x3D;&quot;&#x2F;img&#x2F;**&quot; location&#x3D;&quot;&#x2F;img&#x2F;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-SpringMVC对请求中中文字符的处理配置"><a href="#2-SpringMVC对请求中中文字符的处理配置" class="headerlink" title="(2)SpringMVC对请求中中文字符的处理配置"></a>(2)SpringMVC对请求中中文字符的处理配置</h4><p>​    Tomcat8.5的服务器，对于GET请求是不会乱码的，但POST请求对于中文会出现乱码问题，通过配置全局过滤器可以解决乱码的问题</p><p>​    CharacterEncodingFilter是一个 Spring 提供的过滤器，它会在请求进入 Spring MVC 之前和响应返回客户端之前，确保编码的一致性。这个过滤器处理所有传入的请求和响应，强制它们使用指定的字符编码</p><h5 id="配置全局过滤器（web-xml）"><a href="#配置全局过滤器（web-xml）" class="headerlink" title="配置全局过滤器（web.xml）"></a>配置全局过滤器（web.xml）</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;web.xml&lt;filter&gt;&lt;filter-name&gt;CharacterEncodingFilter&lt;&#x2F;filter-name&gt;&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;&lt;init-param&gt;&lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;&lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;&lt;&#x2F;init-param&gt;&lt;&#x2F;filter&gt;&#x2F;&#x2F;filter-mapping是配置请求映射指定什么请求通过，&#x2F;*表示所有请求&lt;filter-mapping&gt;&lt;filter-name&gt;CharacterEncodingFilter&lt;&#x2F;filter-name&gt;&lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;&lt;&#x2F;filter-mapping&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-SpringMVC的其他注解"><a href="#7-SpringMVC的其他注解" class="headerlink" title="7. SpringMVC的其他注解"></a>7. SpringMVC的其他注解</h3><h4 id="1-RequestParam-请求参数与形参绑定"><a href="#1-RequestParam-请求参数与形参绑定" class="headerlink" title="(1)@RequestParam-请求参数与形参绑定"></a>(1)@RequestParam-请求参数与形参绑定</h4><p>​    @RequestParam：该注解写在形参前，用于当请求参数的名称和Controller的方法形参名称不一致时，通过@RequestParam(“请求参数名称一致的名称”)，让请求参数与方法形参进行绑定</p><h5 id="样例：-RequestParam的使用"><a href="#样例：-RequestParam的使用" class="headerlink" title="样例：@RequestParam的使用"></a>样例：@RequestParam的使用</h5><p>​    请求为：<code>http://localhost:8080/user/quick?username=zhangsan</code></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;@RequestMapping(&quot;&#x2F;quick&quot;)@ResponseBody&#x2F;&#x2F;当前参数只有一个且为value则可以省略value，写为@RequestParam(&quot;username&quot;)public void quick(@RequestParam(value&#x3D;&quot;username&quot;) String name)&#123;System.out.println(username);  &#x2F;&#x2F;张三&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="RequestParam的参数"><a href="#RequestParam的参数" class="headerlink" title="@RequestParam的参数"></a>@RequestParam的参数</h5><ul><li>value：设置映射，指定请求参数，将其映射到方法形参</li><li>required：指定请求时请求参数是否必须有，默认true，若请求中不包含此参数则报错</li><li>defaultValue：当请求中没有指定的请求参数时，则映射给方法形参指定的默认值</li></ul><h4 id="2-PathVariable-占位符中变量与形参绑定"><a href="#2-PathVariable-占位符中变量与形参绑定" class="headerlink" title="(2)@PathVariable-占位符中变量与形参绑定"></a>(2)@PathVariable-占位符中变量与形参绑定</h4><p>​    @PathVariable：该注解写在形参前，用<code>占位符&#123;变量名&#125;</code>来获得请求中的常量，通过@PathVariable(“占位符的变量名”)，将占位符里的变量与方法形参进行绑定</p><h5 id="样例：-PathVariable的使用"><a href="#样例：-PathVariable的使用" class="headerlink" title="样例：@PathVariable的使用"></a>样例：@PathVariable的使用</h5><p>​    请求为：<code>http://localhost:8080/user/quick/98</code>，这种请求是Restful风格的，你看没有这个?直接用/的</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;&#x2F;&#x2F;用占位符的变量来与请求中常量绑定@RequestMapping(&quot;&#x2F;quick&#x2F;&#123;score&#125;&quot;)@ResponseBody&#x2F;&#x2F;用@PathVariable让占位符的变量与方法形参进行绑定public void quick(@PathVariable(&quot;score&quot;) String myScore)&#123;System.out.println(myScore);  &#x2F;&#x2F;98&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-RequestHeader-获取请求头"><a href="#3-RequestHeader-获取请求头" class="headerlink" title="(3)@RequestHeader-获取请求头"></a>(3)@RequestHeader-获取请求头</h4><p>​    @RequestHeader：写在方法形参前，通过@RequestHeader(“User-Agent”)获取请求头中的 <code>User-Agent</code> 值，并将该值与方法形参进行绑定，若请求头中没有该值，会抛异常</p><h5 id="样例：-RequestHeader的使用"><a href="#样例：-RequestHeader的使用" class="headerlink" title="样例：@RequestHeader的使用"></a>样例：@RequestHeader的使用</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;@RequestMapping(&quot;&#x2F;quick&quot;)@ResponseBody&#x2F;&#x2F;用@RequestHeader来获得请求头信息public void quick(@RequestHeader(&quot;User-Agent&quot;) String user_agent)&#123;System.out.println(user_agent);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-自定义类型转换器"><a href="#8-自定义类型转换器" class="headerlink" title="8. 自定义类型转换器"></a>8. 自定义类型转换器</h3><p>​    SpringMVC提供有一些常用的类型转换器，如接收到请求时，请求参数都是String类型，SpringMVC可以根据方法形参的类型进行自动转型（常用类型），但有些类型SpringMVC没有提供，那么就需要自定义类型转换器，如日期类型的数据转换</p><h5 id="自定义类型转换器的开发步骤"><a href="#自定义类型转换器的开发步骤" class="headerlink" title="自定义类型转换器的开发步骤"></a>自定义类型转换器的开发步骤</h5><p>​    1.定义转换器类实现Converter接口（这是SpringMVC提供的转换器接口）</p><p>​    2.在Spring-mvc.xml配置文件声明并识别转换器</p><h5 id="样例：自定义时间类型转换器"><a href="#样例：自定义时间类型转换器" class="headerlink" title="样例：自定义时间类型转换器"></a>样例：自定义时间类型转换器</h5><p>​    1.新建DateConverter.java，实现converter接口</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;DateConverter.java&#x2F;&#x2F;Converter&lt;S,T&gt;接口，S代表要转换前的类型，后面的T代表要转成的类型public class DataConverter implements Converter&lt;String,Date&gt;&#123;&#x2F;&#x2F;这是该接口内部要实现的方法，将String转为Datepublic Date convert(String dateStr)&#123;SimpleDateFormat format &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);Date date &#x3D; null;try&#123;date &#x3D; format.parse(dateStr);&#125;catch(Exception e)&#123;e.printStackTrace();&#125;return date;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在Spring-mvc.xml配置文件中声明并识别自定义转换器，识别为替代原先SpringMVC提供的默认转换器</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;Spring-mvc.xml&#x2F;&#x2F;声明转换器&lt;bean id&#x3D;&quot;conversionService&quot; class&#x3D;&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;&lt;property name&#x3D;&quot;converters&quot;&gt;&lt;list&gt;&#x2F;&#x2F;将DateConverter.java注入到转换器工厂&lt;bean class&#x3D;&quot;com.itheima.converter.DateConverter&quot;&gt;&lt;&#x2F;bean&gt;&lt;&#x2F;list&gt;&lt;&#x2F;property&gt;&lt;&#x2F;bean&gt;&#x2F;&#x2F;识别转化器（与1的注解功能启用独立）：将转化器工厂bean替换默认转换器&lt;mvc:annotation-driven conversion-service&#x3D;&quot;conversionService&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring03-监听器存储spring容器与SpringMVC的使用</title>
      <link href="/2023/04/25/Spring03-%E7%9B%91%E5%90%AC%E5%99%A8%E5%AD%98%E5%82%A8spring%E5%AE%B9%E5%99%A8%E4%B8%8ESpringMVC%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/04/25/Spring03-%E7%9B%91%E5%90%AC%E5%99%A8%E5%AD%98%E5%82%A8spring%E5%AE%B9%E5%99%A8%E4%B8%8ESpringMVC%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Spring容器对象的管理"><a href="#1-Spring容器对象的管理" class="headerlink" title="1. Spring容器对象的管理"></a>1. Spring容器对象的管理</h3><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>​    Spring容器对象需要通过<code>new ClasspathXmlApplicationContext(Spring的xml配置文件)</code>或<code>new AnnotationConfigApplicationContext(SpringConfiguration.class)</code>获得，但在编写Web项目，不同的类中，每当需要获得Bean时都要编写一次，这样会使得Spring容器对象创建多次</p><h4 id="1-Web项目：使用自定义监听器管理Spring容器对象-非重点用于引出Spring自带的监听器"><a href="#1-Web项目：使用自定义监听器管理Spring容器对象-非重点用于引出Spring自带的监听器" class="headerlink" title="(1)Web项目：使用自定义监听器管理Spring容器对象(非重点用于引出Spring自带的监听器)"></a>(1)Web项目：使用自定义监听器管理Spring容器对象(非重点用于引出Spring自带的监听器)</h4><p>​    在Web项目中，可以使用ServletContextListener<strong>监听整个Web应用启动和销毁的生命周期</strong>，当Web应用启动时，就可创建Spring容器对象，将其存储在最大的域servletContext中，这样在任意位置都可以从域中获得Spring容器对象</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>​    1.在监听器的包内定义一个ServletContextListener类</p><p>​    2.在web.xml将这个ServletContextListener类进行配置</p><p>​    3.其他Servlet、Filter、Listener类通过this.getServletContext来获得存储在servletContext域中的Spring容器对象</p><h5 id="样例代码"><a href="#样例代码" class="headerlink" title="样例代码"></a>样例代码</h5><p>​    1.在listener包下新建ContextLoaderListener.java，继承实现servletContextListener接口</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;ContextLoaderListener.javapublic class ContextLoaderListener implements ServletContextListener&#123;&#x2F;&#x2F;上下文初始化时调用的方法public void contextInitialized(ServletContextEvent servletContextEvent)&#123;ApplicationContext app &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#x2F;&#x2F;将app存储到最大的域（ServletContext）中ServletContext servletContext &#x3D; servletContextEvent.getServletContext();servletContext.setAttribute(&quot;app&quot;,app);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在web.xml文件，配置ContextLoaderListener.java，告知tomcat有这个监听器</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;web.xml&lt;web-app version&#x3D;&quot;3.0&quot; ...&gt;&#x2F;&#x2F;配置自定义监听器&lt;listener&gt;&lt;listener-class&gt;com.itheima.listener.ContextLoaderListener&lt;&#x2F;listener-class&gt;&lt;&#x2F;listener&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.Web层代码-UserServlet类中，通过this.getServletContext来获得存储在servletContext域中的Spring容器对象</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserServlet.javapublic class UserServlet extends HttpServlet&#123;@Overrideprotected void doGet(HttpServletRequest req,HttpServletResponse resp) throws Exception&#123;&#x2F;&#x2F;获取上下文ServletContext servletContext &#x3D; this.getServletContext();&#x2F;&#x2F;获取在servletContext里的Spring容器对象ApplicationContext app &#x3D; (ApplicationContext)servletContext.getAttribute(&quot;app&quot;);&#x2F;&#x2F;使用Spring容器对象，获得容器里的beanUserService userService &#x3D; app.getBean(UserService.class);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Web项目：使用Spring封装的监听器管理Spring容器对象（重点）"><a href="#2-Web项目：使用Spring封装的监听器管理Spring容器对象（重点）" class="headerlink" title="(2)Web项目：使用Spring封装的监听器管理Spring容器对象（重点）"></a>(2)Web项目：使用Spring封装的监听器管理Spring容器对象（重点）</h4><p>​    Spring提供了监听器ContextLoaderListener，其内部基于ServletContextListener进行封装，其还提供了工具类WebApplicationContextUtils用于获得Spring容器对象，在Web项目中的主要作用是：1.加载Spring容器对象，2.将该容器封装在Web的上下文对象中</p><h5 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h5><p>​    1.在pom.xml文件导入spring-web坐标</p><p>​    2.在web.xml中配置ContextLoaderListener监听器，以及导入Spring配置文件applicationContext.xml</p><p>​    3.使用WebApplicationContextUtils获得Spring容器对象</p><h5 id="样例代码-1"><a href="#样例代码-1" class="headerlink" title="样例代码"></a>样例代码</h5><p>​    1.在pom.xml文件导入spring-web坐标</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;pom.xml&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;&lt;artifactId&gt;&gt;spring-web&lt;&#x2F;artifactId&gt;&lt;version&gt;5.0.5&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在web.xml文件下配置Spring提供的监听器，并在配置前告知监听器加载Spring配置文件的路径，监听器会通过这个路径的文件自动创建Spring容器对象（该功能是Spring封装好的）</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;web.xml&lt;web-app version&#x3D;&quot;3.0&quot; ...&gt;&#x2F;&#x2F;告知监听器加载Spring配置文件的路径，监听器会通过这个文件获得Spring容器对象&lt;context-param&gt;&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;&lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;&lt;&#x2F;context-param&gt;&#x2F;&#x2F;配置Spring的监听器&lt;listener&gt;&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;&lt;&#x2F;listener&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.在UserServlet.java，编写获得Web上下文，再通过Web上下文获得Spring容器对象，再通过Spring容器对象获得bean</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserServlet.javapublic class UserServlet extends HttpServlet&#123;@Overrideprotected void doGet(HttpServletRequest req,HttpServletResponse resp) throws Exception&#123;&#x2F;&#x2F;获取上下文ServletContext servletContext &#x3D; this.getServletContext();&#x2F;&#x2F;获取在servletContext里的Spring容器对象WebApplicationContext app &#x3D; WebApplicationContextUtils.getWebApplicationContext(servletContext);&#x2F;&#x2F;使用Spring容器对象，获得容器里的beanUserService userService &#x3D; app.getBean(UserService.class);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-SpringMVC框架的概述"><a href="#2-SpringMVC框架的概述" class="headerlink" title="2. SpringMVC框架的概述"></a>2. SpringMVC框架的概述</h3><p>​    Spring MVC 基于Servlet，其通常作为Web层的一部分，它可以独立于其他Spring模块来运行，也可以结合Spring的其他功能，如Spring事务管理、数据访问、AOP等</p><p>​    <code>SpringMVC可以通过一套注解让简单的Java类成为处理请求的控制器（servlet类）</code>，而无需实现任何接口，同时还支持RESTful编程风格的请求</p><h4 id="1-SpringMVC框架的使用"><a href="#1-SpringMVC框架的使用" class="headerlink" title="(1)SpringMVC框架的使用"></a>(1)SpringMVC框架的使用</h4><p>​    Spring MVC 项目的设计上有一个 <strong>上下文分层</strong> 的概念，Web 上下文和 Root 上下文（Spring容器对象）是分开的。这种分层有助于提高模块化和可维护性。<code>applicationContext.xml</code> 通常用于定义非 Web 相关的服务和数据访问对象，而 <code>spring-mvc.xml</code> 负责配置 Web 相关的组件（例如，处理请求的控制器、视图解析器等）</p><p>​    当 <code>DispatcherServlet</code> 加载 <code>spring-mvc.xml</code> 时，它会创建一个 <strong>Web Application Context</strong>，用于管理 Web 层相关的 Bean</p><h5 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h5><p>​    1.导入SpringMVC坐标<br>​    2.在web.xml中配置SpringMVC前端控制器，并配置加载spring-mvc.xml<br>​    3.新建spring-mvc.xml作为SpringMVC的配置文件，在该文件中配置Spring组件扫描扫描web层的包，配置SpringMVC注解的启用<br>​    4.编写UserController.java，用注解将其配置到Spring容器中<br>​    5.运行后用浏览器访问资源测试</p><h5 id="样例代码-2"><a href="#样例代码-2" class="headerlink" title="样例代码"></a>样例代码</h5><p>​    1.在pom.xml文件导入SpringMVC包</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;pom.xml&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;&lt;version&gt;5.0.5.RELEASE&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在web.xml中配置SpringMVC的前端控制器 ，在 Spring MVC 项目中，spring-mvc.xml 是由 <strong><code>DispatcherServlet</code></strong> 来加载的，而不是 <code>ContextLoaderListener</code>。<code>DispatcherServlet</code> 是 Spring MVC 的核心，它充当前端控制器（Front Controller），负责处理所有 HTTP 请求。<code>DispatcherServlet</code> 会读取它自己的配置文件（通常是 <code>spring-mvc.xml</code>），初始化 Web 层相关的组件，例如控制器、视图解析器、请求映射等</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;web.xml&lt;servlet&gt;&lt;servlet-name&gt;DispatcherServlet&lt;&#x2F;servlet-name&gt;&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;&#x2F;&#x2F;init-param：用于告知前端控制器配置这个Servlet时配置文件在哪&lt;init-param&gt;&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;&lt;param-value&gt;classpath:spring-mvc.xml&lt;&#x2F;param-value&gt;&lt;&#x2F;init-param&gt;&#x2F;&#x2F;load-on-startup:代表服务器启动时就去加载servlet(优先级设置为1)&lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;&lt;&#x2F;servlet&gt;&#x2F;&#x2F;servlet-mapping:为映射地址&lt;servlet-mapping&gt;&lt;servlet-name&gt;DispatcherServlet&lt;&#x2F;servlet-name&gt;&#x2F;&#x2F;这个&#x2F;表示缺省的servlet，即每次访问任何请求都要走这个servlet，若为YYY.xxx为扩展名为YYY.xxx时才走这个servlet&lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;&lt;&#x2F;servlet-mapping&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.创建SpringMVC的xml文件，进行Spring组件扫描，按定义SpringMVC只管Web层所以只扫描controller，同时启用SpringMVC的注解</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;spring-mvc.xml&#x2F;&#x2F;需要在命名空间里补一个context的命名空间&lt;beans xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;   xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context&gt; &#x2F;&#x2F;配置扫描controller层 &lt;context:component-scan base-package&#x3D;&quot;com.itheima.controller&quot;&#x2F;&gt; &#x2F;&#x2F;启用Spring MVC的注解，和Spring组件扫描类似 &lt;mvc:annotation-driven &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    4.编写UserController.java，用注解将其配置到Spring容器中</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;&#x2F;&#x2F;这个属于SpringMVC的注解，详细功能见下面@RequestMapping(&quot;&#x2F;quick&quot;)public String save()&#123;System.out.println(&quot;运行成功&quot;);return &quot;success.jsp&quot;;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-SpringMVC的注解：-RequestMapping-“请求路径”"><a href="#2-SpringMVC的注解：-RequestMapping-“请求路径”" class="headerlink" title="(2)SpringMVC的注解：@RequestMapping(“请求路径”)"></a>(2)SpringMVC的注解：@RequestMapping(“请求路径”)</h4><p>​    <code>@RequestMapping</code>是 Spring MVC 中用于处理 HTTP 请求的注解。<code>它可以用于类级别或者方法级别</code>，用来定义请求的 URL 映射、HTTP 方法（如 GET、POST 等）以及请求参数等信息</p><ul><li><strong>方法级别</strong>：用来映射具体的请求路径，并指定该方法处理哪些 HTTP 请求。</li><li><strong>类级别</strong>：用来为控制器类定义一个基础的路径，方法级别的路径会在类级别路径的基础上追加。</li></ul><h5 id="样例：方法级别"><a href="#样例：方法级别" class="headerlink" title="样例：方法级别"></a>样例：方法级别</h5><p>​    在浏览器请求路径：<code>http://localhost:8080/quick</code>可以访问success.jsp的资源</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;&#x2F;&#x2F;请求地址为 http:&#x2F;&#x2F;localhost:8080&#x2F;quick@RequestMapping(&quot;&#x2F;quick&quot;)public String save()&#123;System.out.println(&quot;运行成功&quot;);return &quot;success.jsp&quot;;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="样例：类级别"><a href="#样例：类级别" class="headerlink" title="样例：类级别"></a>样例：类级别</h5><p>​    在浏览器请求路径：<code>http://localhost:8080/user/quick</code>可以访问success.jsp的资源</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controller@RequestMapping(&quot;&#x2F;user&quot;)public class UserController&#123;&#x2F;&#x2F;请求地址为 http:&#x2F;&#x2F;localhost:8080&#x2F;user&#x2F;quick@RequestMapping(&quot;&#x2F;quick&quot;)public String save()&#123;System.out.println(&quot;运行成功&quot;);return &quot;success.jsp&quot;;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="请求路径的参数配置"><a href="#请求路径的参数配置" class="headerlink" title="请求路径的参数配置"></a>请求路径的参数配置</h5><p>​    通过请求路径的参数配置可以进一步细分请求的匹配条件</p><ul><li>value：用于指定请求的URL，在只有value的情况下可以省略，但多个属性不能省，上面代码完整的应该为<code>@RequestMapping(value=&quot;/quick&quot;)</code></li><li>method：用于指定请求的方式，默认是GET，如果要改为POST，它存储方式是枚举类型为<code>@RequestMapping(value=&quot;/quick&quot;,method=RequestMethod.POST)</code></li></ul><h4 id="3-Spring新注解-代替-RequestMapping"><a href="#3-Spring新注解-代替-RequestMapping" class="headerlink" title="(3)Spring新注解-代替 @RequestMapping"></a>(3)Spring新注解-代替 @RequestMapping</h4><p>​    Spring 4.3 引入了几个更为具体的注解，用来代替 @RequestMapping，使代码更加语义化</p><ul><li><code>@GetMapping</code>：用于处理 GET 请求</li><li><code>@PostMapping</code>：用于处理 POST 请求</li><li><code>@PutMapping</code>：用于处理 PUT 请求</li><li><code>@DeleteMapping</code>：用于处理 DELETE 请求</li><li><code>@PatchMapping</code>：用于处理 PATCH 请求</li></ul><h4 id="4-SpringMVC的执行流程"><a href="#4-SpringMVC的执行流程" class="headerlink" title="(4)SpringMVC的执行流程"></a>(4)SpringMVC的执行流程</h4><h5 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h5><p><a href="https://imgse.com/i/pE1FvkV"><img src="https://s21.ax1x.com/2025/02/24/pE1FvkV.png" alt="SpringMVC的执行流程"></a></p><h5 id="上图流程解释（重点）"><a href="#上图流程解释（重点）" class="headerlink" title="上图流程解释（重点）"></a>上图流程解释（重点）</h5><p>​    当你在浏览器中输入一个 URL（比如 <code>http://localhost:8080/quick</code>）并按下回车时，浏览器会向服务器发起一个 <strong>HTTP 请求</strong>。这个请求可能包含一些数据（如表单数据、请求头等）。服务器接收到请求后，会做出一个 <strong>HTTP 响应</strong>，将结果返回给浏览器，通常是网页内容、图片等。<strong>Servlet 容器（如 Tomcat）会在每次接收到请求时自动创建这两个对象</strong>【HttpServletRequest（简称 <strong>req</strong>）和 HttpServletResponse（简称 <strong>resp</strong>）】并将它们传递给 DispatcherServlet（Spring 的前端控制器），<strong>DispatcherServlet 将请求路由到对应的控制器方法并将 req和resp对象传递给控制器方法</strong>，然后控制器方法就可以使用它们来处理请求和构建响应，最后，控制器方法返回响应的视图或数据，DispatcherServlet会通过 resp将数据发送回浏览器</p><h5 id="什么是servlet"><a href="#什么是servlet" class="headerlink" title="什么是servlet"></a>什么是servlet</h5><p>​    Servlet是 Java 提供的一种技术，用于在服务器端处理 HTTP 请求和生成 HTTP 响应。简单来说，Servlet 就是一个可以处理 Web 请求的 Java 类。当用户访问一个 Web 应用时，服务器会调用对应的 Servlet 来处理请求。</p><h3 id="3-SpringMVC的其他组件"><a href="#3-SpringMVC的其他组件" class="headerlink" title="3. SpringMVC的其他组件"></a>3. SpringMVC的其他组件</h3><p>​    除了DispatcherServlet（前端控制器），要实现请求的处理和响应，Spring MVC 的其他组件还包括 HandlerMapping（请求映射）、Controller（请求处理）、HandlerAdapter（调用控制器）、ModelAndView（模型视图）、ViewResolver（视图解析器）等，这些其他组件都是由DispatcherServlet调用完成工作</p><p>​    <code>这里所有组件的配置都是在spring-web.xml文件中配置</code></p><h4 id="1-SpringMVC各组件执行流程"><a href="#1-SpringMVC各组件执行流程" class="headerlink" title="(1)SpringMVC各组件执行流程"></a>(1)SpringMVC各组件执行流程</h4><h5 id="图示-1"><a href="#图示-1" class="headerlink" title="图示"></a>图示</h5><p><a href="https://imgse.com/i/pE1ZJbj"><img src="https://s21.ax1x.com/2025/02/24/pE1ZJbj.png" alt="SpringMVC各组件执行流程"></a></p><h5 id="SpringMVC代码层面的执行流程（各组件）"><a href="#SpringMVC代码层面的执行流程（各组件）" class="headerlink" title="SpringMVC代码层面的执行流程（各组件）"></a>SpringMVC代码层面的执行流程（各组件）</h5><p>​    1.web.xml加载：在Servlet容器启动时，web.xml配置文件加载加载，配置 DispatcherServlet 和 ContextLoaderListener<br>​    2.ContextLoaderListener加载：ContextLoaderListener初始化并加载 Root Web Context（例如 applicationContext.xml），通常包含服务层和数据源的配置<br>​    3.DispatcherServlet 加载：DispatcherServlet 加载并初始化 Web ApplicationContext（spring-mvc.xml）<br>​    4.请求到达 DispatcherServlet：请求由 DispatcherServlet 拦截，HandlerMapping 查找匹配的控制器（Controller）<br>​    5.HandlerAdapter 执行控制器：一旦找到匹配的控制器，DispatcherServlet使用HandlerAdapter来调用控制器方法。HandlerAdapter负责执行控制器方法，并处理控制器方法的返回值（比如视图名或数据）<br>​    6.视图解析与响应：DispatcherServlet 通过视图解析器（ViewResolver）渲染视图，将最终响应通过 HttpServletResponse返回给浏览器</p><h4 id="2-SpringMVC组件在spring-mvc-xml的配置"><a href="#2-SpringMVC组件在spring-mvc-xml的配置" class="headerlink" title="(2)SpringMVC组件在spring-mvc.xml的配置"></a>(2)SpringMVC组件在spring-mvc.xml的配置</h4><p>​    SpringMVC组件在原生环境是配置好的，可以在spring-mvc.xml对组件再配置进行功能上增强（aop思想）</p><h5 id="样例：视图解析器（viewResolver）的配置"><a href="#样例：视图解析器（viewResolver）的配置" class="headerlink" title="样例：视图解析器（viewResolver）的配置"></a>样例：视图解析器（viewResolver）的配置</h5><p>​    在进行视图跳转时，对每一次请求<code>u</code>进行<code>前缀+u+后缀</code>的拼接作为请求路径</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;spring-mvc.xml&#x2F;&#x2F;配置视图解析器&lt;bean id&#x3D;&quot;viewResolver&quot; class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;&#x2F;&#x2F;用其父类提供的set方法进行注入&#x2F;&#x2F;设置视图路径的前缀&lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;jsp&#x2F;&quot;&gt;&#x2F;&#x2F;设置视图路径的后缀&lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring02-连接池与Spring注解</title>
      <link href="/2023/04/25/Spring02-%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8ESpring%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/04/25/Spring02-%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8ESpring%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Spring配置连接池-数据源"><a href="#1-Spring配置连接池-数据源" class="headerlink" title="1. Spring配置连接池(数据源)"></a>1. Spring配置连接池(数据源)</h3><p>​    连接池是对数据库连接的管理工具，常见的连接池有：DBCP、C3P0、BoneCP、Druid等</p><h4 id="1-连接池和数据库的区别"><a href="#1-连接池和数据库的区别" class="headerlink" title="(1)连接池和数据库的区别"></a>(1)连接池和数据库的区别</h4><h5 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h5><ul><li>连接池是一种用于管理数据库连接的机制，它通过提前创建一定数量的数据库连接，并在应用程序中重复利用这些连接，从而减少了频繁创建和销毁数据库连接的开销</li><li>当应用程序需要与数据库进行交互时，连接池会从池中获取一个可用的连接，当操作完成后，该连接会被归还给连接池，以便其他请求使用</li><li>连接池的主要作用是提高数据库操作的效率，特别是在高并发环境下。</li></ul><h5 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h5><ul><li>数据库是一个系统，用来存储和管理数据。它允许用户通过SQL语句来进行数据的增、删、改、查等操作</li><li>常见的数据库有关系型数据库（如MySQL、PostgreSQL）和非关系型数据库（如MongoDB、Redis）</li></ul><h4 id="2-连接池的手动连接使用-非Spring"><a href="#2-连接池的手动连接使用-非Spring" class="headerlink" title="(2)连接池的手动连接使用(非Spring)"></a>(2)连接池的手动连接使用(非Spring)</h4><h5 id="手动连接步骤"><a href="#手动连接步骤" class="headerlink" title="手动连接步骤"></a>手动连接步骤</h5><p>​    1.添加连接池的依赖和数据库驱动的依赖（pom.xml）<br>​    2.配置连接池基本连接信息和数据库连接信息（jdbc.properties）<br>​    3.创建和初始化连接池（DataSourse.java）<br>​    4.获取连接并使用（DataSourse.java）<br>​    5.关闭连接（DataSourse.java）</p><h5 id="手动连接实操"><a href="#手动连接实操" class="headerlink" title="手动连接实操"></a>手动连接实操</h5><p>​    1.在pom.xml文件中导入坐标，mysql、c3p0</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;pom.xml&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;&lt;version&gt;5.1.32&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;c3p0&lt;&#x2F;groupId&gt;&lt;artifactId&gt;c3p0&lt;&#x2F;artifactId&gt;&lt;version&gt;0.9.1.2&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在resource文件夹下创建jdbc.properties文件，配置数据库连接信息</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;jdbc.propertiesjdbc.driver&#x3D;com.mysql.jdbc.Driverjdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;testjdbc.username&#x3D;rootjdbc.password&#x3D;root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.加载.properties文件来连接数据库，通过Java提供的ResourceBundle类以及该类提供的getBundle(“.properties文件的类加载路径且不需要写扩展名”)方法，来导入.properties文件。通过ResourceBundle对象的getString(“.properties文件中定义的key值”)，来获得对应的字符串</p><p>​    4-5.获取连接/断开连接</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;DataSourse.javapublic void useDataSourse() throws Exception&#123;&#x2F;&#x2F;读取jdbc.properties配置文件ResourceBundle rb &#x3D; ResourceBundle.getBundle(&quot;jdbc&quot;);String driver &#x3D; rb.getString(&quot;jdbc.driver&quot;);String url &#x3D; rb.getString(&quot;jdbc.url&quot;);String username &#x3D; rb.getString(&quot;jdbc.username&quot;);String password &#x3D; rb.getString(&quot;jdbc.password&quot;);&#x2F;&#x2F;创建连接池对象，将连接参数配置ComboPooledDataSource dataSource &#x3D; new ComboPooledDataSource();dataSource.setDriverClass(driver);dataSource.setJdbcUrl(url);dataSource.setUser(username);dataSource.setPassword(password);&#x2F;&#x2F;获取连接Connection connection &#x3D; dataSource.getConnection();System.out.println(connection);&#x2F;&#x2F;关闭连接connection.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-连接池使用Spring容器连接"><a href="#3-连接池使用Spring容器连接" class="headerlink" title="(3)连接池使用Spring容器连接"></a>(3)连接池使用Spring容器连接</h4><p>​    对于c3p0连接池的对象dataSource的创建使用Spring容器完成</p><h5 id="Spring容器连接步骤"><a href="#Spring容器连接步骤" class="headerlink" title="Spring容器连接步骤"></a>Spring容器连接步骤</h5><p>​    1.导入Spring坐标、连接池坐标、数据库坐标（pom.xml）<br>​    2.创建数据库连接的配置文件（jdbc.properties）<br>​    3.创建Spring的配置文件（applicationContext.xml）<br>​    4.使用Spring容器获得连接池对象（SpringDataSourse.java）<br>​    5.获取连接并使用（SpringDataSourse.java）<br>​    6.关闭连接(SpringDataSourse.java)</p><h5 id="Spring连接实操"><a href="#Spring连接实操" class="headerlink" title="Spring连接实操"></a>Spring连接实操</h5><p>​    1.在pom.xml文件中导入坐标，mysql、c3p0、Spring</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;pom.xml&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;&lt;version&gt;5.1.32&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;c3p0&lt;&#x2F;groupId&gt;&lt;artifactId&gt;c3p0&lt;&#x2F;artifactId&gt;&lt;version&gt;0.9.1.2&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;&lt;version&gt;5.0.5.RELEASE&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    2.在resource文件夹下创建jdbc.properties文件，配置数据库连接信息</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;jdbc.propertiesjdbc.driver&#x3D;com.mysql.jdbc.Driverjdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;testjdbc.username&#x3D;rootjdbc.password&#x3D;root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.在resource文件夹下创建Spring的applicationContext.xml配置文件，抽取properties文件，需要在命名空间添加引入Context，配置连接池的bean</p><pre class="line-numbers language-none"><code class="language-none">&lt;beans xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot; &#x2F;&#x2F;命名空间添加这两句话用于引入Context   xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt; &#x2F;&#x2F;加载外部的properties文件到Spring容器中，当前文件在类加载路径下&lt;context:property-placeholder location&#x3D;&quot;classpath:jdbc.properties&quot;&#x2F;&gt;&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;&#x2F;&#x2F;name的值和set方法有关&lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;&#x2F;property&gt;&lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;&#x2F;property&gt;&lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;&#x2F;property&gt;&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;&#x2F;property&gt;&lt;&#x2F;bean&gt;&lt;&#x2F;beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    4.使用Spring容器获得连接池对象</p><p>​    5-6.获取连接/断开连接</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;SpringDataSourse.javapublic void useSpringDataSourse throws Exception&#123;&#x2F;&#x2F;获得连接池对象ApplicationContext app &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);DataSource dataSource &#x3D; (DataSource) app.getBean(&quot;dataSouce&quot;);&#x2F;&#x2F;获取连接Connection connection &#x3D; dataSource.getConnection();System.out.println(connection);&#x2F;&#x2F;关闭连接connection.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Spring注解开发"><a href="#2-Spring注解开发" class="headerlink" title="2. Spring注解开发"></a>2. Spring注解开发</h3><p>​    Spring是轻代码重配置的框架，配置比较繁重影响开发效率，<code>注解完全代替xml配置文件可以简化配置</code>，提高开发效率</p><h4 id="1-Spring注解开发的准备工作"><a href="#1-Spring注解开发的准备工作" class="headerlink" title="(1)Spring注解开发的准备工作"></a>(1)Spring注解开发的准备工作</h4><p>​    要使用注解需要提前告诉Spring，通过在applicationContext.xml文件中配置组件扫描，指定哪个包及其子包下的Java文件需要进行扫描以便识别使用注解配置的类、字段和方法</p><h5 id="语法：配置组件扫描"><a href="#语法：配置组件扫描" class="headerlink" title="语法：配置组件扫描"></a>语法：配置组件扫描</h5><p>​    <code>base-package=&quot;包名&quot;</code>，其会扫描该包下所有的子包，包下所有使用了注解的都会被扫描到</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;applicationContext.xml，是在下方，不是命名空间配置，这个也需要引入context命名空间&lt;context:component-scan base-package&#x3D;&quot;com.itheima&quot;&gt;&lt;&#x2F;context:component-scan&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-Spring原始注解-核心注解-的介绍"><a href="#2-Spring原始注解-核心注解-的介绍" class="headerlink" title="(2)Spring原始注解(核心注解)的介绍"></a>(2)Spring原始注解(核心注解)的介绍</h4><p>​    Spring原始注解主要用于<code>代替Spring的xml文件来配置和管理 Spring 容器中的 Bean</code>，处理依赖注入、事务管理、事件处理等任务</p><h5 id="常用的原始注解"><a href="#常用的原始注解" class="headerlink" title="常用的原始注解"></a>常用的原始注解</h5><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Component</td><td align="center">写在类上，标记这个类作为 Spring 容器中的 Bean</td></tr><tr><td align="center">@Controller</td><td align="center">写在作为Spring MVC 控制器的类上，与@Component效果一样，仅作为语义区分</td></tr><tr><td align="center">@Service</td><td align="center">写在作为服务层的类上，与@Component效果一样，仅作为语义区分</td></tr><tr><td align="center">@Repository</td><td align="center">写在作为数据访问层的类上，与@Component效果一样，仅作为语义区分</td></tr><tr><td align="center">@Autowired</td><td align="center">写在字段、构造方法或set方法上，自动将一个Spring容器的Bean 注入到另一个 Bean</td></tr><tr><td align="center">@Qualifier</td><td align="center">@Autowired根据类型注入Bean，当有多个相同类型的Bean时，在其下方使用该注解指定要注入的 Bean 的名字</td></tr><tr><td align="center">@Value</td><td align="center">写在字段上，用于注入普通值或外部配置值（如 application.properties或 application.yml文件中的属性）</td></tr><tr><td align="center">@Scope</td><td align="center">写在类上，定义 Bean 的作用域</td></tr><tr><td align="center">@PostConstruct</td><td align="center">写在方法上，该方法在该类的Bean初始化后自动执行</td></tr><tr><td align="center">@PreDestroy</td><td align="center">写在方法上，该方法在容器销毁该类的Bean前自动执行</td></tr></tbody></table><h4 id="3-Spring的原始注解详解"><a href="#3-Spring的原始注解详解" class="headerlink" title="(3)Spring的原始注解详解"></a>(3)Spring的原始注解详解</h4><h5 id="Component-“唯一标识”"><a href="#Component-“唯一标识”" class="headerlink" title="@Component(“唯一标识”)"></a>@Component(“唯一标识”)</h5><p>​    使用注解<code>@Component(&quot;唯一标识&quot;)</code>等同在xml文件中对bean的配置，在需要Spring容器管理的类上方写注解，</p><p>​    <strong>注意：唯一标识可以不写，如@Component</strong></p><p>样例：@Component的使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserDaoImpl.java&#x2F;&#x2F;等价于xml文件：&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.itheima.dao.impl.UserDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;@Component(&quot;userDao&quot;)public class UserDaoImpl implements UserDao&#123;public void save()&#123;System.out.println(&quot;save running...&quot;);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h5><p>​    使用注解<code>@Autowired</code>等同于在xml文件中的propety属性的注入配置，写在字段上，Spring 会自动为该字段注入一个 Bean（前提是容器中有与字段类型匹配的 Bean），没有找到合适的或找到多个其会抛出异常</p><p>​    一个bean可省：如果存在多个符合条件的 bean可以在其下方加<code>@Qualifier(&quot;唯一标识&quot;)</code>指定注入bean的名字</p><p>样例：@Autowired的使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserServiceImpl.java&#x2F;&#x2F;等价于xml文件：&lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.itheima.service.impl.UserServiceImpl&quot;&gt;@Component(&quot;userService&quot;)public class UserServiceImpl implements UserService&#123;&#x2F;&#x2F;等价于xml文件：&lt;property name&#x3D;&quot;userDao&quot; ref&#x3D;&quot;userDao&quot;&gt;&lt;&#x2F;property&gt;@Autowired@Qualifier(&quot;userDao&quot;)private UserDao userDao;&#x2F;&#x2F;注入字段不需要额外写set方法&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Controller，-Service，-Repository"><a href="#Controller，-Service，-Repository" class="headerlink" title="@Controller，@Service，@Repository"></a>@Controller，@Service，@Repository</h5><p>​    他们都属于特殊类型的@Component注解，功能与其一致，作用是增强代码的可读性：@Controller—web层；@Service—service层；@Repository—dao层</p><p>​    <strong>注意：他们三个都可以写唯一标识，如@Controller(“userController”)</strong></p><p>样例：@Controller，@Service，@Repository的使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserController.java@Controllerpublic class UserController&#123;    &#x2F;&#x2F; 控制器逻辑&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserServiceImpl.java@Servicepublic class UserServiceImpl implements UserService&#123;    &#x2F;&#x2F; 业务逻辑&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserDaoImpl.java@Repositorypublic class UserDaoImpl implements UserDao&#123;    &#x2F;&#x2F; 数据访问逻辑&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Value-“要注入的值”"><a href="#Value-“要注入的值”" class="headerlink" title="@Value(“要注入的值”)"></a>@Value(“要注入的值”)</h5><p>​    @Value用于注入属性值，可以值直接注入bean或者将外部的配置值（如application.properties或application.yml文件中的属性）注入到 Bean 的字段中，在值注入中虽然值是你提供的，但还是Spring来进行注入，而使用外部配置值需要将这些文件提前注入到Spring容器中</p><p>样例：@Value(“要注入的值”)的使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserDaoImpl.java@Component(&quot;userDao&quot;)public class UserDaoImpl implements UserDao&#123;&#x2F;&#x2F;将String类型的itcast注入it，直接注入@Value(&quot;itcast&quot;)private String it;&#x2F;&#x2F;Spring容器中要提前加载jdbc.properties文件才可以通过&#96;$&#123;&#125;&#96;对文件里的内容进行注入@Value(&quot;$&#123;jdbc.drive&#125;&quot;)private String driver;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Scope-“属性值”"><a href="#Scope-“属性值”" class="headerlink" title="@Scope(“属性值”)"></a>@Scope(“属性值”)</h5><p>​    @Scope定义bean的范围，其写在类的上方，用来设置bean是单例还是多例</p><p>样例：@Scope(“属性值”)的使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserServiceImpl.java@Component(&quot;userService&quot;)&#x2F;&#x2F;设置创建的bean是多例，单例设置为@Scope(&quot;singleton&quot;)@Scope(&quot;prototype&quot;)public class UserServiceImpl implements UserService&#123;&#x2F;&#x2F;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="PostConstruct和-PreDestroy"><a href="#PostConstruct和-PreDestroy" class="headerlink" title="@PostConstruct和@PreDestroy"></a>@PostConstruct和@PreDestroy</h5><p>​    写在类中的方法前，用于设置bean在创建或者销毁时要执行的方法</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;UserServiceImpl.java@Component(&quot;userService&quot;)public class UserServiceImpl implements UserService&#123;&#x2F;&#x2F;配置该方法在bean创建时调用@PostConstructpublic void init()&#123;System.out.println(&quot;Service类的bean初始化调用&quot;);&#125;&#x2F;&#x2F;配置该方法在bean销毁前调用@PreDestroypublic void destroy()&#123;System.out.println(&quot;Service类的bean销毁前调用&quot;);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-Spring3新注解-配置注解-介绍"><a href="#4-Spring3新注解-配置注解-介绍" class="headerlink" title="(4)Spring3新注解(配置注解)介绍"></a>(4)Spring3新注解(配置注解)介绍</h4><p>​    原始注解不能完全代替xml配置文件，<code>通过使用@Configuration注解的类可以充当Spring的Java配置文件，取代传统的 applicationContext.xml配置文件</code></p><h5 id="使用Spring新注解替代的配置如下："><a href="#使用Spring新注解替代的配置如下：" class="headerlink" title="使用Spring新注解替代的配置如下："></a>使用Spring新注解替代的配置如下：</h5><ul><li>非自定义的类的bean导入：如需要将第三方jar包中的类配置到Spring容器中</li><li>加载properties文件的配置：&lt; context:property-placeholder &gt;</li><li>组件扫描的配置：&lt; context:component-scan &gt;</li><li>引入其他文件：&lt; import &gt; </li></ul><h5 id="Spring3的新注解"><a href="#Spring3的新注解" class="headerlink" title="Spring3的新注解"></a>Spring3的新注解</h5><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Configuration</td><td align="center">写在类上，用于标注该类为Java的配置类用于代替Spring的xml配置文件</td></tr><tr><td align="center">@ComponentScan</td><td align="center">写在Java的配置类上，用于指定自动扫描的包及子包</td></tr><tr><td align="center">@Bean</td><td align="center">写在方法上，将该方法的返回值交由Spring容器管理</td></tr><tr><td align="center">@PropertySource</td><td align="center">写在类上，用于加载外部的属性文件（如 .properties文件）</td></tr><tr><td align="center">@Import</td><td align="center">写在Java的配置类上，用于将其他的配置类导入到该配置类</td></tr></tbody></table><h4 id="5-Spring新注解详解"><a href="#5-Spring新注解详解" class="headerlink" title="(5)Spring新注解详解"></a>(5)Spring新注解详解</h4><h5 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h5><p>​    @Configuration用于标识一个类作为配置类，Spring 容器就会自动扫描这个类，并将它作为配置类来处理。配置类是用来定义 Spring 容器中的bean 配置的，<code>这些类通常包含了多个@Bean注解的方法</code>，这些方法的返回值会交由Spring 容器管理</p><p>样例：@Configuration的使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;SpringConfiguration&#x2F;&#x2F;标志该类是Spring的核心配置类@Configurationpublic class SpringConfiguration&#123;@Bean&#x2F;&#x2F;方法...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="面试题：-Configuration和-Component中-Bean的区别"><a href="#面试题：-Configuration和-Component中-Bean的区别" class="headerlink" title="面试题：@Configuration和@Component中@Bean的区别"></a>面试题：@Configuration和@Component中@Bean的区别</h5><p>​    @Configuration中的@Bean方法的返回值直接交给Spring管理（必定单例），而@Component中的Bean是作为普通方法调用，可能造成多例问题</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;情况1：@Configuration，推荐@Configurationpublic class MyConfig &#123;    @Bean    public B b() &#123;        System.out.println(&quot;new B()&quot;);        return new B();    &#125;    @Bean    public A a() &#123;        return new A(b()); &#x2F;&#x2F; ✅ 实际用的是 Spring 容器中的 B 实例（只 new 一次）    &#125;&#125;&#x2F;&#x2F;情况2：@Component，不推荐@Componentpublic class MyComponent &#123;    @Bean    public B b() &#123;        System.out.println(&quot;new B()&quot;);        return new B();    &#125;    @Bean    public A a() &#123;        return new A(b()); &#x2F;&#x2F; ❌ 实际调用方法，会再 new 一个 B()    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ComponentScan-“包名”"><a href="#ComponentScan-“包名”" class="headerlink" title="@ComponentScan(“包名”)"></a>@ComponentScan(“包名”)</h5><p>​    @ComponentScan用于指定自动扫描的包及其子包，其相当于xml文件中的组件扫描</p><p>样例：@ComponentScan(“包名”)的使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;SpringConfiguration@Configuration&#x2F;&#x2F;等价于&lt;context:component-scan base-package&#x3D;&quot;com.itheima&quot;&#x2F;&gt;@ComponentScan(&quot;com.itheima&quot;)public class SpringConfiguration&#123;&#x2F;&#x2F;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h5><p>​    @Bean用于将当前方法的返回值以当前方法名为id存储到Spring容器中，可以使用@Bean(“id”)来显示的指定存储的bean的唯一id</p><p>样例：@Bean的使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;SpringConfiguration@Configuration@ComponentScan(&quot;com.itheima&quot;)public class SpringConfiguration&#123;&#x2F;&#x2F;将当前方法的返回值以id为getDataSource存储在Spring容器中@Beanpublic DataSource getDataSource() throws PropertyVetoException&#123;&#x2F;&#x2F;这里与xml文件不同的是，xml是将ComboPooledDataSource的dataSource放入Spring容器，这里是执行后的返回值ComboPooledDataSource dataSource &#x3D; new ComboPooledDataSource();        dataSource.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;);        dataSource.setJdbcUrl(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;);        dataSource.setUser(&quot;root&quot;);        dataSource.setPassword(&quot;root&quot;);        return dataSource;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="PropertySource-“文件路径”"><a href="#PropertySource-“文件路径”" class="headerlink" title="@PropertySource(“文件路径”)"></a>@PropertySource(“文件路径”)</h5><p>​    @PropertySource用于加载外部的属性文件（例如 .properties文件）到Spring容器中</p><p>样例：@PropertySource(“文件路径”)的使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;SpringConfiguration@Configuration@ComponentScan(&quot;com.itheima&quot;)&#x2F;&#x2F;等价与：&lt;context:property-placeholder location&#x3D;&quot;classpath:jdbc.properties&quot;&#x2F;&gt;@PropertySource(&quot;classpath:jdbc.properties&quot;)public class SpringConfiguration&#123;&#x2F;&#x2F;使用@value即可读取.properties文件里的信息@Value(&quot;$&#123;jdbc.driver&#125;&quot;)    private String driver;        @Value(&quot;$&#123;jdbc.url&#125;&quot;)    private String url;        @Value(&quot;$&#123;jdbc.username&#125;&quot;)    private String username;        @Value(&quot;$&#123;jdbc.password&#125;&quot;)    private String password;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Import-“配置类的名字-class”"><a href="#Import-“配置类的名字-class”" class="headerlink" title="@Import(“配置类的名字.class”)"></a>@Import(“配置类的名字.class”)</h5><p>​    @Import用于将一个或多个外部的配置类或者资源（如 Bean 定义：bean定义会随着导入外部的配置类一起导入）导入到当前配置类中</p><p>样例：@Import(“配置类的名字.class”)的使用</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;SpringConfiguration@Configuration@ComponentScan(&quot;com.itheima&quot;)&#x2F;&#x2F;等价与：&lt;import resource&#x3D;&quot;applicationContext-dataSource.xml&quot;&#x2F;&gt;@Import(DataSourceConfiguration.class)&#x2F;&#x2F;多个导入：@Import(&#123;xxx.class,yyy.class,zzz.class&#125;)public class SpringConfiguration&#123;&#x2F;&#x2F;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-配置类来加载Spring容器对象"><a href="#6-配置类来加载Spring容器对象" class="headerlink" title="(6)配置类来加载Spring容器对象"></a>(6)配置类来加载Spring容器对象</h4><p>​    在使用applicationContext.xml文件时，是通过加载xml文件来获得Spring容器对象，而使用配置类后同样需要加载配置类</p><p>样例：配置类的加载</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;main.javapublic static void main(String[] args)&#123;&#x2F;&#x2F;获得Spring容器对象，之前用xml是：ApplicationContext app &#x3D; new ClassPathXmlApplicationContext(applicationContext.xml);ApplicationContext app &#x3D; new AnnotationConfigApplicationContext(SpringConfiguration.class);UserService u &#x3D; app.getBean(UserService.class);u.save();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring01-Bean与IoC</title>
      <link href="/2023/04/25/Spring01-Bean%E4%B8%8EIoC/"/>
      <url>/2023/04/25/Spring01-Bean%E4%B8%8EIoC/</url>
      
        <content type="html"><![CDATA[<h3 id="1-传统Javaweb开发的困惑与解决方案"><a href="#1-传统Javaweb开发的困惑与解决方案" class="headerlink" title="1. 传统Javaweb开发的困惑与解决方案"></a>1. 传统Javaweb开发的困惑与解决方案</h3><h5 id="问题1：传统javaweb的开发中对于数据的操作，往往都需要new对象来完成操作"><a href="#问题1：传统javaweb的开发中对于数据的操作，往往都需要new对象来完成操作" class="headerlink" title="问题1：传统javaweb的开发中对于数据的操作，往往都需要new对象来完成操作"></a>问题1：传统javaweb的开发中对于数据的操作，往往都需要new对象来完成操作</h5><p><a href="https://imgse.com/i/ppbxDFU"><img src="https://s1.ax1x.com/2023/04/10/ppbxDFU.png" alt="ppbxDFU.png"></a></p><p>​    解决思路：程序代码中不去new对象，第三方根据要求为程序提供需要的Bean对象</p><h5 id="问题2：事物功能、日志功能耦合在业务代码中"><a href="#问题2：事物功能、日志功能耦合在业务代码中" class="headerlink" title="问题2：事物功能、日志功能耦合在业务代码中"></a>问题2：事物功能、日志功能耦合在业务代码中</h5><p><a href="https://imgse.com/i/ppbxrYF"><img src="https://s1.ax1x.com/2023/04/10/ppbxrYF.png" alt="ppbxrYF.png"></a></p><p>​    解决思路：第三方提供Bean对象的**代理对象(BeanProxy)**，该对象是对Bean的增强，可以完成事物操作</p><h3 id="2-Spring程序开发步骤"><a href="#2-Spring程序开发步骤" class="headerlink" title="2. Spring程序开发步骤"></a>2. Spring程序开发步骤</h3><p>​    在jsp/servlet中，会用接口来引用接口实现的对象，来实现开发<br>​<br>​    对于Spring开发，会在xml配置文件中用id标识来绑定接口实现类全限定名，而后在service类通过Spring框架读取xml文件根据标识来获取Dao对象，如下图</p><p><a href="https://imgse.com/i/ppb9xOA"><img src="https://s1.ax1x.com/2023/04/09/ppb9xOA.png" alt="Spring开发图示"></a></p><h5 id="Spring开发步骤总结："><a href="#Spring开发步骤总结：" class="headerlink" title="Spring开发步骤总结："></a>Spring开发步骤总结：</h5><p>​    1.通过maven导入Spring开发的基本坐标<br>​    2.编写Dao接口和实现类<br>​    3.创建Spring核心配置文件，在main/resources/创建xml文件<br>​    4.在xml文件中配置UserDaoImpl<br>​    5.在service层使用Spring的API获得Bean实例(Dao)</p><h3 id="3-Spring开发的基本坐标"><a href="#3-Spring开发的基本坐标" class="headerlink" title="3. Spring开发的基本坐标"></a>3. Spring开发的基本坐标</h3><p>​    导入的基本坐标如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;            &lt;version&gt;5.0.5.RELEASE&lt;&#x2F;version&gt;        &lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Spring中的Bean"><a href="#4-Spring中的Bean" class="headerlink" title="4. Spring中的Bean"></a>4. Spring中的Bean</h3><p>​    可以把<strong>Bean</strong>看作是Spring框架中的“对象”或“组件”。简单来说，它就是在Spring容器中由Spring管理的一个类的实例。Spring框架会创建这个类的对象，并在适当的时候将它交给你使用</p><h3 id="5-Spring配置文件xml详解"><a href="#5-Spring配置文件xml详解" class="headerlink" title="5. Spring配置文件xml详解"></a>5. Spring配置文件xml详解</h3><p>​    <code>在Spring的XML配置中，XML文件实际上是代替了手动使用new关键字来创建对象</code></p><h5 id="模板如下："><a href="#模板如下：" class="headerlink" title="模板如下："></a>模板如下：</h5><p>​    需要使用Spring的xml进行生成xml文件才能获得模板</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;        &lt;bean id&#x3D;&quot;唯一标识&quot; class&#x3D;&quot;类的全限定名&quot;&gt;&lt;&#x2F;bean&gt;    &lt;&#x2F;beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-Bean标签的最简配置"><a href="#1-Bean标签的最简配置" class="headerlink" title="(1)Bean标签的最简配置"></a>(1)Bean标签的最简配置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"唯一标识"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"类的全限定名"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span> <span class="token comment">//class是bean的基本属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功</p><h4 id="2-Bean标签的范围配置"><a href="#2-Bean标签的范围配置" class="headerlink" title="(2)Bean标签的范围配置"></a>(2)Bean标签的范围配置</h4><p>​    属性<code>scope</code>：指对象的作用范围，取值如下：</p><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>singleton</strong></td><td align="center"><strong>默认值，单例</strong></td></tr><tr><td align="center"><strong>prototype</strong></td><td align="center"><strong>多例</strong></td></tr><tr><td align="center">request</td><td align="center">WEB项目中，Spring创建一个Bean的对象，将对象存入到request域中</td></tr><tr><td align="center">session</td><td align="center">WEB项目中，Spring创建一个Bean的对象，将对象存入到session域中</td></tr><tr><td align="center">global session</td><td align="center">WEB项目中，应用在Portlet环境，如果没有Portlet环境那么global session相当于session</td></tr></tbody></table><h5 id="单例和多例的区别："><a href="#单例和多例的区别：" class="headerlink" title="单例和多例的区别："></a>单例和多例的区别：</h5><p>​    单例是不管getBean(“id”)获取几次，都是同一地址的对象，多例获取几次，就创造几个对象，详细如下图所示</p><p><a href="https://imgse.com/i/ppb8rIf"><img src="https://s1.ax1x.com/2023/04/09/ppb8rIf.png" alt="单例和多例的区别"></a> </p><h4 id="3-与Bean生命周期有关的方法"><a href="#3-与Bean生命周期有关的方法" class="headerlink" title="(3)与Bean生命周期有关的方法"></a>(3)与Bean生命周期有关的方法</h4><p>​    属性<code>init-method</code>：指定类的初始化时执行的方法<br>​    属性<code>destroy-method</code>：指定类的销毁时执行的方法<br>​<br>​    这些要指定的方法需要在接口实现类中编写，在使用bean标签时指定</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"唯一标识"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"类的全限定名"</span> init<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"bean初始化要执行的方法名"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"bean销毁时要执行的方法名"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    bean的创建是在main函数中用Spring的API创建</p><h4 id="4-Bean的实例化-如何创建-三种方法"><a href="#4-Bean的实例化-如何创建-三种方法" class="headerlink" title="(4)Bean的实例化(如何创建)三种方法"></a>(4)Bean的实例化(如何创建)三种方法</h4><h5 id="通过无参构造方法实例化"><a href="#通过无参构造方法实例化" class="headerlink" title="通过无参构造方法实例化"></a>通过无参构造方法实例化</h5><p>​    Spring默认使用无参构造器来实例化Bean，Spring容器会自动通过<code>new</code>操作符创建一个Bean对象，然后填充它的属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//MyBean.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyBean constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//applicationContext.xml</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myBean"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.example.MyBean"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过-工厂-静态方法实例化：需要使用属性factory-method"><a href="#通过-工厂-静态方法实例化：需要使用属性factory-method" class="headerlink" title="通过(工厂)静态方法实例化：需要使用属性factory-method"></a>通过(工厂)静态方法实例化：需要使用属性factory-method</h5><p>​    工厂方法是在类中定义的一个静态方法或实例方法，用于返回该类的Bean对象</p><p>​    <code>factory-method</code>属性用于指向<code>静态工厂方法</code>或指向<code>实例方法</code>来创建Bean，该方法将由Spring容器调用来实例化Bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//MyBean.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyBean constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MyBean</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//applicationContext.xml</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myBean"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.example.MyBean"</span> factory<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"createInstance"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过工厂类实例化：需要使用属性factory-bean、factory-method"><a href="#通过工厂类实例化：需要使用属性factory-bean、factory-method" class="headerlink" title="通过工厂类实例化：需要使用属性factory-bean、factory-method"></a>通过工厂类实例化：需要使用属性factory-bean、factory-method</h5><p>​    <code>factory-bean</code>：通过一个工厂Bean来实例化Bean，工厂Bean中的方法负责创建Bean实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//MyBean.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyBean constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//MyBeanFactory.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyBean</span> <span class="token function">createMyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//applicationContext.xml</span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myBeanFactory"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.example.MyBeanFactory"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"myBean"</span> factory<span class="token operator">-</span>bean<span class="token operator">=</span><span class="token string">"myBeanFactory"</span> factory<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"createMyBean"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    当前重点还是深入了解无参构造方法实例化</p><h3 id="6-Bean的依赖注入-DI-：用于实现控制反转（IoC）"><a href="#6-Bean的依赖注入-DI-：用于实现控制反转（IoC）" class="headerlink" title="6. Bean的依赖注入(DI)：用于实现控制反转（IoC）"></a>6. Bean的依赖注入(DI)：用于实现控制反转（IoC）</h3><p>​    依赖注入是指在对象的创建和管理过程中，Spring容器会自动将需要的依赖（其他Bean）注入到当前Bean中，而不需要手动创建这些依赖对象，依赖主要是当前对象需要调用依赖对象提供的方法</p><h4 id="1-非依赖注入：需要的依赖从spring容器外部获取"><a href="#1-非依赖注入：需要的依赖从spring容器外部获取" class="headerlink" title="(1)非依赖注入：需要的依赖从spring容器外部获取"></a>(1)非依赖注入：需要的依赖从spring容器外部获取</h4><p>​    该方式也使用了spring容器，但与传统只是把new对象变为了对象由spring管理，代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;Dao层public class UserDaoImpl implements UserDao&#123;public void save()&#123;System.out.println(&quot;save running...&quot;)&#125;&#125;&#x2F;&#x2F;service层public class UserServiceImpl implements UserService&#123;public void save()&#123;ApplicationContext app &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#x2F;&#x2F;外部获取spring管理的容器UserDao userDao &#x3D; (UserDao) app.getBean(&quot;userDao&quot;);userDao.save();&#125;&#125;&#x2F;&#x2F;controller层public class UserController&#123;public static void main(String[] args)&#123;ApplicationContext app &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);UserService userService &#x3D; (UserService)app.getBean(&quot;userService&quot;);userService.save();&#125;&#125;&#x2F;&#x2F;applicationContext.xml&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.itheima.dao.impl.UserDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;&lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.itheima.service.impl.UserServiceImpl&quot;&gt;&lt;&#x2F;bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-依赖注入：需要的依赖从spring容器内部注入-两种注入方法"><a href="#2-依赖注入：需要的依赖从spring容器内部注入-两种注入方法" class="headerlink" title="(2)依赖注入：需要的依赖从spring容器内部注入(两种注入方法)"></a>(2)依赖注入：需要的依赖从spring容器内部注入(两种注入方法)</h4><p>​    依赖注入是Spring框架核心IoC的具体实现</p><h5 id="第一种：使用set方法注入（最常用）"><a href="#第一种：使用set方法注入（最常用）" class="headerlink" title="第一种：使用set方法注入（最常用）"></a>第一种：使用set方法注入（最常用）</h5><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>​    1.创建DAO或其他Bean，需要被注入到Service层</p><p>​    2.在Service层提供一个set方法，用于接收外部Bean的注入</p><p>​    3.在Controller层调用Service层的方法</p><h5 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h5><p>​    与非依赖注入的代码相比改的都是service层和xml文件</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;Dao层public class UserDaoImpl implements UserDao&#123;public void save()&#123;System.out.println(&quot;save running...&quot;)&#125;&#125;&#x2F;&#x2F;service层public class UserServiceImpl implements UserService&#123;private UserDao userDao;&#x2F;&#x2F;该方法名用于注入时使用public void setUserDao(UserDao userDao)&#123;this.userDao &#x3D; userDao;&#125;public void save()&#123;userDao.save();&#125;&#125;&#x2F;&#x2F;controller层public class UserController&#123;public static void main(String[] args)&#123;ApplicationContext app &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);UserService userService &#x3D; (UserService)app.getBean(&quot;userService&quot;);userService.save();&#125;&#125;&#x2F;&#x2F;applicationContext.xml&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.itheima.dao.impl.UserDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;&lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.itheima.service.impl.UserServiceImpl&quot;&gt;&#x2F;**name的值是上面setUserDao去掉set且第一个字母变小写ref用于引用对象，这里引用的时userDao的唯一标识id*&#x2F;&lt;property name&#x3D;&quot;userDao&quot; ref&#x3D;&quot;userDao&quot;&gt;&lt;&#x2F;property&gt;&lt;&#x2F;bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="第二种：使用有参构造方法注入："><a href="#第二种：使用有参构造方法注入：" class="headerlink" title="第二种：使用有参构造方法注入："></a>第二种：使用有参构造方法注入：</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;Dao层public class UserDaoImpl implements UserDao&#123;public void save()&#123;System.out.println(&quot;save running...&quot;)&#125;&#125;&#x2F;&#x2F;service层public class UserServiceImpl implements UserService&#123;private UserDao userDao;&#x2F;&#x2F;构造方法实现public UserServiceImpl(UserDao userDao)&#123;this.userDao &#x3D; userDao;&#125;&#x2F;&#x2F;补充无参构造public UserServiceImpl()&#123;&#125;public void save()&#123;userDao.save();&#125;&#125;&#x2F;&#x2F;controller层public class UserController&#123;public static void main(String[] args)&#123;ApplicationContext app &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);UserService userService &#x3D; (UserService)app.getBean(&quot;userService&quot;);userService.save();&#125;&#125;&#x2F;&#x2F;applicationContext.xml&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.itheima.dao.impl.UserDaoImpl&quot;&gt;&lt;&#x2F;bean&gt;&lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.itheima.service.impl.UserServiceImpl&quot;&gt;&#x2F;**name的值是上面UserServiceImpl构造方法的形参名ref用于引用对象，这里引用的时userDao的唯一标识id*&#x2F;&lt;constructor-arg name&#x3D;&quot;userDao&quot; ref&#x3D;&quot;userDao&quot;&gt;&lt;&#x2F;constructor-arg&gt;&lt;&#x2F;bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-Bean依赖注入的数据类型"><a href="#7-Bean依赖注入的数据类型" class="headerlink" title="7. Bean依赖注入的数据类型"></a>7. Bean依赖注入的数据类型</h3><p>​    在spring中，除对象的引用可以注入，普通数据类型、集合都可以在容器中进行注入(用set或者构造方法)</p><h4 id="1-普通数据类型的注入（set方式）"><a href="#1-普通数据类型的注入（set方式）" class="headerlink" title="(1)普通数据类型的注入（set方式）"></a>(1)普通数据类型的注入（set方式）</h4><h5 id="样例：String、int的注入"><a href="#样例：String、int的注入" class="headerlink" title="样例：String、int的注入"></a>样例：String、int的注入</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;Dao层public class UserDaoImpl implements UserDao&#123;private String username;private int age;public void setUsername(String username)&#123;this.username &#x3D; username;&#125;public void setAge(int age)&#123;this.age &#x3D; age;&#125;public void printUser()&#123;System.out.println(username);System.out.println(age);&#125;&#125;&#x2F;&#x2F;applicationContext.xml&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.itheima.dao.impl.UserDaoImpl&quot;&gt;&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;张三&quot;&#x2F;&gt;&lt;property name&#x3D;&quot;age&quot; value&#x3D;&quot;18&quot;&#x2F;&gt;&lt;&#x2F;bean&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-集合的注入（set方式）"><a href="#2-集合的注入（set方式）" class="headerlink" title="(2)集合的注入（set方式）"></a>(2)集合的注入（set方式）</h4><h5 id="样例：List、map、properties的注入"><a href="#样例：List、map、properties的注入" class="headerlink" title="样例：List、map、properties的注入"></a>样例：List、map、properties的注入</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;Dao层public class UserDaoImpl implements UserDao&#123;private List&lt;String&gt; strList;private Map&lt;String,User&gt; userMap;private Properties properties;public void setStrList(List&lt;String&gt; strList)&#123;this.strList &#x3D; strList;&#125;public void setUserMap(Map&lt;String,User&gt; userMap)&#123;this.userMap &#x3D; userMap;&#125;public void setProperties(Properties properties)&#123;this.properties &#x3D; properties;&#125;public void printAll()&#123;System.out.println(strList);System.out.println(userMap);System.out.println(properties);&#125;&#125;&#x2F;&#x2F;applicationContext.xml&lt;bean id&#x3D;&quot;userDao&quot; class&#x3D;&quot;com.itheima.dao.impl.UserDaoImpl&quot;&gt;&lt;property name&#x3D;&quot;strList&quot;&gt;&lt;List&gt;&lt;value&gt;hello&lt;&#x2F;value&gt;&lt;value&gt;world&lt;&#x2F;value&gt;&lt;&#x2F;List&gt;&lt;&#x2F;property&gt;&lt;property name&#x3D;&quot;userMap&quot;&gt;&lt;map&gt;&#x2F;&#x2F;key随便指定，ref注入的对象一定要在容器中&lt;entry key&#x3D;&quot;u1&quot; value-ref&#x3D;&quot;user1&quot;&gt;&lt;&#x2F;entry&gt;&lt;&#x2F;map&gt;&lt;&#x2F;property&gt;&lt;property name&#x3D;&quot;properties&quot;&gt;&lt;props&gt;&#x2F;&#x2F;key随便指定&lt;prop key&#x3D;&quot;p1&quot;&gt;ppp1&lt;&#x2F;prop&gt;&lt;prop key&#x3D;&quot;p2&quot;&gt;ppp2&lt;&#x2F;prop&gt;&lt;&#x2F;props&gt;&lt;&#x2F;property&gt;&lt;&#x2F;bean&gt;&#x2F;&#x2F;用于演示ref引用使用&lt;bean id&#x3D;&quot;user1&quot; class&#x3D;&quot;com.itheima.domain.User&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-Spring中xml文件的分模块开发"><a href="#8-Spring中xml文件的分模块开发" class="headerlink" title="8. Spring中xml文件的分模块开发"></a>8. Spring中xml文件的分模块开发</h3><p>​    项目中的不同xml模块需要拆分，此时要在主配置文件引入这些模块，<code>需要使用import标签进行加载</code></p><h5 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token keyword">import</span> <span class="token namespace">resource</span><span class="token operator">=</span><span class="token string">"applicationContext-xxx.xml"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    resource属性值为要引入的Spring配置文件的位置</p><p>​    当主文件加载时，分文件也会被加载</p><h5 id="样例图示："><a href="#样例图示：" class="headerlink" title="样例图示："></a>样例图示：</h5><p><a href="https://imgse.com/i/ppLLaXq"><img src="https://s1.ax1x.com/2023/04/11/ppLLaXq.png" alt="xml文件的分模块开发"></a></p><h3 id="9-Spring相关API"><a href="#9-Spring相关API" class="headerlink" title="9. Spring相关API"></a>9. Spring相关API</h3><h4 id="1-ApplicationContext接口与它的实现类：用于获得Spring容器对象"><a href="#1-ApplicationContext接口与它的实现类：用于获得Spring容器对象" class="headerlink" title="(1)ApplicationContext接口与它的实现类：用于获得Spring容器对象"></a>(1)ApplicationContext接口与它的实现类：用于获得Spring容器对象</h4><p>​    applicationContext：接口类型，可以通过其来接Spring容器对象</p><p>​    </p><h5 id="ApplicationContext的实现类：获取Spring容器对象的三种方式"><a href="#ApplicationContext的实现类：获取Spring容器对象的三种方式" class="headerlink" title="ApplicationContext的实现类：获取Spring容器对象的三种方式"></a>ApplicationContext的实现类：获取Spring容器对象的三种方式</h5><p>​    1.ClassPathXmlApplicationContext(“参数为resource文件夹的xml文件路径”)：它是从类的根路径下加载配置文件（常用）</p><p>​    2.FileSystemXmlApplicationContext(“参数为xml文件在电脑中的磁盘路径”)：它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置</p><p>​    3.AnnotationConfigApplicationContext：当使用注解配置容器对象时，需要使用此类来创建spring容器，它用来读取注解</p><h4 id="2-getBean-方法"><a href="#2-getBean-方法" class="headerlink" title="(2)getBean()方法"></a>(2)getBean()方法</h4><p>​    getBean()有两个常用的API，一个是按id在spring容器中找，还要一个是按类型在spring容器中找</p><p>​    官方文档见下图：</p><p><a href="https://imgse.com/i/ppLjplj"><img src="https://s1.ax1x.com/2023/04/11/ppLjplj.png" alt="getBean()的API"></a></p><h5 id="第一个API："><a href="#第一个API：" class="headerlink" title="第一个API："></a>第一个API：</h5><blockquote><p>app.getBean(“id”)</p></blockquote><p>​    传递的参数是xml文件中设置的id值，其允许spring容器中出现相同类型的bean因为可以用id进行区分</p><h5 id="第二个API"><a href="#第二个API" class="headerlink" title="第二个API"></a>第二个API</h5><blockquote><p>app.getBean(Class)</p></blockquote><p>​    传递的参数是字节码对象类型(xxxx.class)，其只允许spring容器中有一种类型的bean</p><h5 id="两种相同效果的代码编写图示："><a href="#两种相同效果的代码编写图示：" class="headerlink" title="两种相同效果的代码编写图示："></a>两种相同效果的代码编写图示：</h5><p><a href="https://imgse.com/i/ppLjXuR"><img src="https://s1.ax1x.com/2023/04/11/ppLjXuR.png" alt="两种写法相同实现的比对"></a></p><p>​    这个UserService是接口类，等于是获得接口类的反射</p>]]></content>
      
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构05</title>
      <link href="/2022/12/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8405/"/>
      <url>/2022/12/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8405/</url>
      
        <content type="html"><![CDATA[<h2 id="队列-queue"><a href="#队列-queue" class="headerlink" title="队列(queue)"></a>队列(queue)</h2><h4 id="1-队列的概念"><a href="#1-队列的概念" class="headerlink" title="1. 队列的概念"></a>1. 队列的概念</h4><p>​    一种可以实现“先进先出”的存储结构，不能在中间插入，只能在一端入，另一端出，入的那端不能出，出的那端不能入</p><h4 id="2-队列的分类"><a href="#2-队列的分类" class="headerlink" title="2.队列的分类"></a>2.队列的分类</h4><ul><li><p>链式队列    –用链表实现</p></li><li><p>数组队列    –用动态数组实现、</p><p>​    使用数组来实现队列通常都必须是循环队列</p></li></ul><p>​    规定：在队首(front)删除元素，在队尾(rear)加入元素，定义两个变量：front指向队首的第一个元素，rear指向队尾元素的下一个元素</p><p>​    图示如下：</p><p><a href="https://imgse.com/i/z8QyZR"><img src="https://s1.ax1x.com/2022/11/23/z8QyZR.png" alt="z8QyZR.png"></a></p><p>​    注意：错开设置是为了方便对队列进行操作，就像链表pHead指向第一个元素的前一个不存储数据的头结点，pTail指向最后一个结点一样</p><h4 id="3-循环队列"><a href="#3-循环队列" class="headerlink" title="3. 循环队列"></a>3. 循环队列</h4><p><strong>(1). 使用数组来实现队列为什么必须为循环队列</strong></p><p>​     当插入元素或者删除元素时，front和rear都是向后移动，此时前面的数组空间都无法使用即被浪费了，所以需要使用循环队列来减少空间浪费</p><p>​    当front或rear指向最后一个元素，且还要再往后移时，此时需要将其指向第一个元素，这样的设计就是一个循环队列</p><p><strong>(2).循环队列需要几个参数来确定，以及参数的含义</strong></p><p>​    需要两个参数来确定：front、rear</p><p>​    这两个参数不同场合有不同的含义</p><ol><li><p>队列初始化</p><p>front和rear的值都是0</p></li><li><p>队列非空</p><p>front代表队列的第一个元素</p><p>rear代表队列的最后一个有效元素的下一个元素</p></li><li><p>队列空</p><p>front和rear的值相等，但不一定就是为0</p></li></ol><p><strong>(3).循环队列入队的伪算法</strong></p><ol><li><p>将值存入rear所指向的位置</p></li><li><p>rear = (rear + 1)%数组的长度</p></li></ol><p><strong>(4).循环队列出队的伪算法</strong></p><p>​    front = (front + 1)%数组长度</p><p><strong>(5).循环队列判断队列为空的伪算法</strong></p><p>​    如果front与rear的值相等，则该队列就一定为空</p><p><strong>(6).循环队列判断队列为满的伪算法</strong></p><p>​    <strong>两种方法：</strong></p><p>​    1. 设定一个len变量来记录数组中有效数据的长度，当达到数组长度时，则拒绝继续添加</p><p>​    <strong>2. 设定：数组中有n个元素，若已经放了n-1个元素，那么数组就已经满了(一般使用第二种方法)</strong></p><p>​    <strong>第二种方法的判断条件</strong></p><p>​    如果<code>front == (rear + 1)%数组长度</code>，则队列已满</p><h4 id="4-算法"><a href="#4-算法" class="headerlink" title="4. 算法"></a>4. 算法</h4><ol><li><p>队列的定义以及初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//结构体定义队列</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Queue</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pBase<span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>QUEUE<span class="token punctuation">,</span><span class="token operator">*</span>PQUEUE<span class="token punctuation">;</span><span class="token comment">//队列的初始化</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//函数声明</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//函数体</span>    pQ<span class="token operator">-></span>pBase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pQ<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pQ<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>队满的判断，以及队列的入队操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//判断队列是否为满</span>bool <span class="token function">full_queue</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">full_queue</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pQ<span class="token operator">-></span>front <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pQ<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//入队操作</span>bool <span class="token function">en_queue</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">en_queue</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">full_queue</span><span class="token punctuation">(</span>pQ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pQ<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pQ<span class="token operator">-></span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    pQ<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>pQ<span class="token operator">-></span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>队列的遍历操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">traverse_queue</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traverse_queue</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> pQ<span class="token operator">-></span>front<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>pQ<span class="token operator">-></span>rear<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>pQ<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>队列判断为空以及出队操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">empty_queue</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">empty_queue</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pQ<span class="token operator">-></span>front<span class="token operator">==</span>pQ<span class="token operator">-></span>rear<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">out_queue</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>bool <span class="token function">out_queue</span><span class="token punctuation">(</span>PQUEUE pQ<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty_queue</span><span class="token punctuation">(</span>pQ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>val <span class="token operator">=</span> pQ<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pQ<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    pQ<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token punctuation">(</span>pQ<span class="token operator">-></span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="5"><li><p>mian函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QUEUE Q<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">en_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"true\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">;</span>    <span class="token function">en_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">en_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">en_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">en_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">en_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">en_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">out_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nok,the num is %d"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="5-队列的具体应用"><a href="#5-队列的具体应用" class="headerlink" title="5. 队列的具体应用"></a>5. 队列的具体应用</h4><p>​    所有和时间有关的操作都有队列的影子</p><p>​    比如：像操作系统里有等待队列，线程有阻塞队列</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL复习03</title>
      <link href="/2022/11/21/MySQL%E5%A4%8D%E4%B9%A003/"/>
      <url>/2022/11/21/MySQL%E5%A4%8D%E4%B9%A003/</url>
      
        <content type="html"><![CDATA[<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h4 id="1-多表关系"><a href="#1-多表关系" class="headerlink" title="1. 多表关系"></a>1. 多表关系</h4><p>​    在数据库表结构设计时，一般各个表结构之间存在着各种联系，基本上分为三种：</p><ul><li>一对多(多对一)</li><li>多对多</li><li>一对一</li></ul><p>​    <strong>一对多(多对一)</strong></p><p>​    案例：部门与员工的关系</p><p>​    关系：一个部门对应多个员工，一个员工对应一个部门</p><p>​    实现：在多的一方建立外键。指向一的一方的主键</p><p><a href="https://imgse.com/i/zVAki4"><img src="https://s1.ax1x.com/2022/11/15/zVAki4.png" alt="zVAki4.png"></a></p><p>​    <strong>多对多</strong></p><p>​    案例：学生与课程的关系</p><p>​    关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</p><p>​    实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><p><a href="https://imgse.com/i/zVAEW9"><img src="https://s1.ax1x.com/2022/11/15/zVAEW9.png" alt="zVAEW9.png"></a></p><p>​    <strong>一对一</strong></p><p>​    案例：用户与用户详情的关系</p><p>​    关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详细字段放在另一张表中，以提升操作效率</p><p>​    实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p><p><a href="https://imgse.com/i/zVEvD0"><img src="https://s1.ax1x.com/2022/11/15/zVEvD0.png" alt="zVEvD0.png"></a></p><h4 id="2-多表查询概述"><a href="#2-多表查询概述" class="headerlink" title="2. 多表查询概述"></a>2. 多表查询概述</h4><p>​    指从多张表中查询数据</p><pre><code> 笛卡尔积</code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp<span class="token punctuation">,</span>dept<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    笛卡尔积：两个集合，A集合和B集合的所有组合情况(在多表查询时，需要消除无效的笛卡尔积)</p><p>​    通过where语句可以消除无效的笛卡尔积，但不满足where的数据也会被消除掉</p><p>​    多表查询的分类</p><ul><li>连接查询<ul><li>内连接：相当于查询A、B交集部分数据</li><li>外连接：<ul><li>左外连接：查询左表所有数据，以及两张表交集部分数据</li><li>右外连接：查询右表所有数据，以及两张表交集部分数据</li></ul></li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li></ul></li><li>子查询</li></ul><h4 id="3-内连接"><a href="#3-内连接" class="headerlink" title="3. 内连接"></a>3. 内连接</h4><p>​    内连接查询的是两张表的交集部分</p><p>​    内连接查询语法</p><ul><li><p>隐式内连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span><span class="token punctuation">,</span>表<span class="token number">2</span> <span class="token keyword">WHERE</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示内连接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">INNER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 连接条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> 筛选条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​    范例：内连接的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 表结构：emp,dept</span><span class="token comment">-- 连接条件：emp.dept_id = dept.id</span><span class="token comment">-- 查询每一个员工的姓名，以及关联的部门的名称(隐式内连接实现)</span><span class="token keyword">SELECT</span> emp<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dept<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp<span class="token punctuation">,</span>dept <span class="token keyword">WHERE</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept_id<span class="token punctuation">;</span><span class="token comment">//如果表名太长可以起别名，但起别名之后WHERE后面的使用字段必须要用别名来引用，不可以用表原名引用</span><span class="token comment">-- 查询每一个员工的姓名。及关联的部门的名称(显示内连接实现)</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp e <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">//INNER关键字是可以省略的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：隐式和显式只是语法不同，查询结果是相同的</p><h4 id="4-外连接"><a href="#4-外连接" class="headerlink" title="4. 外连接"></a>4. 外连接</h4><p>​    外连接查询语法</p><ul><li><p>左外连接：查询左表(表1)所有数据，以及两张表交集部分数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表<span class="token number">1</span> <span class="token keyword">LEFT</span> <span class="token punctuation">[</span><span class="token keyword">OUTER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>右外连接：查询右表(表2)所有数据，以及两张表交集部分数据</p><pre class="line-numbers language-none"><code class="language-none">SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件...;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​    范例：外连接的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 表结构：emp,dept</span><span class="token comment">-- 连接条件：emp.dept_id = dept.id</span><span class="token comment">-- 1.查询emp表的所有数据，和对应的部门信息(左外连接)</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp e <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> dept d <span class="token keyword">ON</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">//OUTER关键字可以省略</span><span class="token comment">-- 2.查询dept表的所有数据，和对应的员工信息(右外连接)</span><span class="token keyword">SELECT</span> d<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp e <span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> dept d <span class="token keyword">ON</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：一般开发中左外连接用的多，因为右外连接可以转化为左外连接</p><h4 id="4-自连接"><a href="#4-自连接" class="headerlink" title="4. 自连接"></a>4. 自连接</h4><p>​    自连接查询语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表A 别名A <span class="token keyword">JOIN</span> 表A 别名B <span class="token keyword">ON</span> 条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    自连接可以是内连接也可以是外连接</p><p>​    范例：自连接的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 表结构：emp</span><span class="token comment">-- 1.查询员工及其所属领导的名字</span><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>name<span class="token punctuation">,</span>b<span class="token punctuation">.</span>name <span class="token keyword">FROM</span> emp a<span class="token punctuation">,</span> emp b <span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>managerid <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 2.查询所有员工及其领导的名字，如果员工没有领导，也需要查询出来</span><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>name <span class="token string">'员工'</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>name <span class="token string">'领导'</span> <span class="token keyword">FROM</span> emp a <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> emp b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>managerid <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-联合查询"><a href="#5-联合查询" class="headerlink" title="5. 联合查询"></a>5. 联合查询</h4><p>​    联合查询是将多次查询的结果合并起来，形成一个新的查询结果集</p><p>​    联合查询的语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表A<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span><span class="token punctuation">]</span><span class="token keyword">SELECT</span> 字段列表 <span class="token keyword">FROM</span> 表B<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致</p><p>​    范例：联合查询的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1.将薪资低于5000的员工和年龄大于50岁的员工全部查询出来</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> salary <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> age <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    联合查询将这两次查询的结果合并在一起显示</p><p>​    <strong>注意：<code>UNION ALL</code>会将查到的全部数据直接合并在一起，<code>UNION</code>会对合并之后的数据去重</strong></p><h4 id="6-子查询概念"><a href="#6-子查询概念" class="headerlink" title="6. 子查询概念"></a>6. 子查询概念</h4><p>​    SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询</p><p>​    子查询的语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">WHERE</span> <span class="token keyword">column</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token keyword">column</span> <span class="token keyword">FROM</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    注意：子查询外部的语句可以是INSERT、UPDATE、DELETE、SELECT的任意一个</p><p>​    根据子查询结果的不同，将子查询分类为：</p><ul><li>标量子查询(子查询结果为单个值)</li><li>列子查询(子查询结果为一列)</li><li>行子查询(子查询结果为一行)</li><li>表子查询(子查询结果为多行多列)</li></ul><p>​    根据子查询的位置，将子查询分类为：</p><ul><li>WHERE之后</li><li>FROM之后</li><li>SELECT之后</li></ul><h4 id="7-标量子查询"><a href="#7-标量子查询" class="headerlink" title="7. 标量子查询"></a>7. 标量子查询</h4><p>​    子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式，这种子查询称为标量子查询</p><p>​    常见的操作符：<code>=</code>、<code>&lt;&gt;</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code></p><p>​    范例：标量子查询的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1.查询“销售部”的所有员工信息</span><span class="token comment">-- a.查询“销售部”部门ID</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'销售部'</span><span class="token punctuation">;</span><span class="token comment">-- b.根据销售部部门ID，查询员工信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">--通过子查询将a与b写为一条语句</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'销售部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-列子查询"><a href="#8-列子查询" class="headerlink" title="8. 列子查询"></a>8. 列子查询</h4><p>​    子查询返回的结果是一列(即多行)，这种子查询称为列子查询</p><p>​    常用操作符：IN、NOT IN、ANY、SOME、ALL</p><table><thead><tr><th align="center">操作符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IN</td><td align="center">在指定的集合范围之内，多选一</td></tr><tr><td align="center">NOT IN</td><td align="center">不在指定的集合范围之内</td></tr><tr><td align="center">ANY</td><td align="center">子查询返回列表中，有任意一个满足即可</td></tr><tr><td align="center">SOME</td><td align="center">与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td align="center">ALL</td><td align="center">子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>​    范例：列子查询的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1.查询“销售部”和“市场部”的所有员工信息</span><span class="token comment">-- a.查询“销售部”和“市场部”的部门ID</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'销售部'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'市场部'</span><span class="token punctuation">;</span><span class="token comment">-- b.根据部门ID查询员工信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 将a,b写为一条语句</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'销售部'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'市场部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 2.查询比财务部所有人工资都高的员工信息</span><span class="token comment">-- a.查询财务部所有人员的工资</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> name <span class="token operator">=</span><span class="token string">'财务部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- b.比财务部所有人工资都高的员工信息,与a结合</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> salary <span class="token operator">></span> <span class="token keyword">ALL</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> name <span class="token operator">=</span><span class="token string">'财务部'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 3.查询比研发部任意一个人工资高的员工信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> salary <span class="token operator">></span> <span class="token keyword">ANY</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> dept <span class="token keyword">WHERE</span> name <span class="token operator">=</span><span class="token string">'研发部'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-行子查询"><a href="#9-行子查询" class="headerlink" title="9. 行子查询"></a>9. 行子查询</h4><p>​    子查询返回的结果是一行(即多列)，这种子查询称为行子查询</p><p>​    常用的操作符：=、&lt;&gt;、IN、NOT IN</p><p>​    范例：行子查询的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1.查询与“张三”的薪资及直属领导相同的员工信息</span><span class="token comment">-- a.张无忌的薪资及直属领导</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span>managerid <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'张无忌'</span><span class="token punctuation">;</span><span class="token comment">-- b.查询与“张无忌”的薪资及直属领导相同的员工信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>salary<span class="token punctuation">,</span>managerid<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 将a,b写为一条语句</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>salary<span class="token punctuation">,</span>managerid<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span>managerid <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'张无忌'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-表子查询"><a href="#10-表子查询" class="headerlink" title="10. 表子查询"></a>10. 表子查询</h4><p>​    子查询返回的结果是多行多列，这种子查询称为表子查询，一般放在FROM之后，把查询结果作为一张临时表在和其他表联合查询，也会放在WHERE后面使用IN来完成查找</p><p>​    常用操作符：IN</p><p>​    范例：表子查询的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1.查询与“张三”，“李四”的职位和薪资相同的员工信息</span><span class="token comment">-- a.查询“张三”，“李四”的职位和薪资</span><span class="token keyword">SELECT</span> job<span class="token punctuation">,</span>salary <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'张三'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment">-- b.查询与“张三”，“李四”的职位和薪资相同的员工信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> <span class="token punctuation">(</span>job<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> job<span class="token punctuation">,</span>salary <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'张三'</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 2.查询入职日期是“2006-01-01”之后的员工信息，及其部门信息</span><span class="token comment">-- a.入职日期是“2006-01-01”之后的员工信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> entrydate<span class="token operator">></span><span class="token string">'2006-01-01'</span><span class="token punctuation">;</span><span class="token comment">-- b.查询这部分员工对应的部门信息，因为如果部门为空也要查询出来，所以要用到左外连接</span><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> emp <span class="token keyword">WHERE</span> entrydate<span class="token operator">></span><span class="token string">'2006-01-01'</span><span class="token punctuation">)</span> e <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> dept d <span class="token keyword">ON</span> e<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>d<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL复习02</title>
      <link href="/2022/11/21/MySQL%E5%A4%8D%E4%B9%A002/"/>
      <url>/2022/11/21/MySQL%E5%A4%8D%E4%B9%A002/</url>
      
        <content type="html"><![CDATA[<h2 id="函数与约束"><a href="#函数与约束" class="headerlink" title="函数与约束"></a>函数与约束</h2><h4 id="1-字符串函数"><a href="#1-字符串函数" class="headerlink" title="1. 字符串函数"></a>1. 字符串函数</h4><p>​    MySQL中内置了很多字符串函数，常见的如下表：</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">concat(S1,S2,…,Sn)</td><td align="center">字符串拼接，将(S1,S2,…,Sn)拼接为一个字符串</td></tr><tr><td align="center">lower(str)</td><td align="center">将字符串str全部转为小写</td></tr><tr><td align="center">upper(str)</td><td align="center">将字符串str全部转为大写</td></tr><tr><td align="center">lpad(str,n,pad)</td><td align="center">左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td align="center">rpad(str,n,pad)</td><td align="center">右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td align="center">trim(str)</td><td align="center">去掉字符串头部和尾部空格</td></tr><tr><td align="center">substring(str,start,len)</td><td align="center">返回从字符串str从start位置起的len长度的字符串，<strong>索引值是从1开始</strong></td></tr></tbody></table><p>​    <strong>注意：str可以传类型是字符串的列名</strong></p><p>​    范例：字符串函数的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- concat</span><span class="token keyword">SELECT</span> concat<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--lower</span><span class="token keyword">SELECT</span> lower<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--upper</span><span class="token keyword">SELECT</span> upper<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--lpad</span><span class="token keyword">SELECT</span> lpad<span class="token punctuation">(</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--rpad</span><span class="token keyword">SELECT</span> rpad<span class="token punctuation">(</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--trim</span><span class="token keyword">SELECT</span> trim<span class="token punctuation">(</span><span class="token string">' hello world '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--substring</span><span class="token keyword">SELECT</span> substring<span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//索引值从1开始</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-数值函数"><a href="#2-数值函数" class="headerlink" title="2. 数值函数"></a>2. 数值函数</h4><p>​    常见的数值函数如下表：</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">ceil(x)</td><td align="center">向上取整</td></tr><tr><td align="center">floor(x)</td><td align="center">向下取整</td></tr><tr><td align="center">mod(x,y)</td><td align="center">返回x/y的模</td></tr><tr><td align="center">rand()</td><td align="center">返回0~1内的随机数</td></tr><tr><td align="center">round(x,y)</td><td align="center">得参数x的整体进行四舍五入的值，保留y位小数</td></tr></tbody></table><p>​    范例：数值函数的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ceil</span><span class="token keyword">SELECT</span> ceil<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果2</span><span class="token comment">-- floor</span>SELSECT floor<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span> <span class="token comment">//结果1</span><span class="token comment">-- mod</span>SELSET <span class="token function">mod</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//3除4的余数，结果3</span><span class="token comment">--rand</span><span class="token keyword">SELECT</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0~1随机数</span><span class="token comment">--round</span><span class="token keyword">SELECT</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">2.345</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果2.35</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：生成的数字可以作为字符串参与上面字符串函数中</p><h4 id="3-日期函数"><a href="#3-日期函数" class="headerlink" title="3. 日期函数"></a>3. 日期函数</h4><p>​    常见日期函数如下：</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">curdate()</td><td align="center">返回当前日期</td></tr><tr><td align="center">curtime()</td><td align="center">返回当前时间</td></tr><tr><td align="center">now()</td><td align="center">返回当前日期和时间，<strong>即返回的是date类型</strong></td></tr><tr><td align="center">year(date)</td><td align="center">获取指定date的年份</td></tr><tr><td align="center">month(date)</td><td align="center">获取指定date的月份</td></tr><tr><td align="center">day(date)</td><td align="center">获取指定date的日期</td></tr><tr><td align="center">date_add(date,interval expr type)</td><td align="center">在指定日期下增加一个时间间隔，返回该时间值</td></tr><tr><td align="center">datediff(date1,date2)</td><td align="center">返回起始时间date1和结束时间date2之间的天数，结果为date1-date2</td></tr></tbody></table><p>​    范例：日期函数的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- curdate</span><span class="token keyword">SELECT</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果2022-11-14</span><span class="token comment">-- curtime</span><span class="token keyword">SELECT</span> curtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果9:29:15</span><span class="token comment">-- now</span><span class="token keyword">SELECT</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果2022-11-14 9:29:54</span><span class="token comment">-- year</span><span class="token keyword">SELECT</span> <span class="token keyword">year</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果2022</span><span class="token comment">-- month</span><span class="token keyword">SELECT</span> <span class="token keyword">month</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果11</span><span class="token comment">-- day</span><span class="token keyword">SELECT</span> <span class="token keyword">day</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果14</span><span class="token comment">--date_add</span><span class="token keyword">SELECT</span> date_add<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">10</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果2022-11-24 10:05:31</span><span class="token comment">-- datediff</span><span class="token keyword">SELECT</span> datediff<span class="token punctuation">(</span><span class="token string">'2022-12-01'</span><span class="token punctuation">,</span><span class="token string">'2022-11-1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 结果<span class="token number">30</span>，注意如果前小后大则值为负数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-流程函数"><a href="#4-流程函数" class="headerlink" title="4. 流程函数"></a>4. 流程函数</h4><p>​    流程函数在SQL语句中实现条件筛选，从而提高语句的效率</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">if(value,t,f)</td><td align="center">如果value为true，则返回true否则返回f</td></tr><tr><td align="center">ifnull(value1,value2)</td><td align="center">判定第一个参数是否为空，即如果value1不为空，返回value1，否则返回value2</td></tr><tr><td align="center">case [表中字段] when [val] then [res1]…else [default] end</td><td align="center">如果val1与表中数据判断为true返回res1,…(可以写多个判断的)否则返回default默认值</td></tr><tr><td align="center">case when [表中字段]比较运算 then [res1]…else [default] end</td><td align="center">如果不是具体的而是范围，使用该语法</td></tr></tbody></table><p>​    范例：流程控制函数的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- if</span><span class="token keyword">SELECT</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">'ok'</span><span class="token punctuation">,</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果ok</span><span class="token comment">--ifnull</span><span class="token keyword">SELECT</span> ifnull<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//结果error</span><span class="token comment">-- case when then else end</span><span class="token comment">-- 需求：查询员工表emp中员工姓名和工作地址(北京/上海--->一线城市，其他--->二线城市)</span><span class="token keyword">SELECT</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">case</span> workaddress <span class="token keyword">when</span> <span class="token string">'北京'</span> <span class="token keyword">then</span> <span class="token string">'一线城市'</span> <span class="token keyword">when</span> <span class="token string">'上海'</span> <span class="token keyword">then</span> <span class="token string">'一线城市'</span> <span class="token keyword">else</span> <span class="token string">'二线城市'</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">'工作地址'</span><span class="token keyword">FROM</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-约束"><a href="#5-约束" class="headerlink" title="5. 约束"></a>5. 约束</h4><p>​    约束是作用于表中字段上的规则，用于限制存储在表中的数据</p><p>​    约束的目的是保证数据库中数据的正确、有效性和完整性</p><p>​    约束的分类</p><table><thead><tr><th align="center">约束</th><th align="center">描述</th><th align="center">关键字</th></tr></thead><tbody><tr><td align="center">非空约束</td><td align="center">限制该字段的数据不能为null</td><td align="center">NOT NULL</td></tr><tr><td align="center">唯一约束</td><td align="center">保证该字段的所有数据都是唯一、不重复的</td><td align="center">UNIQUE</td></tr><tr><td align="center">主键约束</td><td align="center">主键是一行数据的唯一标识，要求非空且唯一</td><td align="center">PRIMARY KEY</td></tr><tr><td align="center">默认约束</td><td align="center">保存数据时，如果未指定该字段的值，则采用默认值</td><td align="center">DEFAULT</td></tr><tr><td align="center">检查约束</td><td align="center">保证字段值满足某一条件</td><td align="center">CHECK</td></tr><tr><td align="center">外键约束</td><td align="center">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td><td align="center">FOREIGN KEY</td></tr></tbody></table><p>​    注意：约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束</p><p>​    范例：约束的使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span><span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span>age <span class="token keyword">INT</span> <span class="token keyword">CHECK</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> age<span class="token operator">&lt;=</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>statues <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">COMMENT</span> <span class="token string">'用户表'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-外键约束"><a href="#6-外键约束" class="headerlink" title="6.外键约束"></a>6.外键约束</h4><p>​    概念：用来让两张表的数据之间建立连接，保证数据的一致性和完整性</p><p>​    一般把设立外键的表叫做子表，而让该外键为主键的表叫主表</p><p><a href="https://imgse.com/i/zEiZ1x"><img src="https://s1.ax1x.com/2022/11/15/zEiZ1x.png" alt="zEiZ1x.png"></a></p><p>​    设置外键后，当要删除主表的数据时，要判定该数据在子表中是否存在关联关系，如果存在则拒绝删除操作</p><p>​    外键约束的语法：</p><ul><li><p>添加外键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//建表时直接创建</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>字段名 数据类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">CONSTRAINT</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>外键名称<span class="token punctuation">]</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> REFRENCES 主表<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表建立后修改外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除外键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​    范例：外键的操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//增加外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> fk_emp_dept_id <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> dept<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> emp <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> fk_emp_dept_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    外键约束：删除和更新行为</p><table><thead><tr><th align="center">行为</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">NO ACTION</td><td align="center">当主表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新，<strong>外键约束的默认行为</strong></td></tr><tr><td align="center">RESTRICT</td><td align="center">与NO ACTION一致</td></tr><tr><td align="center">CASCADE(级联)</td><td align="center">当在主表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在从表中的记录</td></tr><tr><td align="center">SET NULL</td><td align="center">当在主表中删除对应记录时，首先检查该记录是否对应外键，如果有则设置从表中该外键值为null(此时需要设计时外键允许取null)</td></tr><tr><td align="center">SET DEFAULT</td><td align="center">主表有变更时，子表将外键列设置成一个默认的值(Innodb不支持)</td></tr></tbody></table><p>​    语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名称 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>外键字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主表列名<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <code>ON UPDATE</code>：表示更新时怎么操作</p><p>​    <code>ON DELETE</code>：表示删除时怎么操作</p><p>​    前面一段与外键设置时语法相同</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构04</title>
      <link href="/2022/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8404/"/>
      <url>/2022/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8404/</url>
      
        <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h4 id="1-栈的定义"><a href="#1-栈的定义" class="headerlink" title="1. 栈的定义"></a>1. 栈的定义</h4><p>​    一种可以实现“先进后出”的存储结构<br>​    栈类似于箱子</p><h4 id="2-栈的分类"><a href="#2-栈的分类" class="headerlink" title="2. 栈的分类"></a>2. 栈的分类</h4><p>​    栈可以分为静态栈和动态栈</p><p>​    静态栈：通过数组实现</p><p>​    动态栈：通过链表实现</p><p>​    动态栈使用的更多</p><h4 id="3-栈可以实现的操作"><a href="#3-栈可以实现的操作" class="headerlink" title="3. 栈可以实现的操作"></a>3. 栈可以实现的操作</h4><p>​    1. 入栈(压栈)</p><p>​    2. 出栈</p><h4 id="4-动态栈的伪算法"><a href="#4-动态栈的伪算法" class="headerlink" title="4. 动态栈的伪算法"></a>4. 动态栈的伪算法</h4><ol><li><p>动态栈的实现</p><p>动态栈通过链表来实现，栈中的每一个元素通过一个结点来表示，要实现栈还需要声明一个栈顶和栈底，初始化栈时，会将栈顶和栈底指向同一个空的头结点，要向栈存入数据，则先新生成一个结点，再**将该新结点的指针域指向栈顶指向的结点(考虑到出栈时要删除，所以新指向旧)**，最后将栈顶移动到新结点上</p></li></ol><ol start="2"><li>注意：动态栈属于链表栈，不存在满的问题</li></ol><ol start="3"><li><p>压栈操作图示</p><p><img src="https://s1.ax1x.com/2022/11/10/z9SQFe.png" alt="z9SQFe.png"></p></li></ol><ol start="4"><li><p>栈的遍历</p><p>栈的遍历由于栈是先进后出，所以需要通过栈顶确定指针p，通过指针p来自上向下进行操作，只要p指向的元素不是栈底，则可以对栈一直输出</p></li></ol><ol start="5"><li><p>判断栈是否为空</p><p>当栈顶和栈底相等，则栈为空</p></li></ol><ol start="6"><li><p>出栈</p><p>当栈中元素为空时，则出栈失败；不为空则将一指针p指向栈顶指向的元素，栈顶元素指向该元素的下一个元素，此时释放掉p指针指向的结点就行</p></li></ol><ol start="7"><li><p>栈的清空</p><p>将栈内有效元素全部清空，只保留框架，实现需要定义指针p和q，p指向栈顶元素，q为NULL，如果p没有指向栈底，则q指向p的下一个元素，当将p指向元素释放后p在移动到q上，只要p指向的不是栈底则一直循环执行该算法，循环结束后应将栈顶指向栈底</p></li></ol><h4 id="5-动态栈的算法"><a href="#5-动态栈的算法" class="headerlink" title="5. 动态栈的算法"></a>5. 动态栈的算法</h4><ol><li><p>算法-栈的定义、栈的初始化、压栈、遍历栈</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token comment">//定义栈中的每一个结点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span> pNext<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>NODE<span class="token punctuation">,</span><span class="token operator">*</span>PNODE<span class="token punctuation">;</span><span class="token comment">//定义栈</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Stack</span><span class="token punctuation">&#123;</span>    PNODE pTop<span class="token punctuation">;</span>    PNODE pBottom<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>STACK<span class="token punctuation">,</span><span class="token operator">*</span>PSTACK<span class="token punctuation">;</span><span class="token comment">//函数声明</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>PSTACK pSt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>PSTACK pSt<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    STACK st<span class="token punctuation">;</span>    <span class="token comment">//定义栈</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//栈的初始化</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//压栈</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write_stack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历栈</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//栈的初始化</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>PSTACK pSt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pSt<span class="token operator">-></span>pTop <span class="token operator">=</span> <span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span>pSt<span class="token operator">-></span>pTop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pSt<span class="token operator">-></span>pBottom <span class="token operator">=</span> pSt<span class="token operator">-></span>pTop<span class="token punctuation">;</span>    <span class="token comment">//指针域置为空</span>    pSt<span class="token operator">-></span>pTop<span class="token operator">-></span>pNext <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//压栈</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>PSTACK pSt<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    PNODE p <span class="token operator">=</span> <span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> num<span class="token punctuation">;</span>    p<span class="token operator">-></span>pNext <span class="token operator">=</span> pSt<span class="token operator">-></span>pTop<span class="token punctuation">;</span>    pSt<span class="token operator">-></span>pTop <span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历</span><span class="token keyword">void</span> <span class="token function">write_stack</span><span class="token punctuation">(</span>PSTACK pSt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    PNODE p <span class="token operator">=</span> pSt<span class="token operator">-></span>pTop<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pSt<span class="token operator">-></span>pBottom<span class="token operator">!=</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>算法-栈是否为空的判断、出栈</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span> <span class="token comment">//bool类型需要声明的头文件</span></span><span class="token comment">//判断栈是否为空</span>bool <span class="token function">empty</span><span class="token punctuation">(</span>PSTACK pST<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//函数声明</span>bool <span class="token function">empty</span><span class="token punctuation">(</span>PSTACK pSt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//函数体</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pSt<span class="token operator">-></span>pTop<span class="token operator">==</span>pSt<span class="token operator">-></span>pBottom<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//出栈，并返回出栈的值</span>bool <span class="token function">pop</span><span class="token punctuation">(</span>PSTACK pSt<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//函数声明</span>bool <span class="token function">pop</span><span class="token punctuation">(</span>PSTACK pSt<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//函数体</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>pSt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    PNODE p <span class="token operator">=</span> pSt<span class="token operator">-></span>pTop<span class="token punctuation">;</span>    pSt<span class="token operator">-></span>pTop <span class="token operator">=</span> pSt<span class="token operator">-></span>pTop<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token operator">*</span>val <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>算法-栈的清空</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>PSTACK pSt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//函数声明</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>PSTACK pSt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//函数体</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span>pSt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    PNODE p <span class="token operator">=</span> pSt<span class="token operator">-></span>pTop<span class="token punctuation">;</span>    PNODE q <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>pSt<span class="token operator">-></span>pBottom<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pSt<span class="token operator">-></span>pTop <span class="token operator">=</span> pSt<span class="token operator">-></span>pBottom<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="6-栈的应用"><a href="#6-栈的应用" class="headerlink" title="6. 栈的应用"></a>6. 栈的应用</h4><p>​    1. 函数调用<br>​    2. 中断<br>​    3. 表达式求值<br>​    4. 内存分配<br>​    5. 缓冲处理<br>​    6. 走迷宫</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL01-SQL基础语法</title>
      <link href="/2022/10/31/SQL01-SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/10/31/SQL01-SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL基础语法"><a href="#SQL基础语法" class="headerlink" title="SQL基础语法"></a>SQL基础语法</h2><p>​    <strong>SQL：操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准</strong></p><p>​    关系型数据库：用表结构存储数据的叫关系型数据库</p><h3 id="1-SQL简介"><a href="#1-SQL简介" class="headerlink" title="1. SQL简介"></a>1. SQL简介</h3><h4 id="1-SQL通用语法"><a href="#1-SQL通用语法" class="headerlink" title="(1)SQL通用语法"></a>(1)SQL通用语法</h4><ol><li>SQL语句可以单行书写或多行书写，以分号结尾</li><li>MySQL数据库的SQL语句不区分大小写</li><li>注释：<ul><li>单行注释：<code>--</code>注释内容或<code>#</code>注释内容(MySQL特有)</li><li>多行注释：<code>/*</code>注释内容<code>*/</code></li></ul></li></ol><h4 id="2-SQL分类"><a href="#2-SQL分类" class="headerlink" title="(2)SQL分类"></a>(2)SQL分类</h4><table><thead><tr><th align="center">分类</th><th align="center">全称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">DDL</td><td align="center">Data Definition Language</td><td align="center">数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td align="center">DML</td><td align="center">Data Manipulation Language</td><td align="center">数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td align="center">DQL</td><td align="center">Data Query Language</td><td align="center">数据查询语言，用来查询数据库中表的记录</td></tr><tr><td align="center">DCL</td><td align="center">Data Control Language</td><td align="center">数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h3 id="2-DDL-建库语言"><a href="#2-DDL-建库语言" class="headerlink" title="2. DDL(建库语言)"></a>2. DDL(建库语言)</h3><h4 id="1-DDL-数据库操作-命令行"><a href="#1-DDL-数据库操作-命令行" class="headerlink" title="(1)DDL-数据库操作(命令行)"></a>(1)DDL-数据库操作(命令行)</h4><ol><li><p>查询所有数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 数据库名 <span class="token punctuation">[</span>defailt <span class="token keyword">charset</span> 字符集<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">collate</span> 排序规则<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：一般不推荐设置字符集为<code>utf8</code>，因为其只占三个字节，而有些特殊字符是占四个字节的，所以推荐使用utf8mb4，它是支持四个字节的</p></li><li><p>删除数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 数据库名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入/切换数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> 数据库名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询当前数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="2-DDL-表操作-命令行"><a href="#2-DDL-表操作-命令行" class="headerlink" title="(2)DDL-表操作(命令行)"></a>(2)DDL-表操作(命令行)</h4><ol><li><p>查询当前数据库所有表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//前提是要先进入到数据库</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查询表结构(表的字段设置，类型等信息)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询指定表的建表语句</p><pre class="line-numbers language-none"><code class="language-none">show create table 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>表的创建</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span><span class="token keyword">comment</span> <span class="token string">'注释'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>字段<span class="token number">2</span> 字段<span class="token number">2</span>类型 <span class="token punctuation">[</span><span class="token keyword">comment</span> <span class="token string">'注释'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">comment</span> <span class="token string">'注释'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">comment</span> <span class="token string">'表注释'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>向表结构中添加字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 字段名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">comment</span> 注释<span class="token punctuation">]</span> <span class="token punctuation">[</span>约束<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改表中某字段的数据类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 字段名 新的数据类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>同时修改字段名和字段类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 旧字段名 新字段名 类型<span class="token punctuation">(</span>长度<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token keyword">comment</span> 注释<span class="token punctuation">]</span> <span class="token punctuation">[</span>约束<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除字段</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 字段名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改表名</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">rename</span> <span class="token keyword">to</span> 新表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="3-DDL-数据类型"><a href="#3-DDL-数据类型" class="headerlink" title="(3)DDL-数据类型"></a>(3)DDL-数据类型</h4><p>​    MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型</p><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">smallint</td><td align="center">2 bytes</td><td align="center">大整数值</td></tr><tr><td align="center">int</td><td align="center">4 bytes</td><td align="center">大整数值</td></tr><tr><td align="center">float</td><td align="center">4 bytes</td><td align="center">单精度浮点数值</td></tr><tr><td align="center">double</td><td align="center">8 bytes</td><td align="center">双精度浮点数值</td></tr><tr><td align="center">decimal</td><td align="center">使用时需要指定精度(总长)和标度(小数尾数)</td><td align="center">小数值</td></tr></tbody></table><ol><li><p>可以设置类型是否为无符号</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">age <span class="token keyword">int</span> unsigne<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>可以指定设置的范围</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//长度为4，小数部分为1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><table><thead><tr><th align="center">类型</th><th align="center">大小</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">0~255 bytes</td><td align="center">定长字符串</td></tr><tr><td align="center">varchar</td><td align="center">0~65535 bytes</td><td align="center">变长字符串</td></tr></tbody></table><p>​    定长与变长的区别：</p><ul><li>CHAR：存入数据不管多大占用的空间都是那么多，其性能上要好</li><li>VARCHAR：根据你存储的内容去计算需要占用的空间</li></ul><h5 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h5><table><thead><tr><th align="center">类型</th><th align="center">范围</th><th align="center">格式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">date</td><td align="center">1000-01-01至9999-12-31</td><td align="center">YYYY-MM-DD</td><td align="center">日期值</td></tr><tr><td align="center">time</td><td align="center">-838:59:59至838:59:59</td><td align="center">HH:MM:SS</td><td align="center">时间值</td></tr><tr><td align="center">datetime</td><td align="center">1000-01-01 00:00:00至9999-12-31 23:59:59</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">混合日期和时间值</td></tr></tbody></table><h3 id="3-DML-数据更改"><a href="#3-DML-数据更改" class="headerlink" title="3. DML(数据更改)"></a>3. DML(数据更改)</h3><h4 id="1-DML-增加数据"><a href="#1-DML-增加数据" class="headerlink" title="(1)DML-增加数据"></a>(1)DML-增加数据</h4><ol><li><p>给指定字段添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>给全部字段添加数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注意：值应当与字段一一对应</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>​    <strong>注意：插入字符串和日期型数据应当包含在引号中</strong>，如果要添加多条数据，数据之间用<code>,</code>分隔</p><h4 id="2-DML-修改和删除数据"><a href="#2-DML-修改和删除数据" class="headerlink" title="(2)DML-修改和删除数据"></a>(2)DML-修改和删除数据</h4><ol><li><p>修改数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段名<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：如果没有写<code>where</code>条件，则会修改整张表的所有数据，<code>set</code>后面为一条记录的多个字段</p></li><li><p>删除数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：DELETE语句删除的是整条记录，而不是某一字段的值，且如果没有写<code>WHERE</code>条件，则会删除整张表的所有数据</p></li></ol><h3 id="4-DQL-数据查询"><a href="#4-DQL-数据查询" class="headerlink" title="4. DQL(数据查询)"></a>4. DQL(数据查询)</h3><p>​    在日常的项目中查询的频次要远高于增删改的频次</p><p>​    <strong>DQL语法：（语法顺序）</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//编写顺序</span><span class="token keyword">select</span>字段列表<span class="token keyword">from</span>表名列表<span class="token keyword">where</span>条件列表<span class="token keyword">group</span> <span class="token keyword">by</span>分组字段列表<span class="token keyword">having</span>分组后条件列表<span class="token keyword">order</span> <span class="token keyword">by</span>排序字段列表<span class="token keyword">limit</span>分页参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>DQL执行顺序</strong></p><pre class="line-numbers language-none"><code class="language-none">1.from2.where3.group by4.select5.having6.order by7.limit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-DQL-基本查询"><a href="#1-DQL-基本查询" class="headerlink" title="(1)DQL-基本查询"></a>(1)DQL-基本查询</h4><ol><li>查询字段</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//查询某些字段</span>selete 字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token comment">//查询所有字段</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>设置别名</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段<span class="token number">1</span><span class="token punctuation">[</span><span class="token keyword">as</span> <span class="token string">'别名1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">[</span><span class="token keyword">as</span> <span class="token string">'别名2'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：设置别名时，<code>AS</code>是可以省略的，<strong>设置别名后查询到的列会显示别名</strong></p><ol start="3"><li>对查询到的结果去除重复记录</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> 字段列表 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-DQL-条件查询"><a href="#2-DQL-条件查询" class="headerlink" title="(2)DQL-条件查询"></a>(2)DQL-条件查询</h4><ol><li>语法</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">selete 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>条件</li></ol><table><thead><tr><th align="center">比较运算符(单个条件比较)</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">&gt;=、&gt; 、&lt;、&lt;=、=</td><td align="center">大于等于、大于、小于、小于等于、等于</td></tr><tr><td align="center">&lt;&gt;、!=</td><td align="center">不等于</td></tr><tr><td align="center">BETWEEN…AND</td><td align="center">在某个范围之内，between后面跟的是小值，and后面是大值</td></tr><tr><td align="center">(…) IN(…)</td><td align="center">用于判断某个值（或值组合）是否包含在一组值（或结果集【子查询】）中</td></tr><tr><td align="center">LIKE ‘占位符’</td><td align="center">模糊匹配(_匹配单个字符，%匹配任意个字符)</td></tr><tr><td align="center">IS (NOT) NULL</td><td align="center">某字段(不)为空</td></tr></tbody></table><hr><table><thead><tr><th align="center">逻辑运算符(用于将多个条件组装起来)</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">and 或 &amp;&amp;</td><td align="center">并且(多个条件同时成立)</td></tr><tr><td align="center">or 或 ||</td><td align="center">或者(多个条件任意一个成立)</td></tr><tr><td align="center">not 或 !</td><td align="center">非(不是)</td></tr></tbody></table><h4 id="3-DQL-分组查询-将已经查询好的记录分组排列"><a href="#3-DQL-分组查询-将已经查询好的记录分组排列" class="headerlink" title="(3)DQL-分组查询(将已经查询好的记录分组排列)"></a>(3)DQL-分组查询(将已经查询好的记录分组排列)</h4><p>​    <strong><code>GROUP BY</code> 语句是在 SQL 查询中用于对查询结果进行分组，它不会改变查询的总记录数，只是对查询结果中的数据进行分组</strong>，并允许你在每个组上执行聚合操作（比如 <code>COUNT()</code>、<code>SUM()</code>、<code>AVG()</code> 等</p><h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><p>​    <strong>group by是对该列内容相同的字段分成一组，放同一个组之后若直接遇到select，则将分组内的第一行进行输出，其他的行被丢弃</strong></p><p>​    <a href="https://imgse.com/i/pALtsq1"><img src="https://s21.ax1x.com/2024/12/17/pALtsq1.png" alt="sql题"></a></p><h5 id="书本语法"><a href="#书本语法" class="headerlink" title="书本语法"></a>书本语法</h5><ol><li><p>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">     <span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span> <span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段名 <span class="token punctuation">[</span><span class="token keyword">having</span> 分组后过滤条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>where和having的区别</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件则不参与分组，而having是分组之后对结果进行过滤</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以</li></ul></li><li><p>执行顺序：where&gt;聚合函数&gt;having</p></li><li><p>分组之后查询的字段一般为聚合函数和进行分组的字段，查询其他字段无任何意义</p></li></ol><h4 id="4-DQL补充-聚合函数-在分组查询中使用"><a href="#4-DQL补充-聚合函数-在分组查询中使用" class="headerlink" title="(4)DQL补充-聚合函数(在分组查询中使用)"></a>(4)DQL补充-聚合函数(在分组查询中使用)</h4><h5 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h5><p>​    <strong><code>COUNT(1)</code> 是一个常见的聚合函数，表示对查询结果中每一行进行计数</strong>，<code>COUNT(1)</code> 和 <code>COUNT(*)</code> 的行为在大多数数据库中是一样的，都是统计符合条件的行数</p><p>​    <a href="https://imgse.com/i/pALffW4"><img src="https://s21.ax1x.com/2024/12/18/pALffW4.png" alt="聚合函数和分组查询"></a></p><p>​    </p><h5 id="书本语法-1"><a href="#书本语法-1" class="headerlink" title="书本语法"></a>书本语法</h5><ol><li><p>聚合函数的概念：将一列数据作为一个整体进行纵向计算</p></li><li><p>常见聚合函数</p><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计数量</td></tr><tr><td align="center">max</td><td align="center">最大值</td></tr><tr><td align="center">min</td><td align="center">最小值</td></tr><tr><td align="center">avg</td><td align="center">平均值</td></tr><tr><td align="center">sum</td><td align="center">求和</td></tr></tbody></table></li><li><p>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 聚合函数<span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：null值不参与所有聚合函数运算</p></li></ol><h4 id="5-DQL-排序查询"><a href="#5-DQL-排序查询" class="headerlink" title="(5)DQL-排序查询"></a>(5)DQL-排序查询</h4><ol><li><p>语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">order</span> <span class="token keyword">by</span> 字段<span class="token number">1</span> 排序方式<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span> 排序方式<span class="token number">2</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>排序方式</p><ul><li>asc：升序(默认值)</li><li>desc：降序</li></ul></li><li><p>多字段排序时，第一个字段值相同时才会根据第二个字段排序</p></li></ol><h4 id="6-DQL-分页查询"><a href="#6-DQL-分页查询" class="headerlink" title="(6)DQL-分页查询"></a>(6)DQL-分页查询</h4><ol><li><p>语法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">limit</span> 起始索引<span class="token punctuation">,</span>查询记录数<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p> 起始索引从0开始，起始索引 = (要查询页码-1) <code>*</code> 每页显示记录数</p></li><li><p> 分页查询在不同数据库中语法不一样，在MySQL中是LIMIT</p></li><li><p> 如果查询的是第一页数据，起始索引可以省略，直接简写为LIMIT 10</p></li></ol><h3 id="5-DCL-SQL开发人员对其操作比较少"><a href="#5-DCL-SQL开发人员对其操作比较少" class="headerlink" title="5. DCL(SQL开发人员对其操作比较少)"></a>5. DCL(SQL开发人员对其操作比较少)</h3><h4 id="1-DCL-用户控制"><a href="#1-DCL-用户控制" class="headerlink" title="(1)DCL-用户控制"></a>(1)DCL-用户控制</h4><ol><li><p>查询用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//主机名约束了用户可以访问的数据库，设置为%可以访问所有数据库</span><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'密码'</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改用户密码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span> identified <span class="token keyword">with</span> mysql_native_password <span class="token keyword">by</span> <span class="token string">'新密码'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除用户</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="2-DCL-权限控制"><a href="#2-DCL-权限控制" class="headerlink" title="(2)DCL-权限控制"></a>(2)DCL-权限控制</h4><ol><li><p>查询权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>授予权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//如果是所有数据库以及所有表则写*.*,设置多个权限用,隔开</span><span class="token keyword">grant</span> 授权列表 <span class="token keyword">on</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">to</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>撤销权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">revoke</span> 权限列表 <span class="token keyword">on</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">from</span> <span class="token string">'用户名'</span><span class="token variable">@'主机名'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><code>2024.12.17(已校验)</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构03</title>
      <link href="/2022/10/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8403/"/>
      <url>/2022/10/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8403/</url>
      
        <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h4 id="1-typedef"><a href="#1-typedef" class="headerlink" title="1. typedef"></a>1. typedef</h4><p>​    C语言允许为一个数据类型起一个新的别名，使用typedef关键字来进行定义</p><p>​    typedef 的用法一般为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span>  oldName  newName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    注意：一般新名字全部字母大写</p><p>​    范例：为结构体起一个别名</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> sid<span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> sex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ST<span class="token punctuation">,</span><span class="token operator">*</span>PST<span class="token punctuation">;</span><span class="token comment">//ST等价于struct Student, PST等价于struct Student *</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ST st<span class="token punctuation">;</span>    st<span class="token punctuation">.</span>sid <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>st<span class="token punctuation">.</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-链表-离散存储"><a href="#2-链表-离散存储" class="headerlink" title="2. 链表(离散存储)"></a>2. 链表(离散存储)</h4><p><strong>链表的定义：</strong></p><p>​    ​    1. n个结点离散分配，<br>​    ​    2. 彼此通过指针相连<br>​    ​    3. 每个结点只有一个前驱结点，每个结点只有一个后续结点<br>​    ​    4. 首结点没有前驱结点，尾结点没有后续结点</p><p><strong>专业术语：</strong></p><ul><li>首结点：第一个存了有效数据的结点</li><li>尾结点：最后一个存了有效数据的结点，尾结点的指针域为空</li><li>头结点：第一个有效结点(首结点)之前的结点，方便我们对链表算法进行操作，里面不包含有效数据和数组长度，但头结点的数据类型和首结点的数据类型一样</li><li>头指针：指向头结点的指针变量，存放了头结点的地址</li><li>尾指针：指向尾结点的指针变量</li></ul><p><strong>如果希望通过一个函数来对链表进行处理，至少需要接受链表的哪些参数：</strong></p><p>​    只需要一个参数：头指针</p><p>​    通过头指针可以推算出链表的其他所有信息</p><h4 id="3-链表结点数据类型的表示"><a href="#3-链表结点数据类型的表示" class="headerlink" title="3. 链表结点数据类型的表示"></a>3. 链表结点数据类型的表示</h4><p>​    一个结点可以分为两个部分：数据域和指针域</p><p>​    指针域中的指针指向了一个完整的结点</p><p>​    范例：结点的定义</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">;</span>  <span class="token comment">//数据域</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span> pNext<span class="token punctuation">;</span> <span class="token comment">//指针域</span><span class="token punctuation">&#125;</span>NODE<span class="token punctuation">,</span><span class="token operator">*</span>PNODE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-链表的分类"><a href="#4-链表的分类" class="headerlink" title="4. 链表的分类"></a>4. 链表的分类</h4><ul><li>单链表：每个结点的指针域只能指向后面结点</li><li>双链表：每一个结点有两个指针域</li><li>循环链表：能通过任何一个结点找到其他所有的结点</li><li>非循环链表：尾结点为null</li></ul><p>​    </p><h4 id="5-链表的伪算法"><a href="#5-链表的伪算法" class="headerlink" title="5. 链表的伪算法"></a>5. 链表的伪算法</h4><ol><li><p>非循环单链表：将q结点插入到p结点后面</p><p><a href="https://imgse.com/i/xRglh8"><img src="https://s1.ax1x.com/2022/10/25/xRglh8.png" alt="xRglh8.png"></a></p></li></ol><p>​    伪算法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//第一种方式</span>r <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>p<span class="token operator">-></span>pNext <span class="token operator">=</span> q<span class="token punctuation">;</span>q<span class="token operator">-></span>pNext <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token comment">//第二种方式</span>q<span class="token operator">-></span>pNext <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>p<span class="token operator">-></span>pNext <span class="token operator">=</span> q<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>非循环单链表：将p结点后面的那个结点删除</p><p><a href="https://imgse.com/i/xR2PDs"><img src="https://s1.ax1x.com/2022/10/25/xR2PDs.png" alt="xR2PDs.png"></a></p></li></ol><p>​    伪算法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//注意:由于直接连会导致中间那个结点找不到从而导致内存的浪费,所以要先存起来,最后也要进行释放</span>r <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>p<span class="token operator">-></span>pNext <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token operator">-></span>pNext<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h4 id="6-链表的算法"><a href="#6-链表的算法" class="headerlink" title="6. 链表的算法"></a>6. 链表的算法</h4><ol><li><p><strong>算法–链表的创建以及链表的遍历</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token comment">//定义链表</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">count</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">count</span> <span class="token operator">*</span> pNext<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>NODE<span class="token punctuation">,</span><span class="token operator">*</span> PNODE<span class="token punctuation">;</span><span class="token comment">//函数声明</span>PNODE <span class="token function">count_create</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">count_write</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//设置头指针</span>    PNODE pHead <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    pHead <span class="token operator">=</span> <span class="token function">count_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建一个非循环单链表，并返回头结点地址</span>    <span class="token function">count_write</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历打印出来</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>PNODE <span class="token function">count_create</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">;</span> <span class="token comment">//临时存放用户输入的数据</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span> <span class="token comment">//存放有效结点的个数</span>    <span class="token comment">//设置头指针指向头结点，头结点不存放任何有效数据</span>    PNODE pHead <span class="token operator">=</span> <span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//头结点的指针域设为NULL，防止后面没有结点</span>    pHead<span class="token operator">-></span>pNext <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pHead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//链表的尾指针，用来挂每一个新生成的链表结点</span>    PNODE pTail <span class="token operator">=</span> pHead<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please input number :"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The %d number:"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        PNODE new_Node <span class="token operator">=</span> <span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> new_Node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//新生成结点的指针域设置为NULL</span>        new_Node<span class="token operator">-></span>pNext <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment">//新生成的结点的数据域设置值</span>        new_Node<span class="token operator">-></span>number <span class="token operator">=</span>tmp<span class="token punctuation">;</span>        <span class="token comment">//将新生成的结点挂在尾指针上</span>        pTail<span class="token operator">-></span>pNext <span class="token operator">=</span> new_Node<span class="token punctuation">;</span>        <span class="token comment">//将尾指针指向新生成的新结点</span>        pTail <span class="token operator">=</span> new_Node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pHead<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">count_write</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    PNODE pTail <span class="token operator">=</span> pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">!=</span>pTail<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span> <span class="token punctuation">,</span>pTail<span class="token operator">-></span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将指针向后移</span>        pTail <span class="token operator">=</span> pTail<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p><strong>算法–链表的是否为空的判断和求链表长度</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//判断是否为空的函数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span>  <span class="token comment">//C语言使用bool类型需要导入的头文件</span></span>bool <span class="token function">is_empty</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数声明</span>bool <span class="token function">is_empty</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//函数体</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pHead<span class="token operator">-></span>pNext<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//求链表长度</span><span class="token keyword">int</span> <span class="token function">count_len</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数声明</span><span class="token keyword">int</span> <span class="token function">count_len</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//函数体</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    PNODE p <span class="token operator">=</span> pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">++</span>len<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p><strong>算法–链表的冒泡排序</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//冒泡排序</span><span class="token keyword">void</span> <span class="token function">count_sort</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数声明</span><span class="token keyword">void</span> <span class="token function">count_sort</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//函数体</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">count_len</span><span class="token punctuation">(</span>pHead<span class="token punctuation">)</span><span class="token punctuation">;</span>    PNODE p <span class="token operator">=</span> pHead<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        PNODE q <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>number<span class="token operator">></span>q<span class="token operator">-></span>number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tmp <span class="token operator">=</span> p<span class="token operator">-></span>number<span class="token punctuation">;</span>                p<span class="token operator">-></span>number <span class="token operator">=</span> q<span class="token operator">-></span>number<span class="token punctuation">;</span>                q<span class="token operator">-></span>number <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            q <span class="token operator">=</span> q<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p><strong>算法–链表的插入元素和删除元素</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//链表的插入算法</span>bool <span class="token function">count_insert</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> pos <span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数声明 pos表示在有效结点第pos个增加结点</span>bool <span class="token function">count_insert</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> pos <span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//函数体</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    PNODE p <span class="token operator">=</span> pHead<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>        <span class="token comment">//一定要判空，否则程序有bug</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    PNODE pNew <span class="token operator">=</span> <span class="token punctuation">(</span>PNODE<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>NODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pNew<span class="token operator">-></span>number <span class="token operator">=</span> val<span class="token punctuation">;</span>    pNew<span class="token operator">-></span>pNext <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    p<span class="token operator">-></span>pNext <span class="token operator">=</span> pNew<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//链表的删除算法</span>bool <span class="token function">count_delete</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> pos <span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数声明，pos表示删除有效结点的第pos个</span>bool <span class="token function">count_delete</span><span class="token punctuation">(</span>PNODE pHead<span class="token punctuation">,</span> <span class="token keyword">int</span> pos <span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    PNODE p <span class="token operator">=</span> pHead<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pos <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>pNext<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>pNext<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    PNODE tmp <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token operator">*</span>val <span class="token operator">=</span> tmp<span class="token operator">-></span>number<span class="token punctuation">;</span>    <span class="token comment">//将p指针指向下下个结点</span>    p<span class="token operator">-></span>pNext <span class="token operator">=</span> p<span class="token operator">-></span>pNext<span class="token operator">-></span>pNext<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE05</title>
      <link href="/2022/10/31/JavaEE05/"/>
      <url>/2022/10/31/JavaEE05/</url>
      
        <content type="html"><![CDATA[<h2 id="request内置对象详解"><a href="#request内置对象详解" class="headerlink" title="request内置对象详解"></a>request内置对象详解</h2><h4 id="1-request内置对象的作用"><a href="#1-request内置对象的作用" class="headerlink" title="1. request内置对象的作用"></a>1. request内置对象的作用</h4><p>​    在JSP之中，request内置对象的主要工作就是服务器端接收客户端发送来的请求参数。</p><h4 id="2-request对象的继承结构"><a href="#2-request对象的继承结构" class="headerlink" title="2. request对象的继承结构"></a>2. request对象的继承结构</h4><p>​    request属于<code>javax.servlet.http.HttpServletRequest</code>接口的对象</p><table><thead><tr><th>继承结构</th><th>说明</th></tr></thead><tbody><tr><td>public interface HttpServletRequest extends ServletRequest</td><td>扩展ServletRequest接口以提供HTTP servlet的请求信息</td></tr></tbody></table><p>​    注意：HttpServletRequest是继承<code>javax.servlet.ServletRequest</code>接口，但是ServletRequest接口只有一个子接口，不写成一个的原因是HttpServletRequest子接口是专门为了处理HTTP协议而提供的，而ServletRequest接口是负责所有相关协议的公共接口，以后可能还会有新的协议，新的协议要开发只需要让新的协议继续继承ServletRequest接口即可。</p><p>​    <strong>注意：如果以后要进行方法查询一定要两个接口一起看(从子接口开始找)，且所有提供接收参数的方法都在ServletRequest父接口提供</strong></p><h4 id="3-request内置对象解决传递参数乱码"><a href="#3-request内置对象解决传递参数乱码" class="headerlink" title="3. request内置对象解决传递参数乱码"></a>3. request内置对象解决传递参数乱码</h4><p>​    在使用form表单时，如果输入中文在提交后会变为中文乱码</p><p>​    在乱码问题的解决上需要考虑两种情况</p><ul><li><p>POST提交请求(表单上使用)：可以直接使用ServletRequest父接口定义的方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public void setCharacterEncoding(String env) throws UnsupportedEncodingException</td><td align="center">方法</td><td align="center">设置String env来重写此请求正文中使用的字符编码的名称。必须在使用getReader()读取请求参数或输入之前调用此方法。否则，它没有效果。</td></tr></tbody></table></li><li><p>GET提交请求(直接输入访问路径或者表单)：</p><p>Tomcat8以下的默认编码格式是<strong>ISO-8859-1</strong>，此时接收后需要进行编码的转换，以上就不用转了</p><p>如果是getParameter()方法其返回值为一个字符串，在String类中提供有改变字符串编码的方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public byte[] getBytes(String charsetName) throws UnsupportedEncodingException</td><td align="center">方法</td><td align="center">使用给定的字符集将此字符串编码为一个字节序列，并将结果存储到一个新的字节数组中。</td></tr><tr><td align="center">public String(byte[] bytes, String charsetName) throws UnsupportedEncodingException</td><td align="center">构造方法</td><td align="center">通过使用指定的字符集对指定的字节数组进行解码，构造新的String</td></tr></tbody></table><p>注意：<code>charsetName</code>表示要设置的字符集</p><p>将字符编码转换为<code>UTF-8</code>后再将字符数组使用上述构造方法设置为<code>UTF-8</code>转成String类型输出即可在页面正常显示</p></li></ul><p>​    在HttpServletRequest接口里面有一个方法，此方法可以判断出当前的请求模式</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String getMethod()</td><td align="center">方法</td><td align="center">返回用于发出此请求的HTTP方法的名称，例如GET、POST或PUT。</td></tr></tbody></table><h4 id="4-POST与GET请求的区别"><a href="#4-POST与GET请求的区别" class="headerlink" title="4. POST与GET请求的区别"></a>4. POST与GET请求的区别</h4><ul><li>POST请求：主要用在表单上，处理路径只是提交路径其不会改变</li><li>GET请求：只要是用户直接进行页面访问，那么请求类型一定就是GET请求，表单上也可以使用GET请求，但是GET请求会将所有的请求参数都附加到表单访问路径上，所以不能够传递过多的内容，一般只能够传递4K~5K的内容</li></ul><p>​    注意：由于GET请求传递内容有限，所以一般使用POST请求</p><h4 id="5-request对象接收请求参数"><a href="#5-request对象接收请求参数" class="headerlink" title="5. request对象接收请求参数"></a>5. request对象接收请求参数</h4><p>​    <strong>request内置对象接收参数的来源</strong></p><ul><li><p>第一种来源：表单提交</p></li><li><p>第二种来源：标签指令传递(<code>&lt;jsp:include&gt;</code>、<code>&lt;jsp:forward&gt;</code>)</p></li><li><p>第三种来源：地址重写</p><p>地址重写的基本结构：<code>xxxxxx.jsp?参数名称=内容&amp;参数名称=内容...</code></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;如以下代码为向inpuut.jsp页面传递了两个参数&lt;a href&#x3D;&quot;input.jsp?msg&#x3D;hello&amp;mid&#x3D;30&quot;&gt;访问&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>地址重写相当于GET请求</p></li></ul><p>​    <strong>隐藏域</strong></p><p>​    在表单中有一种表单类型为隐藏域(其会跟着表单一起提交，但是其内容不能够由用户输入且用户无法看见隐藏域)</p><blockquote><input type="hidden" name ="name" value="lxs"></blockquote><p>​    注意：一般隐藏域属于辅助的信息内容，一般都是固定好的</p><p>​    <strong>request内置对象的父类中提供有两个接收参数的方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public <strong>String</strong> getParameter(String name)</td><td align="center">方法</td><td align="center">以String形式返回请求参数的值，如果该参数不存在，则返回null。只有在确定参数只有一个值时，才应使用此方法。如果参数可能有多个值，请使用getParameterValues()</td></tr><tr><td align="center">public <strong>String[]</strong> getParameterValues(String name)</td><td align="center">方法</td><td align="center">返回包含给定请求参数的所有值的String对象数组，如果该参数不存在，则返回null。</td></tr></tbody></table><p>​    注意：getParameter只能接收一个内容，而getParameterValues可以接收一组内容</p><p>​    request内置对象提供返回全部请求参数名称的方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>public Enumeration&lt;String&gt; getParameterNames()</code></td><td align="center">方法</td><td align="center">返回包含此请求中包含的参数名称的String对象的枚举。如果请求没有参数，该方法将返回空Enumeration。</td></tr></tbody></table><p>​    注意：通过这个方法就可以获得传递参数的名字，而通过传递参数的名字就可以获取到值</p><p>​    <strong>补充：Enumeration类(接口)</strong></p><p>​    Enumeration接口是Iterator迭代器的“古老版本”，从JDK 1.0开始，Enumeration接口就已经存在了(Iterator从JDK 1.2才出现)</p><p>​    Enumeration接口的方法介绍</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">boolean hasMoreElements()</td><td align="center">方法</td><td align="center">这是检测Enumeration 对象是否还有元素，有则返回true,否则false</td></tr><tr><td align="center">E nextElement()</td><td align="center">方法</td><td align="center">如果Enumeration对象还有元素，该方法得到下一个元素</td></tr></tbody></table><p>​    </p><p>​    范例：动态的接收参数</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;发送方 form.jsp文件&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;form action&#x3D;&quot;request.jsp&quot; method&#x3D;&quot;post&quot;&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;text1&quot; &#x2F;&gt;&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;**box&quot; value&#x3D;&quot;1&quot;&gt;1&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;**box&quot; value&#x3D;&quot;2&quot;&gt;2&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;**box&quot; value&#x3D;&quot;3&quot;&gt;3&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;**box&quot; value&#x3D;&quot;4&quot;&gt;4&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit1&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;&lt;&#x2F;form&gt;&#x2F;&#x2F;接收方 request.jsp文件&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;%&#x2F;&#x2F;取得属性request.setCharacterEncoding(&quot;UTF-8&quot;);Enumeration&lt;String&gt; e &#x3D; request.getParameterNames();while(e.hasMoreElements())&#123;String s &#x3D; e.nextElement();if(s.startsWith(&quot;**&quot;))&#123;String[] str &#x3D; request.getParameterValues(s);%&gt;&lt;h3&gt;&lt;%&#x3D;Arrays.toString(str)%&gt;&lt;&#x2F;h3&gt;&lt;%&#125;else&#123;%&gt;&lt;h4&gt;&lt;%&#x3D;request.getParameter(s)%&gt;&lt;&#x2F;h4&gt;&lt;%&#125;&#125;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：为了区分接收的一个参数是对应一个值还是多个值，对多个值参数在设置<code>name</code>属性时一般在前面加<code>**</code>，如<code>**XXXX</code>，用作区分</p><h4 id="6-通过request对象实现资源定位"><a href="#6-通过request对象实现资源定位" class="headerlink" title="6. 通过request对象实现资源定位"></a>6. 通过request对象实现资源定位</h4><p>​    在request对象中还有一个重要的操作方法：取得路径名称(该方法在<code>javax.servlet.http.HttpServletRequest</code>中定义)</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String getContextPath()</td><td align="center">方法</td><td align="center">取得上下文路径</td></tr></tbody></table><p>​    getContextPath()取得的是整个虚拟目录的映射路径，在之前Tomcat的<code>conf/server.xml</code>中设置添加了<code>&lt;Context path = &quot;/lxs&quot; docBase = &quot;D:\lxsweb&quot; /&gt;</code>，getContextPath()方法取得的是<code>/lxs</code></p><p>​    通过取得整个虚拟目录的映射路径，我们可以实现资源定位。在实际开发中，我们会导入img、css、js，此时文件通常是使用传统<code>../</code>、<code>/</code>的形式进行引用，但此时如果代码文件发生移动，那么其的路径会发生变化则需要重写配置<code>../</code>、<code>/</code>。而使用getContextPath()可以解决这个问题。</p><p>​    范例：1.输出项目根路径，2.实现资源定位</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;test.jsp与images同级&#x2F;&#x2F;新建文件夹images，导入图片文件img_1.jpg&#x2F;&#x2F;编写文件test.jsp文件&lt;%@page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%String contextpath &#x3D; request.getContextPath();%&gt;&#x2F;&#x2F;输出项目根路径&lt;h1&gt;&lt;%&#x3D;contextpath%&gt;&lt;&#x2F;h1&gt;&#x2F;&#x2F;实现资源定位&lt;img src&#x3D;&quot;&lt;%&#x3D;contextpath%&gt;&#x2F;images&#x2F;img_1.jpg&quot; height&#x3D;&quot;40%&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：此时不管test.jsp放在什么位置，图片都可以正常的显示出来，<strong>在实际开发中都会使用这种方式来引用资源</strong></p><h4 id="7-通过request对象取得基础信息"><a href="#7-通过request对象取得基础信息" class="headerlink" title="7. 通过request对象取得基础信息"></a>7. 通过request对象取得基础信息</h4><p>​    在<code>javax.servlet.http.HttpServletRequest</code>接口的父接口<code>javax.servlet.ServletRequest</code>中提供有取得其他基本信息的方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String getRemoteAddr()</td><td align="center">方法</td><td align="center">返回发送请求的客户端或最后一个代理的IP地址</td></tr><tr><td align="center">public String getScheme()</td><td align="center">方法</td><td align="center">返回用于发出此请求的协议名称，例如http、https或ftp</td></tr><tr><td align="center">public String getServerName()</td><td align="center">方法</td><td align="center">返回请求发送到的服务器的主机名</td></tr><tr><td align="center">public int getServerPort()</td><td align="center">方法</td><td align="center">返回请求发送到的端口号</td></tr></tbody></table><p>​    范例：上述方法的使用以及获取项目的基本路径</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;编写文件path.jsp&lt;%@page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%String ip &#x3D; request.getRemoteAddr();String scheme &#x3D; request.getScheme();String name &#x3D; request.getServerName();int port &#x3D; request.getServerPort();%&gt;&lt;h3&gt;ip地址：&lt;%&#x3D;ip%&gt;&lt;&#x2F;h3&gt;&lt;h3&gt;协议：&lt;%&#x3D;scheme%&gt;&lt;&#x2F;h3&gt;&lt;h3&gt;主机名：&lt;%&#x3D;name%&gt;&lt;&#x2F;h3&gt;&lt;h3&gt;端口号：&lt;%&#x3D;port%&gt;&lt;&#x2F;h3&gt;&lt;%String path &#x3D; request.getScheme()+&quot;:&#x2F;&#x2F;&quot;+ request.getServerName()+&quot;:&quot;+request.getServerPort()+request.getContextPath();%&gt;&lt;h1&gt;访问路径：&lt;%&#x3D;path%&gt;&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>####8. getAttribute()和getParameter()的区别</p><p>​    1、getAttribute是返回(object)对象,getParameter返回字符串。</p><p>​    2、getAttribute可以返回格式化任意类型，getParameter只能返回字符串</p><p>​    3、与getAttribute()方法对应的有setAttribute()方法，但是没有与getParameter()相对的setParameter()</p><p>​    4、request.getAttribute获取的是服务器设置的数据，request.getParameter获取的是客户端比如浏览器的数据(获取http提交过来的数据)</p><p>​    5、getParameter方法就是服务器端接受客户端传递过来的数据时使用；getAttribute方法是在服务器端内部使用，数据通过getParameter获取进来之后，在另一个页面还想继续使用这个数据就要把这个数据通过setAttribute保存起来，想用时再用getAttribute取出来即可使用<br>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaEE04</title>
      <link href="/2022/10/09/javaEE04/"/>
      <url>/2022/10/09/javaEE04/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h2><h4 id="1-内置对象的概念"><a href="#1-内置对象的概念" class="headerlink" title="1. 内置对象的概念"></a>1. 内置对象的概念</h4><p>​    在Java程序中给了你一个类，要使用他用户需要创建一个对象，而<strong>内置对象指的是不需要用户自己创建的对象</strong>(即不需要用户自己手工进行对象实例化)。而是由WEB容器在它启动时默认创建好的对象，用户可以直接拿来使用</p><h4 id="2-内置对象"><a href="#2-内置对象" class="headerlink" title="2. 内置对象"></a>2. 内置对象</h4><p>​    当前主要学习JSP中提供的九个内置对象</p><table><thead><tr><th align="center">序号</th><th align="center">对象名称</th><th align="center">JavaEEAPI路径</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">pageContext</td><td align="center">javax.servlet.jsp.PageContext</td><td align="center">页面的上下文操作</td></tr><tr><td align="center">2</td><td align="center">request</td><td align="center">javax.servlet.http.HttpServletRequest</td><td align="center">服务器端接收客户端请求内容</td></tr><tr><td align="center">3</td><td align="center">response</td><td align="center">javax.servlet.http.HttpServletResponse</td><td align="center">服务器端回应客户端的请求操作</td></tr><tr><td align="center">4</td><td align="center">session</td><td align="center">javax.servlet.http.HttpSession</td><td align="center">描述每一个用户(登录)的信息</td></tr><tr><td align="center">5</td><td align="center">application</td><td align="center">javax.servlet.ServletContext</td><td align="center">描述整个当前项目的上下文</td></tr><tr><td align="center">6</td><td align="center">config</td><td align="center">javax.servlet.ServletConfig</td><td align="center">取得默认的配置信息</td></tr><tr><td align="center">7</td><td align="center">out</td><td align="center">javax.servlet.jsp.Writer</td><td align="center">进行输出，一般不用</td></tr><tr><td align="center">8</td><td align="center">page</td><td align="center">javax.lang.Object</td><td align="center">每一个页面都属于Object子类(一般不用)</td></tr><tr><td align="center">9</td><td align="center">exception</td><td align="center">java.lang.Throwable</td><td align="center">默认情况下，所有的异常都可以由容器处理，处理方式为输出错误信息并结束程序运行</td></tr></tbody></table><p>​    通过JavaEEAPI路径可以查询到每个对象有的方法</p><p>​    <strong>注意：在这九个内置对象中，前五个内置对象是精华需要重点了解学习</strong>，但要学好JSP开发，以上内置对象需要全部记住</p><h4 id="3-四种属性范围"><a href="#3-四种属性范围" class="headerlink" title="3. 四种属性范围"></a>3. 四种属性范围</h4><p>​    四种属性范围是整个JavaWeb的核心概念，如果不清楚四种属性范围，就无法更好的理解MVC，也无法进行有效的程序开发，以及后面理解Struts、SpringMVC等概念</p><p>​    <strong>属性范围的概念</strong></p><p>​    在任何一个Web项目中都会存在多个页面，如果一个对象需要跨越多个页面后依然可以被使用，这被称为属性的保存范围，在JSP中对属性的操作提供如下三个方法。</p><ol><li><p><strong>设置属性：<code>public void setAttribute(String name,Object value)</code></strong></p><p>属性名要String类型且不允许重复(重复就会覆盖)，value是Object类型意味着可以报存所有的Java类型</p></li><li><p><strong>取得属性：<code>public Object getAttribute(String name)</code></strong></p></li><li><p><strong>删除属性：<code>public void removeAttribute(String name)</code></strong></p></li></ol><p>​    在JSP里面一共有四个对象具备以上的三个方法：pageContext、request、session、application</p><p>​    四种属性范围刚好也是对应了这四个对象</p><h4 id="4-page属性范围-pageContext"><a href="#4-page属性范围-pageContext" class="headerlink" title="4. page属性范围(pageContext)"></a>4. page属性范围(pageContext)</h4><p>​    <strong>page属性范围：对象只能够在当前的JSP页面中使用</strong></p><p>​    注意：page属性范围不是只使用page对象操作，事实上没有这个对象，我们是使用pageContext对象完成</p><p>​    范例：通过pageContext设置本页面属性</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;编写文件page.jsp&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;%&#x2F;&#x2F;设置属性pageContext.setAttribute(&quot;name&quot;,&quot;LXS&quot;);pageContext.setAttribute(&quot;this_time&quot;,new Date());%&gt;&lt;%&#x2F;&#x2F;取得属性String tname &#x3D; (String) pageContext.getAttribute(&quot;name&quot;);Date this_time &#x3D; (Date) pageContext.getAttribute(&quot;this_time&quot;);%&gt;&lt;h1&gt;姓名：&lt;%&#x3D;tname%&gt;&lt;&#x2F;h1&gt;&lt;h1&gt;时刻：&lt;%&#x3D;this_time%&gt;&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：pageContext的属性作用范围只在当前页面，如果发生跳转(不管是服务器跳转还是客户端跳转)那么pageContext所设置的属性的值不会保留到其他页面</p><h4 id="5-request属性范围-request"><a href="#5-request属性范围-request" class="headerlink" title="5. request属性范围(request)"></a>5. request属性范围(request)</h4><p>​    如果想在执行服务器跳转后依然可以取得设置的属性内容，则可以采用request属性范围</p><p>​    范例：使用request对象来传递服务器跳转的值</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;编写文件request_a.jsp&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;%&#x2F;&#x2F;设置属性request.setAttribute(&quot;name&quot;,&quot;LXS&quot;);request.setAttribute(&quot;this_time&quot;,new Date());%&gt;&#x2F;&#x2F;服务器端跳转&lt;jsp:forward page&#x3D;&quot;request.jsp&quot;&#x2F;&gt;&#x2F;&#x2F;编写文件request_b.jsp&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;%&#x2F;&#x2F;取得属性String tname &#x3D; (String) request.getAttribute(&quot;name&quot;);Date this_time &#x3D; (Date) request.getAttribute(&quot;this_time&quot;);%&gt;&lt;h1&gt;姓名：&lt;%&#x3D;tname%&gt;&lt;&#x2F;h1&gt;&lt;h1&gt;时刻：&lt;%&#x3D;this_time%&gt;&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：只有是服务器端跳转无论跳转几次，request设置的属性可以一直被保留下来</p><p>​    <strong>注意：服务器端跳转与客户端跳转的最大使用区别：服务器端跳转可以传递request属性，而客户端跳转不能传递request属性</strong></p><h4 id="6-session属性范围-session"><a href="#6-session属性范围-session" class="headerlink" title="6. session属性范围(session)"></a>6. session属性范围(session)</h4><p>​    如果不想受到跳转的类型限制，则可以继续扩大属性的保存范围，使用session范围，只要设置了一个session属性，那所有与之相关联的所有页面都可以访问。</p><p>​    范例：session对象的使用</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;编写文件session_a.jsp&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;%&#x2F;&#x2F;设置属性session.setAttribute(&quot;name&quot;,&quot;LXS&quot;);session.setAttribute(&quot;this_time&quot;,new Date());%&gt;&#x2F;&#x2F;客户端跳转&lt;a href&#x3D;&quot;session_b&quot;&gt;跳转&lt;&#x2F;a&gt;&#x2F;&#x2F;编写文件session_b.jsp&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;%&#x2F;&#x2F;取得属性String tname &#x3D; (String) session.getAttribute(&quot;name&quot;);Date this_time &#x3D; (Date) session.getAttribute(&quot;this_time&quot;);%&gt;&lt;h1&gt;姓名：&lt;%&#x3D;tname%&gt;&lt;&#x2F;h1&gt;&lt;h1&gt;时刻：&lt;%&#x3D;this_time%&gt;&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：虽然session属性范围可以包括所有的跳转页面，但如果关闭浏览器再次访问，session设置的属性会失效</p><p>​    <strong>session最简单的概念为用于客户端描述一个个用户的信息，每个用户的信息彼此独立</strong></p><h4 id="7-application属性范围-application"><a href="#7-application属性范围-application" class="headerlink" title="7. application属性范围(application)"></a>7. application属性范围(application)</h4><p>​    如果需要在浏览器关闭后，再次打开依然可以访问到我们设置的属性，那么需要将属性范围设置为application范围</p><p>​    范例：application对象的使用</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;编写文件application_a.jsp&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;%&#x2F;&#x2F;设置属性application.setAttribute(&quot;name&quot;,&quot;LXS&quot;);application.setAttribute(&quot;this_time&quot;,new Date());%&gt;&#x2F;&#x2F;编写文件application_b.jsp&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;%&#x2F;&#x2F;取得属性String tname &#x3D; (String) application.getAttribute(&quot;name&quot;);Date this_time &#x3D; (Date) application.getAttribute(&quot;this_time&quot;);%&gt;&lt;h1&gt;姓名：&lt;%&#x3D;tname%&gt;&lt;&#x2F;h1&gt;&lt;h1&gt;时刻：&lt;%&#x3D;this_time%&gt;&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：上述代码并没有写跳转语句，但当打开<code>application_a.jsp</code>再打开<code>application_b.jsp</code>，依然可以访问到设置的属性</p><p>​    <strong>注意：只要设置了此属性，那么意味着属性保存在服务器上，所有的用户都可以访问到，与是否关闭浏览器无关，但如果关闭服务器，则该设置的属性失效，即如果服务器不关闭，该设置的属性将一直存在</strong></p><h4 id="8-四种属性范围总结"><a href="#8-四种属性范围总结" class="headerlink" title="8. 四种属性范围总结"></a>8. 四种属性范围总结</h4><p>​    保存范围越大的属性，实际上占用的资源时间长，所以对于属性范围的选择几乎不会选择application范围(保存时间过长会占用服务器资源使得服务器性能下降)，剩下三种都会有使用到</p><h4 id="9-pageContext对象的进阶"><a href="#9-pageContext对象的进阶" class="headerlink" title="9. pageContext对象的进阶"></a>9. pageContext对象的进阶</h4><p>​    pageContext对象实际上可以设置上面的四种属性范围，在pageContext对应的类(<code>javax.servlet.jsp.PageContext</code>)的父类(<code>javax.servlet.jsp.JspContext</code>)中提供了另外一组<strong>重载</strong>的属性操作方法</p><ul><li><p><strong>设置属性：<code>public abstract void setAttribute(String name,Object value,int scope)</code></strong></p></li><li><p><strong>取得属性：<code>public abstract Object getAttribute(String name,int scope)</code></strong></p></li></ul><ul><li>**删除属性：<code>public abstract void removeAttribute(String name,int scope)**</code></li></ul><p>​    对于重载方法中的scope参数取值都在PageContext类里面定义</p><table><thead><tr><th align="center">scope在PageContext类中的定义</th><th align="center">类型</th><th align="center">对应数值</th></tr></thead><tbody><tr><td align="center">public static final int PAGE_SCOPE</td><td align="center">静态常量</td><td align="center">1</td></tr><tr><td align="center">public static final int REQUEST_SCOPE</td><td align="center">静态常量</td><td align="center">2</td></tr><tr><td align="center">public static final int SESSION_SCOPE</td><td align="center">静态常量</td><td align="center">3</td></tr><tr><td align="center">public static final int APPLICATION_SCOPE</td><td align="center">静态常量</td><td align="center">4</td></tr></tbody></table><p>​    范例pageContext对应方法的进阶使用</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;编写文件pageContext_a.jsp&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;%&#x2F;&#x2F;设置属性pageContext.setAttribute(&quot;name&quot;,&quot;LXS&quot;,4);pageContext.setAttribute(&quot;this_time&quot;,new Date(),4);%&gt;&#x2F;&#x2F;编写文件pageContext_b.jsp&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;%&#x2F;&#x2F;取得属性String tname &#x3D; (String) application.getAttribute(&quot;name&quot;);Date this_time &#x3D; (Date) application.getAttribute(&quot;this_time&quot;);%&gt;&lt;h1&gt;姓名：&lt;%&#x3D;tname%&gt;&lt;&#x2F;h1&gt;&lt;h1&gt;时刻：&lt;%&#x3D;this_time%&gt;&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    pageContext是一个功能强大的对象，但是这个对象只能够在JSP中使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaEE03</title>
      <link href="/2022/10/09/javaEE03/"/>
      <url>/2022/10/09/javaEE03/</url>
      
        <content type="html"><![CDATA[<h2 id="web项目编写"><a href="#web项目编写" class="headerlink" title="web项目编写"></a>web项目编写</h2><h4 id="1-Idea对Javaweb的项目创建"><a href="#1-Idea对Javaweb的项目创建" class="headerlink" title="1. Idea对Javaweb的项目创建"></a>1. Idea对Javaweb的项目创建</h4><pre><code>   1. 点击新建项目，选择`Java Enterprise`，更改项目名称，将项目模板改为`Web 应用程序`，将应用程序服务器改为自己下载的Tomcat路径，下面都不用动，点`next`   2. 这里的第三方框架暂时都是用不上，只需要在已添加项中有`Servlet`就行   3. 点击完成Javaweb项目就创建完成</code></pre><p>​    <strong>项目结构的概述</strong></p><pre><code>   1. .idea不用管他，在src中编写文件   2. 在java文件夹中编写java代码   3. 在resources文件夹中放置配置文件   4. 在webapp中放jsp文件   5. 需要的包要在pom.xml中声明</code></pre><p>​    <strong>欢迎页与列表</strong></p><p>​    在项目新建后即可运行，点击运行可以运行项目自动生成的jsp欢迎页面，但在学习过程中需要列表来显示所有页面，此时可以通过修改Tomcat中的<code>conf/web.xml</code>文件的<code>welcome-file-list</code>来更改</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//web.xml文件里的默认设置；名叫index的页面作为主页，这几个页面(不一定只有三个)都有的话显示优先级为从上到下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.htm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    可以把这串设置复制到自己项目的xml文件中，然后自己修改首次登录页面(如果项目中没有设置默认是使用Tomcat提供的xml中的设置)，<strong>如果项目中没有名叫这几个的页面，则显示列表</strong></p><h4 id="2-Javaweb的jdbc连接"><a href="#2-Javaweb的jdbc连接" class="headerlink" title="2. Javaweb的jdbc连接"></a>2. Javaweb的jdbc连接</h4><p>​    使用jsp来引入jdbc，<strong>此时mysql的驱动程序应当复制一份到Tomcat的<code>lib</code>目录下</strong></p><blockquote><p>C:\Program Files\Apache Software Foundation\Tomcat 8.5_Tomcat8new\lib</p></blockquote><p>​    否则会出现错误：数据库无法找到</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">javax.servlet.ServletException: java.lang.ClassNotFoundException: com.mysql.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    还有一种情况是url书写时发生错误，如端口号写错，则提示错误：数据库连接异常</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">javax.servlet.ServletException: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    另外，在JSP中写JDBC没有对异常有强制处理，一旦出错就是报500，因为默认情况下，所有的异常都可以由容器处理，处理方式为输出错误信息并结束程序运行</p><h4 id="3-数据检查"><a href="#3-数据检查" class="headerlink" title="3. 数据检查"></a>3. 数据检查</h4><p>​    在系统开发当中，数据的安全性检查分为两个部分</p><ul><li><p>服务器的验证：由JSP文件负责验证</p></li><li><p>客户端验证：由JavaScript完成</p></li></ul><p>​    <strong>任何一个健壮的系统这两个验证都需要编写，即两端都要编写验证</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java16</title>
      <link href="/2022/09/20/Java16/"/>
      <url>/2022/09/20/Java16/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h4 id="1-JDBC的概念"><a href="#1-JDBC的概念" class="headerlink" title="1. JDBC的概念"></a>1. JDBC的概念</h4><p>​    JDBC是使用Java语言操作关系型数据库的一套API，JDBC保证了使用同一套Java代码可以操作不同的关系型数据库</p><p>​    JDBC的本质就是一套标准接口，每一种关系型数据库需要自己定义实现类(洋气的名字叫驱动)</p><p><a href="https://imgse.com/i/vqbZBq"><img src="https://s1.ax1x.com/2022/09/09/vqbZBq.png" alt="vqbZBq.png"></a></p><h4 id="2-MySql数据库"><a href="#2-MySql数据库" class="headerlink" title="2. MySql数据库"></a>2. MySql数据库</h4><p>​    <strong>(1).MySql数据库的介绍与安装</strong></p><p>​    用于小型的项目的数据存储，大型项目(几百万的数据)需要使用Oracle数据库</p><p>​    MySql数据库一般还是使用老版本的，新版本的不稳定</p><p>​    一般配置MySql的监听端口为3306，编码方式设置为utf8</p><p>​    <strong>(2).MySql数据库的使用</strong></p><pre><code> 1. 在命令行输入mysql 2. 连接mysql数据库：mysql -u用户名 -p密码 3. 新建数据库：CREATE DATABASE Student SET UTF8; 4. 查看所有数据库：SHOW DATABASE 5. 使用数据库：USE Student 6. 创建表：CREATE TABLE Tom(建表sql语句);   7. 分页操作：查询语句后空格接`LIMIT 0,5`，表示显示查询1-5行的数据</code></pre><p>​    <strong>(3).MySql数据库的JDBC连接</strong></p><p>​    要对MySQL进行开发则必须采用JDBC连接，JDBC连接需要先导入MySQL的驱动程序，此时需要将MySQL的驱动程序复制并加载到项目中</p><h4 id="3-JDBC快速入门"><a href="#3-JDBC快速入门" class="headerlink" title="3. JDBC快速入门"></a>3. JDBC快速入门</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>​    <strong>0. 创建工程，导入驱动jar包</strong></p><p>​    <strong>1. 注册驱动</strong></p><p>​    利用反射将类加载进内存</p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Drive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>2. 获取连接</strong></p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>3. 定义SQL语句</strong></p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span>  <span class="token string">"update..."</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>4. 获取执行SQL对象</strong></p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>5. 执行SQL</strong></p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java">stml<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>6. 处理返回结果</strong></p><p>​    <strong>7. 释放资源</strong></p><h5 id="范例：数据库的简单操作"><a href="#范例：数据库的简单操作" class="headerlink" title="范例：数据库的简单操作"></a>范例：数据库的简单操作</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//0.注册驱动</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.获取连接</span><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/test"</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>name<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.定义sql语句</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"UPDATE user_table SET password =\"123456\" WHERE name = \"jack\""</span><span class="token punctuation">;</span><span class="token comment">//3.获取sql执行的对象：statement</span><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.执行sql：该方法返回的是影响的行数</span><span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.处理结果</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6.释放资源</span>stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-DriverManager-驱动管理类"><a href="#4-DriverManager-驱动管理类" class="headerlink" title="4. DriverManager(驱动管理类)"></a>4. DriverManager(驱动管理类)</h4><p>​    DriveManager的作用</p><ol><li>注册驱动</li><li>获取数据库连接</li></ol><p>​    <strong>DriverManager的重要方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public <strong>static</strong> Connection getConnection(String url, String user, String password) throws SQLException</td><td align="center">方法</td><td align="center">尝试建立到给定数据库URL的连接，url为连接路径，语法jdbc:mysql://ip地址:端口号/数据库名称?参数键值对1&amp;参数键值对2，user为数据库用户名，password为数据库连接密码</td></tr><tr><td align="center">public <strong>static</strong> void registerDriver(Driver driver) throws SQLException</td><td align="center">方法</td><td align="center">向DriverManager注册给定的驱动程序。新加载的驱动程序类应该调用方法registerDriver，以使DriverManager知道它自己。如果驱动程序当前已注册，则不采取任何操作。</td></tr></tbody></table><p>​    <strong>注意：registerDriver在使用反射引用driver类时，其使用在driver类的静态块中，即只要引用driver类，则该类就会被加载</strong></p><p>​    在mysql5之后使用反射注册驱动的那段代码可以省略不写，因为在mysql提供的jar包中有该类的字符串，其会自动加载jar包中META-INF/services/java.sql.Driver文件中的驱动类</p><p>​    在url路径中，若连接的是本机mysql服务器且默认端口为3306，则可以简写为jdbc:mysql:///数据库名称?参数键值对1&amp;参数键值对2</p><p><strong>反射键值对：useSSL</strong></p><p>​    通过设置useSSL=false可以禁用安全连接方式，解决警告提示</p><h4 id="5-Connection-数据库连接类"><a href="#5-Connection-数据库连接类" class="headerlink" title="5. Connection(数据库连接类)"></a>5. Connection(数据库连接类)</h4><p>​    Connection的作用：</p><ol><li><p>获取执行SQL的对象</p><ol start="2"><li>管理事务</li></ol></li></ol><p>​    <strong>Connection提供的获取执行SQL对象的方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Statement createStatement() throws SQLException</td><td align="center">方法</td><td align="center">创建用于向数据库发送SQL语句的Statement对象</td></tr><tr><td align="center">PreparedStatement prepareStatement(String sql) throws SQLException</td><td align="center">方法</td><td align="center">创建用于向数据库发送参数化SQL语句的PreparedStatement对象，<strong>其可以防止SQL注入</strong></td></tr></tbody></table><p>​    <strong>Connection提供的事务管理的方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void setAutoCommit(boolean autoCommit) throws SQLException</td><td align="center">方法</td><td align="center">将此连接的自动提交模式设置为给定状态。如果连接处于自动提交模式，则其所有SQL语句将作为单个事务执行和提交。否则，它的SQL语句被分组到事务中，这些事务通过调用方法提交或方法回滚而终止。默认情况下，新连接处于自动提交模式。true为自动提交事务，false为手动提交事务</td></tr><tr><td align="center">void commit() throws SQLException</td><td align="center">方法</td><td align="center">提交操作：使自上次提交/回滚以来所做的所有更改永久化，并释放此连接对象当前持有的所有数据库锁。仅当禁用自动提交模式时，才应使用此方法。</td></tr><tr><td align="center">void rollback() throws SQLException</td><td align="center">方法</td><td align="center">回滚操作：撤消当前事务中所做的所有更改，并释放此连接对象当前持有的所有数据库锁。仅当禁用自动提交模式时，才应使用此方法。<strong>一般是在catch中对事务进行回滚</strong></td></tr></tbody></table><p>​    上述三个方法，可以使得对数据库的几个操作合在一起被事务接管，即发生成功则都成功，失败则都失败，若为自动提交模式，则每一次对数据库的操作看成为一个单独的操作。</p><p>​    <strong>Connection提供的释放资源的方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void close() throws SQLException</td><td align="center">方法</td><td align="center">立即释放此Connection对象的数据库和JDBC资源，而不是等待它们自动释放。在已关闭的Connection对象上调用方法close是不行的。</td></tr></tbody></table><h4 id="6-Statement-SQL语句执行类"><a href="#6-Statement-SQL语句执行类" class="headerlink" title="6. Statement(SQL语句执行类)"></a>6. Statement(SQL语句执行类)</h4><p>​    Statement的作用</p><p>​    1. <strong>用于执行静态SQL语句并返回其生成的结果的对象。</strong>默认情况下，每个语句对象只能同时打开一个ResultSet对象。因此，如果一个ResultSet对象的读取与另一个对象的读取交错，则每个对象都必须由不同的语句对象生成。</p><p>​    Statement执行SQL语句的方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int executeUpdate(String sql) throws SQLException</td><td align="center">方法</td><td align="center">方法执行给定的SQL语句，该语句可以是INSERT、UPDATE或DELETE语句，也可以是不返回任何内容的SQL语句（如SQL DDL语句），返回值（1）SQL数据操作语言（DML）语句的行数，或（2）不返回的SQL语句，如某些DDL语句，返回值为0。<strong>注意：不能对PreparedStatement或CallableStatement调用此方法。</strong></td></tr><tr><td align="center">ResultSet executeQuery(String sql) throws SQLException</td><td align="center">方法</td><td align="center">执行要发送到数据库的sql语句，通常是静态sql SELECT语句，该语句返回单个ResultSet对象。<strong>注意：不能对PreparedStatement或CallableStatement调用此方法。</strong></td></tr></tbody></table><p>​    <strong>Statement提供的释放资源的方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void close() throws SQLException</td><td align="center">方法</td><td align="center">立即释放此Statement对象的数据库和JDBC资源，而不是等到它自动关闭时再释放。通常，一用完资源就释放资源是一种好的做法，以避免占用数据库资源。对已关闭的Statement对象调用方法close没有效果。注意：关闭Statement对象时，其当前ResultSet对象（如果存在）也将关闭</td></tr></tbody></table><h4 id="7-ResultSet-结果集类"><a href="#7-ResultSet-结果集类" class="headerlink" title="7. ResultSet(结果集类)"></a>7. ResultSet(结果集类)</h4><p>​    ResultSet说明：</p><ol><li><p>表示数据库结果集的数据表，通常通过执行查询数据库的语句生成。</p><ol start="2"><li>ResultSet对象保持指向其当前数据行的光标。最初，光标位于第一行之前。下一个方法将光标移动到下一行，因为当ResultSet对象中没有更多行时返回false，所以可以在while循环中使用它来迭代结果集。</li><li>默认的ResultSet对象是不可更新的，并且具有仅向前移动的光标。因此，只能从第一行到最后一行迭代一次。</li></ol></li></ol><p>​    ResultSet对查询结果查看的方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">boolean next() throws SQLException</td><td align="center">方法</td><td align="center">将光标从当前位置向前移动一行。结果集光标最初位于第一行之前；对该方法的第一次调用接着使第一行成为当前行；第二次调用使第二行成为当前行，以此类推。当对下一个方法的调用返回false时即光标位于最后一行之后。任何需要当前行的ResultSet方法调用都将导致抛出SQLException。</td></tr><tr><td align="center">xxxx getXxxx(String columnLabel) throws SQLException</td><td align="center">方法</td><td align="center">获取当前ResultSet光标锁定行的名叫给定字符串的列名的值(Xxxx表示任何基本数据类型)</td></tr><tr><td align="center">xxxx getXxxx(int columnIndex) throws SQLException</td><td align="center">方法</td><td align="center">获取当前ResultSet光标锁定行的第给定索引号的列的值，为空返回null(Xxxx表示任何基本数据类型)，参数columnIndex-第一列为1，第二列为2以此类推</td></tr></tbody></table><p>​    注意：第二和第三个方法的获取值要与数据库表中定义的值保持一致</p><p>​    一般可以将查询结果多个数据封装成一个对象然后再将对象放在集合类中，这样只需将集合对象给页面，页面就可以展示数据。</p><p>​    <strong>ResultSet提供的释放资源的方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">void close() throws SQLException</td><td align="center">方法</td><td align="center">立即释放此ResultSet对象的数据库和JDBC资源，对已关闭的ResultSet对象调用方法close是不行的。</td></tr></tbody></table><h4 id="8-SQL注入"><a href="#8-SQL注入" class="headerlink" title="8. SQL注入"></a>8. SQL注入</h4><p>​    <strong>SQL注入是通过对输入进行操作来修改事先定义好的SQL语句，用以达到执行代码对服务器进行攻击的方法</strong></p><p>​    在密码框输入如下代码<code>&#39;or &#39;1&#39; = &#39;1</code></p><p>​    显示登录成功</p><p>​    原因：再写登录判断的SQL语句为<code>select * from user where username=&#39;&quot;+name+&quot;&#39; and password = &#39;&quot;+pwd+&quot;&#39;;</code></p><p>​    此时由于是拼字符串，传值<code>name</code>和<code>pwd</code>此时SQL语句变为了<code>select * from user where username=&#39;ron&#39; and password =&#39;&#39; or &#39;1&#39; = &#39;1&#39;</code>，由于<code>and</code>比<code>or</code>先执行，此时SQL语句变成了恒等式。</p><h4 id="9-PreparedStatement"><a href="#9-PreparedStatement" class="headerlink" title="9. PreparedStatement"></a>9. PreparedStatement</h4><p>​    public interface <strong>PreparedStatement</strong> extends Statement</p><p>​    作用：预编译SQL语句的对象，这样做可以预防SQL注入的问题</p><h5 id="PreparedStatement的使用"><a href="#PreparedStatement的使用" class="headerlink" title="PreparedStatement的使用"></a>PreparedStatement的使用</h5><ol><li><p>通过Connection获取PreparedStatement对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SQL语句中的参数值，使用？占位符替代</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where username = ? and password = ?"</span><span class="token punctuation">;</span><span class="token comment">//通过Connection对象获取，并传入对应的sql语句</span><span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置参数值</p><p> 通过PreparedStatement对象提供的方法设置<code>？</code>的参数：<code>setXxxx(参数1，参数2)</code>：给<code>？</code>赋值</p><ul><li>Xxxx：数据类型</li><li>参数：<ul><li>参数1：<code>？</code>的位置编号，从1开始</li><li>参数2：<code>？</code>的值</li></ul></li></ul></li><li><p>通过PreparedStatement对象继承父类Statement的空参方法执行SQL</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意：不需要在传递sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h5 id="preparedStatement上述操作涉及方法的详细文档"><a href="#preparedStatement上述操作涉及方法的详细文档" class="headerlink" title="preparedStatement上述操作涉及方法的详细文档"></a>preparedStatement上述操作涉及方法的详细文档</h5><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">PreparedStatement  prepareStatement(String sql) throws SQLException</td><td align="center">方法</td><td align="center">创建用于向数据库发送参数化SQL语句的PreparedStatement对象。</td></tr><tr><td align="center">void setXxxx(int parameterIndex, Xxxx y) throws SQLException</td><td align="center">方法</td><td align="center">将SQL语句中<code>？</code>对应的值进行用y替换，parameterIndex指第几个<code>？</code>，计数从1开始</td></tr><tr><td align="center">int executeUpdate() throws SQLException</td><td align="center">方法</td><td align="center">在此PreparedStatement对象中执行SQL语句，该对象必须是SQL数据操作语言（DML）语句，如INSERT、UPDATE或DELETE；或不返回任何内容的SQL语句，如DDL语句。返回值：（1）SQL数据操作语言（DML）语句的行数，或（2）不返回任何内容的SQL语句的行计数</td></tr><tr><td align="center">ResultSet executeQuery() throws SQLException</td><td align="center">方法</td><td align="center">在此PreparedStatement对象中执行SQL查询，并返回查询生成的ResultSet对象。</td></tr></tbody></table><h5 id="PreparedStatement防止SQL注入的原因"><a href="#PreparedStatement防止SQL注入的原因" class="headerlink" title="PreparedStatement防止SQL注入的原因"></a>PreparedStatement防止SQL注入的原因</h5><p>​    如再将这段代码放入<code>&#39;or &#39;1&#39; = &#39;1</code>密码部分进行SQL注入，此时，会将这段字符串进行转义变为<code>\&#39;or \&#39;1\&#39; = \&#39;1</code>，此时就解决了SQL注入的问题</p><h5 id="PreparedStatement的预编译功能"><a href="#PreparedStatement的预编译功能" class="headerlink" title="PreparedStatement的预编译功能"></a>PreparedStatement的预编译功能</h5><ol><li><p>在获取PreparedStatement对象时，就已经将sql语句发送给mysql服务器进行检查编译</p><ol start="2"><li>如果将SQL语句的字符串每一次都是写死，那么每一次执行时都需要先检查再编译最后执行，而使用<code>？</code>替代后，同一个SQL模板传不同参数的SQL语句可以只检查和编译一次，之后只需要执行SQL就好</li><li>预编译可以使得性能更高。</li></ol></li></ol><p>​    <strong>注意：PreparedStatement的预编译功能是默认关闭的，<em>预编译功能的开启：<code>useServerPrepStmts=true</code>;这段代码属于反射键值对</em></strong></p><h5 id="PreparedStatement使用完后也需要对占用资源进行释放"><a href="#PreparedStatement使用完后也需要对占用资源进行释放" class="headerlink" title="PreparedStatement使用完后也需要对占用资源进行释放"></a>PreparedStatement使用完后也需要对占用资源进行释放</h5><h4 id="10-JDBC资源的释放"><a href="#10-JDBC资源的释放" class="headerlink" title="10. JDBC资源的释放"></a>10. JDBC资源的释放</h4><p>​    <strong>JDBC程序执行结束后，需要将与数据库进行交互的对象释放掉，通常是ResultSet,Statement,Connection</strong>。这几个对象中尤其是Connection对象是非常稀有的<br>​    将资源释放的代码一般写入到finally的代码块中。</p><p>​    <strong>注意：PreparedStatement是继承了Statement的，其继承了close方法，其也需要去手动释放</strong></p><h4 id="11-数据库连接池"><a href="#11-数据库连接池" class="headerlink" title="11. 数据库连接池"></a>11. 数据库连接池</h4><p>​    数据库连接池是个容器，负责分配管理数据库的连接</p><p>​    它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</p><p>​    释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏</p><h5 id="数据库连接池的实现-Interface-DataSource"><a href="#数据库连接池的实现-Interface-DataSource" class="headerlink" title="数据库连接池的实现(Interface DataSource)"></a>数据库连接池的实现(Interface DataSource)</h5><p>​    Java官方提供的数据库连接池标准接口，由第三方来实现该接口</p><p>​    常用的数据库连接池</p><ul><li>DBCP</li><li>C3P0</li><li><strong>Druid</strong>：阿里巴巴开发，目前学习这个</li></ul><p>​    <strong>该类中常用方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Connection getConnection() throws SQLException</td><td align="center">方法</td><td align="center">尝试与此DataSource对象表示的数据源建立连接。</td></tr></tbody></table><h5 id="Driud使用步骤"><a href="#Driud使用步骤" class="headerlink" title="Driud使用步骤"></a>Driud使用步骤</h5><ol><li>导入jar包 druid-1.1.12.jar</li><li>定义配置文件</li><li>加载配置文件</li><li>获取数据库连接池对象</li><li>获取连接</li></ol><p>​    范例：Druid的使用</p><ol><li><p>配置文件的定义druid.properties</p><pre class="line-numbers language-none"><code class="language-none">driverClassName&#x3D;com.mysql.jdbc.Driverurl&#x3D;jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称username&#x3D;rootpassword&#x3D;1234# 初始化连接数量initialSize&#x3D;5# 最大连接数maxActive&#x3D;10# 最大等待时间maxWait&#x3D;3000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>java代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token comment">//加载配置文件</span><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"配置文件绝对路径"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取连接池对象</span><span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取数据库连接Connection</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端08</title>
      <link href="/2022/04/05/%E5%89%8D%E7%AB%AF08/"/>
      <url>/2022/04/05/%E5%89%8D%E7%AB%AF08/</url>
      
        <content type="html"><![CDATA[<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h4 id="1-事件"><a href="#1-事件" class="headerlink" title="1. 事件"></a>1. 事件</h4><p>​    事件处理是整个JavaScript的核心操作</p><p>​    在页面上任何的操作都可能被称为事件源，而对每一个事件可以自定义处理操作，例如页面加载，鼠标移动等都被称为事件源</p><p>​    在JavaScript中，事件都是以<code>onXXX</code>的形式命名的</p><p>​    最基础的静态事件即在HTML标签中声明需要该事件并定义事件名要加小括号和分号，如<code>XXXX();</code>，而后在JavaScript中定义与事件名相同的函数</p><p>​    <strong>Javascript是基于对象的编程语言，所有的对象都在元素上，即每一个元素都属于一个JavaScript的对象</strong></p><h4 id="2-页面加载事件与页面卸载事件"><a href="#2-页面加载事件与页面卸载事件" class="headerlink" title="2. 页面加载事件与页面卸载事件"></a>2. 页面加载事件与页面卸载事件</h4><p>​    注意：这两个事件只能够在<code>&lt;body&gt;</code> 元素中进行处理</p><h5 id="1-页面加载事件：onload"><a href="#1-页面加载事件：onload" class="headerlink" title="(1). 页面加载事件：onload"></a>(1). 页面加载事件：onload</h5><p>​    页面加载完成后执行的动作</p><p>​    页面加载时，大致可以分为以下几个步骤：</p><p>​        1. 开始解析HTML文档结构</p><p>​        2. 加载外部样式表及JavaScript脚本</p><p>​        3. 解析执行JavaScript脚本</p><p>​        4. DOM树渲染完成</p><p>​        5. 加载未完成的外部资源（如 图片）</p><p>​        6. 页面加载成功</p><p>​    范例：<code>onload</code> 的基础使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            <span class="token keyword">function</span> <span class="token function">loadHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"欢迎来到测试页面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loadHandle();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：在使用HTML标签中要加多个事件，则在<code>;</code>继续加就可以了</p><h5 id="2-页面卸载事件：onunload"><a href="#2-页面卸载事件：onunload" class="headerlink" title="(2). 页面卸载事件：onunload"></a>(2). 页面卸载事件：onunload</h5><p>​    onunload 事件在用户退出页面时发生</p><p>​    范例：使用onunload事件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            <span class="token keyword">function</span> <span class="token function">unloadHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">onunload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unloadHandle();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：这个代码为实现，应该是浏览器的问题</p><h4 id="3-鼠标事件"><a href="#3-鼠标事件" class="headerlink" title="3. 鼠标事件"></a>3. 鼠标事件</h4><table><thead><tr><th align="center"><strong>事件类型</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">click</td><td align="center">单击鼠标左键时发生，如果右键也按下则不会发生。当用户的焦点在按钮上，并按了回车键时，同样会触发事件</td></tr><tr><td align="center">dblclick</td><td align="center">双击鼠标左键时发生，如果右键也按下则不会发生</td></tr><tr><td align="center">mousedown</td><td align="center">单击任意一个鼠标按钮时发生</td></tr><tr><td align="center">mouseout</td><td align="center">鼠标指针位于元素上，且将要移出元素的边界时发生</td></tr><tr><td align="center">mouseover</td><td align="center">鼠标指针移入元素时触发</td></tr><tr><td align="center">mouseup</td><td align="center">松开任意一个鼠标按钮时发生</td></tr><tr><td align="center">mousemove</td><td align="center">鼠标在某个元素上移动时发生</td></tr></tbody></table><p>​    范例：使用单击点击事件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    提升：鼠标经过表格变色</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">            <span class="token selector">.table1</span><span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>                <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>                <span class="token property">background-color</span><span class="token punctuation">:</span> #f2f2f2<span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>            <span class="token selector">td</span><span class="token punctuation">&#123;</span>                <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            <span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span>color</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                obj<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> color<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table1<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10px<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">onmousemove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change(this,<span class="token punctuation">'</span>white<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">onmousemove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change(this,<span class="token punctuation">'</span>white<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">onmousemove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>change(this,<span class="token punctuation">'</span>white<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>李四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：bgcolor是HTML，bgColor是JavaScript</strong></p><h4 id="4-动态设置事件"><a href="#4-动态设置事件" class="headerlink" title="4. 动态设置事件"></a>4. 动态设置事件</h4><p>​    在JavaScript中，事件的绑定除了在元素上使用<code>onXXX</code> 静态的定义之外，还可以动态的设置</p><h5 id="1-动态设置事件的全过程"><a href="#1-动态设置事件的全过程" class="headerlink" title="(1).动态设置事件的全过程"></a>(1).动态设置事件的全过程</h5><p>​    范例：使用onload在页面加载时对事件进行处理</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"事件触发！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//window为JS的内置对象</span>            window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//匿名函数</span>                <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：所有的动态设置的事件都可以在onload里面进行动态配置，但此时需要取得明确的元素对象，可以使用<code>document.getElementById(元素ID)</code> 的操作方式取得元素对象，此时该方式应该写在onload里面</strong></p><p>​    注意：id是整个JavaScript的操作核心所在，必须存在</p><p>​    <strong>然后通过使用<code>元素ID赋予的变量.addEventListener(事件类型，处理函数名称，触发时机)</code> 对该元素进行动态配置事件，<em>事件类型要加双引号，处理函数名称后面不需要括号，触发时机一般设置为false表示在事件的触发过程进行处理，阻止事件冒泡</em>，其也要写在onload里面</strong></p><p>​    动态设置操作事件的好处在于HTML代码不会和JavaScript代码混合在一起</p><h5 id="2-范例：图片的轮转"><a href="#2-范例：图片的轮转" class="headerlink" title="(2).范例：图片的轮转"></a>(2).范例：图片的轮转</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">            <span class="token selector">img</span><span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 598px<span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">div</span><span class="token punctuation">&#123;</span>                <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">button</span><span class="token punctuation">&#123;</span>                <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            <span class="token keyword">var</span> imges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"img/01.jpg"</span><span class="token punctuation">,</span><span class="token string">"img/02.jpg"</span><span class="token punctuation">,</span><span class="token string">"img/03.jpg"</span><span class="token punctuation">,</span><span class="token string">"img/04.jpg"</span><span class="token punctuation">,</span><span class="token string">"img/05.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//匿名函数</span>                <span class="token keyword">var</span> pic <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"pic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> next <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> up <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"up"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                next<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">>=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                     pic<span class="token punctuation">.</span>src <span class="token operator">=</span> imges<span class="token punctuation">[</span><span class="token operator">++</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>               up<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        index <span class="token operator">=</span> imges<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    pic<span class="token punctuation">.</span>src <span class="token operator">=</span> imges<span class="token punctuation">[</span><span class="token operator">--</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pic<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/01.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一张<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>next<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一张<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-innerHTML"><a href="#5-innerHTML" class="headerlink" title="5. innerHTML"></a>5. innerHTML</h4><p>​    JavaScript可使用<code>document.getElementById(id).innerHTML = “新内容”</code>来修改id元素内的HTML内容</p><p>​    范例：使用innerHTML</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">           <span class="token keyword">function</span> <span class="token function">clickb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"修改后的内容"</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>初始内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clickb();<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击修改内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>innerHTML和document.write的区别</strong></p><pre><code>1. document.write：是直接写入到页面的内容流，如果在写之前没有调用document.open, 浏览器会自动调用open。每次写完关闭之后重新调用该函数，会导致网页内容全部被重写 2. innerHTML：是DOM页面元素的一个属性，代表该元素的html内容。（获取div里面的内容 ，修改内容）你可以精确到某一个具体的元素来进行更改，其不会导致页面全部重绘</code></pre><h4 id="6-时钟"><a href="#6-时钟" class="headerlink" title="6. 时钟"></a>6. 时钟</h4><p>​    在JavaScript中，Date对象用来表示日期和时间</p><p>​    范例：获取时间</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">           <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    在JavaScript中，提供<code>setTimeout(函数，时间-毫秒)</code>函数，该函数是指在指定时间后执行一次指定函数，常用作定时器</p><p>​    范例：实现页面时钟</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> date<span class="token punctuation">;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//过一秒执行该函数</span>        <span class="token punctuation">&#125;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：此时JavaScript代码放在body后面，如果放前面就无法显示</p><p>​    <strong>JavaScript放在head和放在body后的区别</strong></p><pre><code>1. 放在head中：需调用才执行的脚本或事件触发执行的脚本放在HTML的head部分中。当你把脚本放在head部分中时，可以保证脚本在任何调用之前被加载 2. 放在body后：当页面被加载时立即执行的脚本放在HTML的body部分。放在body部分的脚本通常被用来生成页面的内容。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言函数补充</title>
      <link href="/2022/03/28/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E8%A1%A5%E5%85%85/"/>
      <url>/2022/03/28/C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言中实现数据结构的常用函数"><a href="#C语言中实现数据结构的常用函数" class="headerlink" title="C语言中实现数据结构的常用函数"></a>C语言中实现数据结构的常用函数</h2><h4 id="1-malloc-函数"><a href="#1-malloc-函数" class="headerlink" title="1. malloc()函数"></a>1. malloc()函数</h4><p>​    头文件：#include &lt;malloc.h&gt; 或 #include &lt;alloc.h&gt; (注意：alloc.h 与 malloc.h 的内容是完全一致的)</p><p>​    功能：分配长度为num_bytes字节的内存块</p><p>​    说明：如果分配成功则返回指向被分配内存的指针，<strong>否则返回空指针NULL</strong></p><p>​    当内存不再使用时，应使用free()函数将内存块释放</p><h4 id="2-exit-函数"><a href="#2-exit-函数" class="headerlink" title="2. exit()函数"></a>2. exit()函数</h4><p>​    所在头文件：stdlib.h<br>​    功 能: 关闭所有文件，终止正在执行的进程。<br>​    exit(1)表示异常退出.这个1是返回给操作系统的。<br>​    exit(x)（x不为0）都表示异常退出<br>​    exit(0)表示正常退出<br>​    exit()的参数会被传递给一些操作系统，包括UNIX,Linux,和MS DOS，以供其他程序使用</p><p>​    <em>注意：return是函数的退出(返回)；exit是进程的退出，return是语言级别的，它表示了调用堆栈的返回；而exit是系统调用级别的，它表示了一个进程的结束</em></p><h4 id="3-return-函数的使用"><a href="#3-return-函数的使用" class="headerlink" title="3. return()函数的使用"></a>3. return()函数的使用</h4><p>​    即使返回值为void的时，最好可以写为</p><pre class="line-numbers language-none"><code class="language-none">return;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    可以有效的告诉别人这个函数已经结束了，不写的话可能别人不知道你的函数已经终止了</p><p>​    <strong>注意：如果函数需要有两个或多个返回值，需要使用指针来帮助存储</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构02</title>
      <link href="/2022/03/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8402/"/>
      <url>/2022/03/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8402/</url>
      
        <content type="html"><![CDATA[<h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><h4 id="1-线性结构"><a href="#1-线性结构" class="headerlink" title="1. 线性结构"></a>1. 线性结构</h4><p>​    把所有的结点(类似数组的元素，逻辑上独立的个体)用一根线穿起来</p><p>​    <strong>分类</strong></p><ul><li>连续存储【数组】</li><li>离散存储【链表】</li></ul><p>​    <strong>应用</strong></p><ul><li>栈</li><li>队列</li></ul><h4 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组"></a>2. 数组</h4><p>​    元素类型相同，大小相等</p><p>​    数组的优缺点： </p><h4 id="3-实现动态数组以及其相关操作函数"><a href="#3-实现动态数组以及其相关操作函数" class="headerlink" title="3. 实现动态数组以及其相关操作函数"></a>3. 实现动态数组以及其相关操作函数</h4><h5 id="1-动态数组的基础设置"><a href="#1-动态数组的基础设置" class="headerlink" title="(1). 动态数组的基础设置"></a>(1). 动态数组的基础设置</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> <span class="token comment">//包含了exit()函数</span></span><span class="token keyword">struct</span> <span class="token class-name">Arr</span><span class="token punctuation">&#123;</span><span class="token comment">//设定数组的数据类型</span>    <span class="token keyword">int</span> <span class="token operator">*</span> pBase<span class="token punctuation">;</span><span class="token comment">//存储数组第一个元素的地址</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment">//数组所能容纳的最大元素的个数</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token comment">//当前数组有效元素的个数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span> arr<span class="token punctuation">;</span><span class="token comment">//定义数组指针，未初始化</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-动态数组的初始化函数"><a href="#2-动态数组的初始化函数" class="headerlink" title="(2). 动态数组的初始化函数"></a>(2). 动态数组的初始化函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//传需要初始化的数组的指针和需要创建的大小</span>    <span class="token punctuation">(</span><span class="token operator">*</span>pArr<span class="token punctuation">)</span><span class="token punctuation">.</span>pBase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token operator">==</span> pArr<span class="token operator">-></span>pBase<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态内存分配失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        pArr<span class="token operator">-></span>len <span class="token operator">=</span> length<span class="token punctuation">;</span>        pArr<span class="token operator">-></span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-动态数组的输出函数"><a href="#3-动态数组的输出函数" class="headerlink" title="(3). 动态数组的输出函数"></a>(3). 动态数组的输出函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">show_arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span>pArr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_empty</span><span class="token punctuation">(</span>pArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组为空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pArr<span class="token operator">-></span>cnt <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-动态数组是否为空的判断函数"><a href="#4-动态数组是否为空的判断函数" class="headerlink" title="(4). 动态数组是否为空的判断函数"></a>(4). 动态数组是否为空的判断函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span> pArr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> pArr<span class="token operator">-></span>cnt<span class="token punctuation">)</span>        <span class="token keyword">return</span> ture<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-向动态数组中追加元素的函数"><a href="#5-向动态数组中追加元素的函数" class="headerlink" title="(5). 向动态数组中追加元素的函数"></a>(5). 向动态数组中追加元素的函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">append_arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span> pArr<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//满返回false</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_full</span><span class="token punctuation">(</span>pArr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token comment">//不满时追加</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pArr<span class="token operator">-></span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">(</span>pArr<span class="token operator">-></span>cnt<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-动态数组是否为满的判断函数"><a href="#6-动态数组是否为满的判断函数" class="headerlink" title="(6). 动态数组是否为满的判断函数"></a>(6). 动态数组是否为满的判断函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">is_full</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span> pArr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pArr<span class="token operator">-></span>cnt <span class="token operator">==</span> pArr<span class="token operator">-></span>len<span class="token punctuation">)</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-向动态数组中特定位置插入元素的函数"><a href="#7-向动态数组中特定位置插入元素的函数" class="headerlink" title="(7). 向动态数组中特定位置插入元素的函数"></a>(7). 向动态数组中特定位置插入元素的函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">insert_arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span><span class="token operator">*</span> pArr<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//指定pos的值从1开始</span><span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_full</span><span class="token punctuation">(</span>pArr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> pos<span class="token operator">></span>pArr<span class="token operator">-></span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token comment">//这个for循环是健壮的，如果满了是不会执行的</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>pArr<span class="token operator">-></span>cnt<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">>=</span>pos<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">(</span>pArr<span class="token operator">-></span>cnt<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-从动态数组某个位置删除元素并返回的函数"><a href="#8-从动态数组某个位置删除元素并返回的函数" class="headerlink" title="(8).从动态数组某个位置删除元素并返回的函数"></a>(8).从动态数组某个位置删除元素并返回的函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">delete_arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span> pArr <span class="token punctuation">,</span> <span class="token keyword">int</span> pos <span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> pVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_empty</span><span class="token punctuation">(</span>pArr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> pos<span class="token operator">></span>pArr<span class="token operator">-></span>cnt<span class="token punctuation">)</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token operator">*</span>pVal <span class="token operator">=</span> pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>pos <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pArr<span class="token operator">-></span>cnt <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pArr<span class="token operator">-></span>cnt<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9-把动态数组倒置的函数"><a href="#9-把动态数组倒置的函数" class="headerlink" title="(9). 把动态数组倒置的函数"></a>(9). 把动态数组倒置的函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">inversion_arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span> pArr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> pArr<span class="token operator">-></span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> pArr<span class="token operator">-></span>pBAse<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token operator">--</span>j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-对动态数组进行排序的函数"><a href="#10-对动态数组进行排序的函数" class="headerlink" title="(10). 对动态数组进行排序的函数"></a>(10). 对动态数组进行排序的函数</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//第一个先和所有的比，比完之后留下最小的数，然后再比第二个以此类推</span><span class="token keyword">void</span> <span class="token function">sort_arr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Arr</span> <span class="token operator">*</span> pArr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pArr<span class="token operator">-></span>cnt <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;</span>pArr<span class="token operator">-></span>cnt <span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                t <span class="token operator">=</span> pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                pArr<span class="token operator">-></span>pBase<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-可以自行扩展的函数"><a href="#4-可以自行扩展的函数" class="headerlink" title="4. 可以自行扩展的函数"></a>4. 可以自行扩展的函数</h4><ul><li>查找数组中是否含有某元素（find_val_arr()）</li><li>删除数组中所有的元素（deleteAll()）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端07</title>
      <link href="/2022/03/24/%E5%89%8D%E7%AB%AF07/"/>
      <url>/2022/03/24/%E5%89%8D%E7%AB%AF07/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h2><h4 id="1-JavaScript简介"><a href="#1-JavaScript简介" class="headerlink" title="1. JavaScript简介"></a>1. JavaScript简介</h4><p>​    <strong>JavaScript是一种基于对象的编程语言，所有的对象已经由浏览器提供好了</strong>；而Java是属于面向对象语言，面向对象语言是强调类的设计</p><p>​    JavaScript和Java没有本质关系，JavaScript的前身称为LiveScript，后来由于Java在浏览器技术端的发展，后来更名为JavaScript，最新的叫法称为EcmaScript</p><p>​    后来发展超出了JavaScript的预期，它后期开始模拟面向对象编程，可以进行服务器端编程(即Node.js)</p><h4 id="2-JavaScript的使用"><a href="#2-JavaScript的使用" class="headerlink" title="2. JavaScript的使用"></a>2. JavaScript的使用</h4><p>​    JavaScript的基础语法和Java很相似，JavaScript是嵌入在HTML语法之中的编程语言，可以使用”<code>&lt;script&gt;</code> “标记内进行使用，这样就可以实现动态页面的操作效果(前台页面)</p><p>​    范例：第一个JavaScript小程序</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//新建一个html文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//弹框hello world</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：<code>type=&quot;text/javascript&quot;</code>此处表示的是使用JavaScript脚本语言，而也可以更换为VBScript、ColdFusion脚本语言，具体看你所要使用的脚本语言</p><h4 id="3-JavaScript文件的导入"><a href="#3-JavaScript文件的导入" class="headerlink" title="3. JavaScript文件的导入"></a>3. JavaScript文件的导入</h4><p>​    JavaScript可以嵌入到HTML文件中使用，但是实际开发过程中，JS的代码是很多的，如果将JS代码写在HTML页面中，就会非常难以维护</p><p>​    所以可以单独建立一个<code>*.js</code>的文件，将JavaScript代码写入，然后再将需要的<code>*.js</code>文件进行导入</p><p>​    范例：通过src属性导入js文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//导入js文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/demo.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-JavaScript基础语法"><a href="#4-JavaScript基础语法" class="headerlink" title="4. JavaScript基础语法"></a>4. JavaScript基础语法</h4><p>​    JavaScript语法上和Java语法非常类似，除了一些关键字不同之外几乎没什么区别</p><h5 id="1-document-write-方法"><a href="#1-document-write-方法" class="headerlink" title="(1).document.write()方法"></a>(1).<code>document.write()</code>方法</h5><p>​    JavaScript里使用“<code>document.write()</code>”，其可以输出HTML代码；其语法上的使用等同于Java的“<code>system.out.println()</code>”</p><p>​    “<code>document.write()</code>”可以控制HTML代码的输出(可以写标签)</p><p>​    范例：使用“<code>document.write()</code>”输出HTML</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>hello&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    注意：使用js输出页面的话，代码会在原先HTML代码所写的页面之上，所以不会使用这类函数来实现内容输出，以前应该是用这个函数来调试的，现在被淘汰了，用的是下面这个</p><h5 id="2-console-log-方法"><a href="#2-console-log-方法" class="headerlink" title="(2). console.log()方法"></a>(2). <code>console.log()</code>方法</h5><p>​    实现信息的后台输出，通过使用这个方法可以对写的代码进行调试</p><p>​    范例：使用<code>console.log()</code>方法</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是后台输出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    在浏览器中，按下F12进入调试控制台，可以在console(控制台)那里看到输出</p><h4 id="5-定义变量"><a href="#5-定义变量" class="headerlink" title="5. 定义变量"></a>5. 定义变量</h4><p>​    在JavaScript中定义变量的格式没有太严格的要求，所有的变量只需要一个<code>var</code>关键字定义即可，至于变量的具体类型是根据为其赋值的结果来确定的</p><h5 id="1-typeof关键字"><a href="#1-typeof关键字" class="headerlink" title="(1). typeof关键字"></a>(1). typeof关键字</h5><p>​    在JavaScript中，对于未知的变量可以使用</p><blockquote><p>typeof 变量名</p></blockquote><p>​    来确定变量的类型，使用上面两种输出方法输出查看即可</p><h5 id="2-undefined类型"><a href="#2-undefined类型" class="headerlink" title="(2). undefined类型"></a>(2). <code>undefined</code>类型</h5><p>​    如果使用var但是不予给其赋值，那么它的类型就为<code>undefined</code>类型，这个类型是可以通过if语句判断的</p><h5 id="3-if-语句"><a href="#3-if-语句" class="headerlink" title="(3). if()语句"></a>(3). if()语句</h5><p>​    JavaScript的if语句中的判断内容不像Java那样严格，可以使用变量直接判断(和C语言类似)，如果变量类型为<code>undefined</code>，在if语句中为假</p><blockquote><p>if(num);  //其中num变量为undefined类型，判断结果为false</p></blockquote><h5 id="4-单引号和双引号同义"><a href="#4-单引号和双引号同义" class="headerlink" title="(4). 单引号和双引号同义"></a>(4). 单引号和双引号同义</h5><p>​    在JavaScript中，变量不管是用单引号赋值还是双引号进行赋值，获得变量的类型都为<code>String</code>类型；即单引号或双引号得到的都是字符串，<strong>JavaScript对于字符串的操作函数和Java是类似的操作</strong></p><p>​    范例：对字符串进行拆分</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"hello wold !"</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按空格拆</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length <span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>"</span><span class="token operator">+</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/h1>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    此时result的类型为object类型，拆出来的元素都为String类型</p><p>​    <strong>注意：JavaScript中的字符串比较只提供“==”这一种操作</strong></p><h5 id="5-while循环、switch等操作与Java的结构很类似"><a href="#5-while循环、switch等操作与Java的结构很类似" class="headerlink" title="(5). while循环、switch等操作与Java的结构很类似"></a>(5). while循环、switch等操作与Java的结构很类似</h5><h5 id="6-数组"><a href="#6-数组" class="headerlink" title="(6). 数组"></a>(6). 数组</h5><p>​    在JavaScript中的数组本身是以一个对象的形式出现，所以数组的创建需要使用关键字new完成</p><p>​    范例：定义数组</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//数组的动态初始化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    ressult<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>//数组的静态初始化<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：在JavaScript中的数组元素语法没有严格要求，其定义的数组长度上是没有限制的，其数组本身就为动态数组，而数组的元素可以是任意的</p><p>​    可以看到从数组的本质上来说，虽然和Java类似，但是要比Java的数组功能强大，只不过很少会出现这种要直接定义数组的操作</p><h5 id="7-全局变量"><a href="#7-全局变量" class="headerlink" title="(7).全局变量"></a>(7).全局变量</h5><p>​    在JavaScript中，定义变量时，可以不使用var进行定义，直接写，那这样弄出来的变量从语法上来说，属于全局变量(几乎没用)</p><h4 id="6-定义函数"><a href="#6-定义函数" class="headerlink" title="6. 定义函数"></a>6. 定义函数</h4><p>​    JavaScript中定义函数的基本语法</p><pre class="line-numbers language-none"><code class="language-none">function 参数名称(参数)&#123;&#x2F;&#x2F;不需要声明返回值类型return 返回值;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    注意：参数可以不写类型</p><p>​    范例：实现加法操作</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：在Java中对语法有严格限制，定义多少个参数，函数就只能引用几个参数，但JavaScript没有严格语法限制，</p><p>​    像当前程序如果只传一个参数，只能获得一个NaN(不是一个数字)</p><p>​    此时可以通过<code>函数名称.arguments</code>来修改程序，其表示取得函数的参数内容，返回一个数组，然后通过length，查看长度来修改</p><p>​    程序：修改当前程序</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token keyword">return</span> <span class="token string">"不能完成的操作"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：此时程序拥有了健壮性，但真实情况不可能允许这样写代码，所以应该自己遵守语法严格，怎么定义怎么使用</p><h4 id="7-JavaScript的面向对象"><a href="#7-JavaScript的面向对象" class="headerlink" title="7. JavaScript的面向对象"></a>7. JavaScript的面向对象</h4><p>​    JavaScript原本是属于基于对象编程的语言，但后期人们希望JavaScript可以支持面向对象的编程，但其本身不是面向对象编程，于是就利用函数模拟面向对象编程</p><p>​    范例：类与对象的使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span>price</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//类</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//prototype表示对原生功能的扩展</span>    <span class="token class-name">Book</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端06</title>
      <link href="/2022/02/28/%E5%89%8D%E7%AB%AF06/"/>
      <url>/2022/02/28/%E5%89%8D%E7%AB%AF06/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS3-0特性"><a href="#CSS3-0特性" class="headerlink" title="CSS3.0特性"></a>CSS3.0特性</h2><h4 id="1-背景图片大小设定-background-size"><a href="#1-背景图片大小设定-background-size" class="headerlink" title="1. 背景图片大小设定(background-size)"></a>1. 背景图片大小设定(background-size)</h4><p>​    通过使用<code>background-size</code> 来规定背景图片的尺寸</p><p>​    background-size要写在background-image后面，否则background-size不会生效</p><p>​    <code>background-size</code> 的值有：</p><ul><li>background-size：contain; //背景成比例，按照图片最大边进行适配，图片完全显示在盒子里，少的部分出现白边</li><li>background-size ：cover; // 背景图成比例，按照图片最小边进行适配，多余的裁切</li><li>background-size ：100px 100px; // 调整图片到指定大小；</li><li>background-size ：100%; 会按容器比例撑满，导致图片失真。</li></ul><h4 id="2-背景透明颜色-rgba"><a href="#2-背景透明颜色-rgba" class="headerlink" title="2. 背景透明颜色(rgba)"></a>2. 背景透明颜色(rgba)</h4><p>​    通过使用<code>rgba(xx,xx,xx,xx,xx)</code>来设置，其中前三项与<code>rgb(xx,xx,xx)</code>一样为红绿蓝三种原色，后面的一项规定了透明度(alpha)，alpha参数是介于<code>0.0(完全透明)~1.0(完全不透明之间)</code></p><h4 id="3-图像的透明-opacity"><a href="#3-图像的透明-opacity" class="headerlink" title="3. 图像的透明(opacity)"></a>3. 图像的透明(opacity)</h4><p>​    通过使用<code>opacity</code>参数来设定图像的透明度，<code>opacity</code>参数是介于<code>0.0(完全透明)~1.0(完全不透明之间)</code></p><p>​    opacity在使用上应用于使用该属性的盒子内部的前景色、后景色、图片等，往往造成误伤，很多时候我们需要背景色透明度，而使用opacity则会导致文字颜色跟随改变</p><p>​    <strong>注意：opacity会继承父元素的opacity属性,而RGBA设置的元素的后代不会继承该属性及属性值。</strong></p><h4 id="4-颜色的渐变"><a href="#4-颜色的渐变" class="headerlink" title="4. 颜色的渐变"></a>4. 颜色的渐变</h4><p>​    通过使用<code>background-image:linear-gradient(Cdeg,#A 20%,#B 90%)</code>来设置颜色渐变，由A颜色渐变到B颜色，C表示角度，未设置角度时，则默认未180deg(从上到下)，设置角度，则0deg为竖直向上，然后顺时针旋转.后面的百分号为前20%都为A颜色，而后渐变，到90%到最后全为B色，如果设置满了不会有渐变效果，即全为纯色，注意：可以设置多个颜色参与渐变</p><h4 id="5-个性边框"><a href="#5-个性边框" class="headerlink" title="5. 个性边框"></a>5. 个性边框</h4><h5 id="1-圆角-Border-radius"><a href="#1-圆角-Border-radius" class="headerlink" title="(1). 圆角(Border-radius)"></a>(1). 圆角(Border-radius)</h5><p>​    通过使用<code>Border-radius</code>属性来设置边框的圆角度，可以使用<code>px</code>、<code>%</code>、<code>em</code>来表示数值</p><ul><li><p>仅设置一个值</p><p>​    设置一个数值，即对元素的四个边角设置统一的圆角弧度</p><p>​    一般用作设置按钮或者获得圆形(<code>Border-radius</code>为正方形一半<code>px</code>值时即可获得)</p></li><li><p>设置四个方向的值</p><p>​    border-radius属性其实是border-top-left-radius、border-top-right-radius、border-bottom-right-radius、border-bottom-left-radius四个属性的简写模式</p><p>​    不同于padding和margin的“上、右、下、左”的顺序，border-radius采用的是左上角、右上角、右下角、左下角的顺序</p><p>​    通过设置四个数值可以更加精确获得需要的形状</p></li></ul><h5 id="2-阴影"><a href="#2-阴影" class="headerlink" title="(2). 阴影"></a>(2). 阴影</h5><p>​    在CSS3中，使用<code>box-shadow</code>来给方框添加阴影</p><p><strong>语法</strong></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span> offset-x offset-y blur spread color inset<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数解释：</strong></p><ul><li>offset-x：必需，取值正负都可。offset-x水平阴影的位置。</li><li>offset-y：必需，取值正负都可。offset-y垂直阴影的位置。</li><li>blur:可选，只能取正值。blur-radius阴影模糊半径，0即无模糊效果，值越大阴影边缘越模糊。</li><li>spread：可选，取值正负都可。spread代表阴影的周长向四周扩展的尺寸，正值，阴影扩大，负值阴影缩小。</li><li>color:可选。阴影的颜色。如果不设置，浏览器会取默认颜色，通常是黑色，但各浏览器默认颜色有差异，建议不要省略。可以是rgb(250,0,0)，也可以是有透明值的rgba(250,0,0,0.5)。</li><li>inset:可选。关键字，将外部投影(默认outset)改为内部投影。inset 阴影在背景之上，内容之下</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML+CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端05</title>
      <link href="/2022/02/28/%E5%89%8D%E7%AB%AF05/"/>
      <url>/2022/02/28/%E5%89%8D%E7%AB%AF05/</url>
      
        <content type="html"><![CDATA[<h2 id="DIV-CSS布局"><a href="#DIV-CSS布局" class="headerlink" title="DIV+CSS布局"></a>DIV+CSS布局</h2><h4 id="1-块元素和行内元素的区别"><a href="#1-块元素和行内元素的区别" class="headerlink" title="1. 块元素和行内元素的区别"></a>1. 块元素和行内元素的区别</h4><p>​    块元素和行内元素本质上是html规范中的概念</p><ul><li><p>块(block)元素的特点</p><ul><li>总是在新行上开始</li><li>高度和行高以及外边距和内边距都可以控制</li><li>宽度缺省是它的容器的100%，除非设定一个宽度</li><li>它可以容纳行内元素和其他块元素</li></ul></li><li><p>行内(inline)元素的特点</p><ul><li>和其他元素都在一行上</li><li>高，行高以及外边距和内边距不可改变</li><li>宽度就是它的文字或图片的宽度，不可改变</li><li>行内元素只能容纳文本或者其他行内元素</li></ul></li></ul><p>​    <strong>注意：一般情况下，做布局使用块元素，在一行的内容使用行内元素</strong></p><h4 id="2-常见的块元素"><a href="#2-常见的块元素" class="headerlink" title="2. 常见的块元素"></a>2. 常见的块元素</h4><ul><li>div</li><li>dl</li><li>form</li><li>h1~h6</li><li>hr</li></ul><h4 id="4-CSS盒子模型"><a href="#4-CSS盒子模型" class="headerlink" title="4. CSS盒子模型"></a>4. CSS盒子模型</h4><p>​    盒子模型是CSS的基石之一，在HTML页面上的每一个元素都被浏览器看成是一个矩形的盒子，这个盒子由元素的内容、填充、边框、边界组成</p><p>​    网页就是由许多个盒子通过不同的排列方式堆积而成，早期是使用表格做布局，现在使用的是DIV+CSS布局</p><p>​    <strong>盒子模型示意图</strong></p><p><a href="https://imgtu.com/i/HDOcKs"><img src="https://s4.ax1x.com/2022/02/13/HDOcKs.png" alt="HDOcKs.png"></a></p><p>​    注意：默认情况下，盒子边框是无，背景色是透明，所以在默认情况下看不到盒子，</p><h4 id="5-盒子模型详细介绍"><a href="#5-盒子模型详细介绍" class="headerlink" title="5. 盒子模型详细介绍"></a>5. 盒子模型详细介绍</h4><p>​    标准盒子模型示意图</p><p><a href="https://imgtu.com/i/bmoaIe"><img src="https://s4.ax1x.com/2022/02/27/bmoaIe.png" alt="bmoaIe.png"></a></p><p>​    在盒子模型中，可以单独设定任何一个元素，也可以组合起来按照上、右、下、左的顺序进行设定</p><p>​    盒子模型的背景颜色范围为border里面</p><p>​    <strong>元素盒子大小的计算</strong></p><p>​    一个元素的实际宽度=左边界 + 左边框 + 左填充 + 内容宽度 + 右填充 + 右边框 + 右边界</p><p>​    一个元素的实际高度=上边界 + 上边框 + 上填充 + 内容高度 + 下填充 + 下边框 + 下边界</p><h4 id="6-CSS盒子嵌套"><a href="#6-CSS盒子嵌套" class="headerlink" title="6. CSS盒子嵌套"></a>6. CSS盒子嵌套</h4><p>​    两个盒子相互嵌套是用大盒子的content来包裹小盒子</p><p>​    在一个盒子中嵌套一个盒子，那么两个盒子边框之间的距离等于外面盒子的填充值 + 里面盒子的边界值</p><p>​    <strong>盒子模型的特性</strong></p><ul><li>边界值margin可为负，填充padding不可为负</li><li>边框border默认值为0，即不显示</li><li>盒子模型只能设置两类颜色：边框颜色和背景颜色</li></ul><p>​    <strong>盒子模型属性值的简写形式</strong></p><ul><li>给出一个属性值：表示上右下左设置的全部值都为它</li><li>给出两个属性值：前者表示上下边框的属性，后者表示左右边框的属性</li><li>给出三个属性值：前者表示上边框的属性，中间的数值表示左右边框的属性，后者表示下边框的属性</li><li>给出四个属性值：依次表示上右下左的属性</li></ul><h4 id="7-浏览器的默认值"><a href="#7-浏览器的默认值" class="headerlink" title="7. 浏览器的默认值"></a>7. 浏览器的默认值</h4><p>​    在浏览器中，本身默认会自己设置一定的margin值和padding值</p><p>​    要取消掉浏览器的默认值，则可以</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    上段代码就是手工初始化CSS</p><h4 id="8-display属性和实例"><a href="#8-display属性和实例" class="headerlink" title="8. display属性和实例"></a>8. display属性和实例</h4><h5 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h5><p>​    行内元素在浏览器中只能得到一行高度的空间，行高由<code>line-height</code> 属性(像素或百分比为单位)决定，如果没有设置该属性，则为内容的默认高度</p><p>​    <strong>行高示意图</strong></p><p><a href="https://imgtu.com/i/bntJ6x"><img src="https://s4.ax1x.com/2022/02/27/bntJ6x.png" alt="bntJ6x.png"></a></p><p>​    注意：<code>background-color</code> 的范围只在<code>font-size</code>的区域</p><p>​    <code>#b3d4fc</code>这个颜色好看</p><h5 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h5><p>​    通过display属性可控制元素是以行内元素显示还是以块级元素显示，或者不显示，<strong>即对元素进行转换</strong></p><ul><li>display:block 当前元素以块级元素显示</li><li>display:inline 当前元素以行内元素显示</li><li>display:none 当前元素隐藏，浏览器会完全忽略这个元素(不是删除是不显示)，一般使用在下拉菜单中</li><li>display:inline-block 当前元素既可以控制宽高，又可以横向排列</li></ul><h4 id="9-浮动与浮动清除"><a href="#9-浮动与浮动清除" class="headerlink" title="9.浮动与浮动清除"></a>9.浮动与浮动清除</h4><p>​    浮动主要是排版使用，可以使得原本2D的网页设计变成3D</p><p>​     浮动可以理解为让某个div元素脱离标准流，漂浮在标准流之上，和标准流不是一个层次</p><h5 id="浮动的设置-对于要浮动的盒子设置"><a href="#浮动的设置-对于要浮动的盒子设置" class="headerlink" title="浮动的设置(对于要浮动的盒子设置)"></a>浮动的设置(对于要浮动的盒子设置)</h5><p>​    CSS中使用<code>float</code> 属性来控制浮动，其默认值为<code>none</code> ，如果将<code>float</code> 属性设置为<code>left</code> 或者<code>right</code> ，元素就会向左侧或者右侧靠紧，同时盒子宽度不再伸展，没设置宽度时会根据盒子里面的内容来确定宽度</p><p>​    如果某块设置为浮动，那么其后面的块会自动补该块未浮动时的位置，但后面块的文字会被挤占</p><h5 id="浮动的清除-对于浮动盒子的下面盒子设置"><a href="#浮动的清除-对于浮动盒子的下面盒子设置" class="headerlink" title="浮动的清除(对于浮动盒子的下面盒子设置)"></a>浮动的清除(对于浮动盒子的下面盒子设置)</h5><p>​    CSS使用<code>clear</code> 属性来清除浮动(消除浮动对下面盒子的影响)，它的取值有<code>left</code>、<code>right</code>、<code>both</code>和<code>none</code>(默认值)，设置为left或者right表示该盒子的左边或右边不允许有浮动的对象，设置为both则表示两边都不允许有浮动对象，因此该盒子将会在浏览器中另起一行显示</p><h4 id="10-position属性的使用"><a href="#10-position属性的使用" class="headerlink" title="10. position属性的使用"></a>10. position属性的使用</h4><p>​    一般使用position属性来对盒子模型进行定位，一般不会使用margin来设置位置，因为margin只是指外边距</p><p>​    position属性修改元素位置后，对其他元素无影响</p><p>​    position属性常用的4个值</p><ul><li><p><strong>static</strong></p><p>​    static是position的默认属性值，忽略top、bottom、left、right</p></li><li><p><strong>relative</strong></p><p>​    relative表示相对定位，当 position 为 relative 的时候，如果设置了 left 、right、top、bottom 属性，它们会生效，发生偏移时的参照为 position 属性取 static 时盒子的位置</p></li><li><p><strong>absolute</strong></p><p>​    absolute表示绝对定位，当 position 为 absolute 的时候，元素会被移出正常文档流，并不为元素预留空间，元素相对于最近的非 static 定位祖先元素发生偏移，<strong>当元素没有非 static 定位祖先时，会相对 html 发生偏移</strong></p></li><li><p><strong>fixed</strong></p><p>​    fixed表示固定定位，当 position 为 fixed 的时候，元素会被移出正常文档流，并不为元素预留空间，元素相对于屏幕视口（viewport）的 位置来发生偏移, 元素的位置在屏幕滚动时不会改变</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML+CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端04</title>
      <link href="/2022/02/12/%E5%89%8D%E7%AB%AF04/"/>
      <url>/2022/02/12/%E5%89%8D%E7%AB%AF04/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h2><h4 id="1-CSS简介"><a href="#1-CSS简介" class="headerlink" title="1. CSS简介"></a>1. CSS简介</h4><p>​    CSS(层叠样式表)是由W3C的CSS工作组创建和维护的。它是一种不需要编译。可直接由浏览器执行的标记性语言，用于控制web页面的外观</p><p>​    通过使用CSS样式控制页面各元素的属性显示，可将页面的内容与表现形式进行分离</p><p>​    <strong>层叠样式表本质上也是文本，用<code>&#123;&#125;</code> 将样式内容括住，最后将所有的封装在一个文件里。页面引用这个文件即可</strong></p><p>​    HTML5和CSS3是同时制作发布的</p><h4 id="2-CSS的优势"><a href="#2-CSS的优势" class="headerlink" title="2. CSS的优势"></a>2. CSS的优势</h4><ul><li><p>避免使用多余的HTML代码，减少代码量</p><p>​    文本本身是通过字符来计算文件量，而**在之前对于页面的修饰会通过HTML标签自带的属性进行修饰(即HTML代码的处理方式，不属于CSS)**，此时代码量大，读的时候就会慢</p></li><li><p>缩短更新和维护的时间</p><p>​    不使用CSS可能有些样式要反复定义，需要更换时，可能非常复杂。而且采用样式表可以使得样式与页面相分离，在修改时，更加直观、防止出错</p></li><li><p>做出HTML实现不了的特效</p><p>​    CSS2很多功能HTML里面其实也有，但在CSS3以及之后HTML里的样式就不再更新了</p></li></ul><h4 id="3-认识-lt-div-gt-和-lt-span-gt-标签-双"><a href="#3-认识-lt-div-gt-和-lt-span-gt-标签-双" class="headerlink" title="3. 认识&lt;div&gt; 和&lt;span&gt; 标签(双)"></a>3. 认识<code>&lt;div&gt;</code> 和<code>&lt;span&gt;</code> 标签(双)</h4><p>​    <code>&lt;div&gt;</code> 和<code>&lt;span&gt;</code> 标签是属于HTML的标签，一般这两个标签都是配合样式表使用的，这<strong>两个标签可以理解为容器标签</strong>，早期时一般用Table来当容器</p><ul><li><p><code>&lt;div&gt;</code> 标签(双)：</p><p>​    用来为HTML文档内大块的内容提供结构和背景的元素，它为块元素，<code>&lt;div&gt;</code> 的起始标签和结束标签之间的所有内容都在该块中，<strong>一般在布局时使用</strong></p></li><li><p><code>&lt;span&gt;</code> 标签(双)：</p><p>​    用来组成HTML文档的行元素，<strong>一般放内容时使用，<code>div</code> 也可以作为放内容</strong></p></li></ul><p>​    <strong><code>&lt;div&gt;</code> 和<code>&lt;span&gt;</code> 在页面上的显示</strong></p><p>​    代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>内容2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>内容1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    结果(虚线是工具编译生成的，在浏览器显示时，不会进行显示)</p><p><a href="https://imgtu.com/i/7IOCXF"><img src="https://s4.ax1x.com/2022/01/24/7IOCXF.png" alt="7IOCXF.png"></a></p><h4 id="4-CSS样式语法"><a href="#4-CSS样式语法" class="headerlink" title="4. CSS样式语法"></a>4. CSS样式语法</h4><p>​    <a href="https://imgtu.com/i/7IjFiR"><img src="https://s4.ax1x.com/2022/01/24/7IjFiR.png" alt="7IjFiR.png"></a></p><ul><li>选择器(符)：用于选择文档中要应用样式的那些元素，该元素 </li></ul><h4 id="5-CSS样式表中的注释"><a href="#5-CSS样式表中的注释" class="headerlink" title="5. CSS样式表中的注释"></a>5. CSS样式表中的注释</h4><p>​    使用<code>/*  注释  */</code>包裹进行注释</p><h4 id="6-CSS样式的几种表达方式"><a href="#6-CSS样式的几种表达方式" class="headerlink" title="6. CSS样式的几种表达方式"></a>6. CSS样式的几种表达方式</h4><h5 id="1-内嵌样式-直接在页面的标签里加"><a href="#1-内嵌样式-直接在页面的标签里加" class="headerlink" title="(1). 内嵌样式(直接在页面的标签里加)"></a>(1). 内嵌样式(直接在页面的标签里加)</h5><p>​    将CSS样式与某HTML标签混合使用，这种方式可以简单的对某个元素单独定义样式</p><p>​    范例：内嵌样式的使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">'微软雅黑'</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>14px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#F00</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内嵌样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    注意：这种方式实际上与在HTML代码中直接定义属性类似，违反了之前避免使用不必要的HTML元素这个规则，<strong>一般使用这种方式写只是针对页面已经写好但部分需要修改时使用</strong></p><h5 id="2-内部样式表-在head部分加入"><a href="#2-内部样式表-在head部分加入" class="headerlink" title="(2). 内部样式表(在head部分加入)"></a>(2). 内部样式表(在head部分加入)</h5><p>​    在HTML页面head标签内进行定义，只能在定义了的页面进行调用，其他页面调用不了 </p><p>​    范例：内部样式表的使用</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;head&gt;&lt;style&gt; &#x2F;*有些会写&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;这是CSS4.0要求的，现在5.0可以不写*&#x2F;.font_size&#123;font-size:30px;&#125;&lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;div class&#x3D;&quot;font_size&quot;&gt;字体变大&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    只适合单页或者是要修改时使用，在修改时，直接修改css文件可能会造成重名，而使用这个方式可以很好的避免</p><p>​    注意：之所以使用会写<code>type=&quot;text/css&quot;</code>作为<code>&lt;style&gt;</code> ，是因为HTML的设计者当时认为还有可能会有其他样式，但现在并没有，所以直接写<code>&lt;style&gt;</code>不带属性也是可以的</p><h5 id="3-链入外部样式表-在head部分进行引用描述"><a href="#3-链入外部样式表-在head部分进行引用描述" class="headerlink" title="(3). 链入外部样式表(在head部分进行引用描述)"></a>(3). 链入外部样式表(在head部分进行引用描述)</h5><p>​    把所有的东西封装在一个样式表文件里，从外部引用这个样式表文件，当网页加载时会把所有的外部样式先加载到网页中再进行显示，网速再慢也不影响，推荐使用这个形式</p><p>​    范例：链入外部样式表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    <strong><code>rel</code>属性和<code>type</code>属性是两个声明，<code>href</code>中的路径必须要对</strong></p><p>​    注意：写在样式表中的CSS的样式定义与上面的写法是一样的</p><p>​    在浏览器中有的可以设置文字的大小，所以一般在定义文字时用CSS限制文字大小，不然可能造成页面被浏览器弄失真</p><h5 id="4-导入外部样式表-在head部分进行引用"><a href="#4-导入外部样式表-在head部分进行引用" class="headerlink" title="(4). 导入外部样式表(在head部分进行引用)"></a>(4). 导入外部样式表(在head部分进行引用)</h5><p>​    导入样式类似于链入外部样式，都是利用外部CSS样式文件来改变页面的外部表现的，但与外部样式不同的是，需要在<code>&lt;style&gt;</code>和<code>&lt;/style&gt;</code> 标签中间利用”@import”关键字导入外部CSS文件，文件加载到网页时，先把HTML结构显示出来，再把外部的CSS加载到网页当中，当网速较慢是会先显示未经修饰的HTML页面造成阅读者不好的感觉</p><p>​    现在使用的非常少，这是早期样式表导入的语法</p><p>​    范例：导入外部样式表</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>my.css<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="5-样式表的优先级"><a href="#5-样式表的优先级" class="headerlink" title="(5). 样式表的优先级"></a>(5). 样式表的优先级</h5><p>​    内嵌样式 &gt; 内部样式表 &gt; 导入外部样式表</p><h4 id="7-CSS基本选择器-符"><a href="#7-CSS基本选择器-符" class="headerlink" title="7. CSS基本选择器(符)"></a>7. CSS基本选择器(符)</h4><p>​    <strong>注意：所写的一个样式可以被多个内容所引用且本身样式表是有继承性的，有优先级别</strong></p><h5 id="1-通配符选择器"><a href="#1-通配符选择器" class="headerlink" title="(1). 通配符选择器(*)"></a>(1). 通配符选择器(*)</h5><p>​    在编码时，用”*”表示通配选择器，其作用是定义页面所有元素的样式，不管是直接在<code>body</code>标签中敲还是放什么标签里</p><p>​    范例：定义页面中所有的元素样式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-类选择器"><a href="#2-类选择器" class="headerlink" title="(2). 类选择器(.)"></a>(2). 类选择器(.)</h5><p>​    类选择器通过直接引用元素中类属性的值而产生效果，使用<code>.</code> 来标识一个类选择器，类名可以随意命名但最好根据元素用途来命名</p><p>​    类选择器的语法</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;CSS中.选择器名称(A)&#123;&#x2F;&#x2F;样式&#125;&#x2F;&#x2F;HTML中&lt;要引用样式的标签名 class&#x3D;&quot;选择器名称(A)&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-ID选择器"><a href="#3-ID选择器" class="headerlink" title="(3). ID选择器(#)"></a>(3). ID选择器(#)</h5><p>​    使用<code>#</code> 来标识一个ID选择器，在HTML文档中，每一个标签都可以使用id=”选择器名称”的形式进行一个名称指派，这和类选择器相似，但需要注意的是，<strong>HTML文件中id是具有唯一性是不可以重复的</strong></p><p>​    <strong>一般在js脚本中都是认id名的</strong></p><h5 id="4-标签选择器"><a href="#4-标签选择器" class="headerlink" title="(4). 标签选择器"></a>(4). 标签选择器</h5><p>​    把HTML标签当作选择器的名称，所有被该标签包含的HTML标签都会改变样式</p><h5 id="5-群组选择器"><a href="#5-群组选择器" class="headerlink" title="(5). 群组选择器"></a>(5). 群组选择器</h5><p>​    名称之间用<code>,</code> 隔开</p><p>​    范例：让三个div宽高一样，颜色不同</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.a1,.a2,.a3</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token selector">a1</span><span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token selector">a2</span><span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token selector">a3</span><span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-伪类-里面的状态伪类"><a href="#8-伪类-里面的状态伪类" class="headerlink" title="8. 伪类(里面的状态伪类)"></a>8. 伪类(里面的状态伪类)</h4><p>​    同一个标签，根据其<strong>不同的状态，有不同的样式</strong>。这就叫做“伪类”，伪类用冒号来表示。</p><p>​    伪类选择器分为两种。</p><p>​    <strong>1. 静态伪类</strong>：只能用于**超链接<code>&lt;a&gt;</code> **的样式。如下：</p><ul><li><p><code>:link</code> 超链接点击之前</p></li><li><p><code>:visited</code> 链接被访问过之后</p><p>注意：以上两种样式，只能用于超链接，且要写的话应该一起写上。</p></li></ul><p>​    <strong>2. 动态伪类</strong>：针对<strong>所有标签</strong>都适用的样式。如下：</p><ul><li><code>:hover</code> “悬停”：鼠标放到标签上的时候</li><li><code>:active</code>    “激活”： 鼠标点击标签，但是不松手时。</li><li><code>:focus</code> 是某个标签获得焦点时的样式（比如某个输入框获得焦点）</li></ul><p>​    <strong>超链接的四种状态伪类</strong></p><p>​    a标签有4种伪类（即对应四种状态），要求背诵。如下：</p><ul><li><p><code>:link</code> “链接”：超链接点击之前</p></li><li><p><code>:visited</code> “访问过的”：链接被访问过之后</p></li><li><p><code>:hover</code>    “悬停”：鼠标放到标签上的时候</p></li><li><p><code>:active</code>    “激活”： 鼠标点击标签，但是不松手时。</p></li></ul><p>​    <strong>记住，在css中，这四种状态必须按照固定的顺序写：</strong></p><blockquote><p>a:link 、a:visited 、a:hover 、a:active</p></blockquote><p>​    如果不按照顺序，那么将失效</p><h4 id="9-CSS颜色写法"><a href="#9-CSS颜色写法" class="headerlink" title="9. CSS颜色写法"></a>9. CSS颜色写法</h4><p>​    在CSS中，颜色的表达有一下三种方式</p><ol><li>十六进制：如“#ff000”</li><li>RGB：如“rgb(255,0,0)”</li><li>颜色名称：如“red”</li></ol><p>​    <strong>注意：一般使用十六进制表示颜色这种方式居多</strong></p><h4 id="10-背景图像"><a href="#10-背景图像" class="headerlink" title="10. 背景图像"></a>10. 背景图像</h4><p>​    CSS关于背景图像的属性</p><ul><li><code>background-color: blue</code> 为元素设置背景颜色为蓝色</li><li><code>background-image:url(&quot;图像路径&quot;)</code> 设置背景图像</li><li><code>background-repeat:no-repeat</code> 设置背景图像为不重复，默认值为重复</li><li><code>background-attachment:fixed</code> 将图片滚动锁定为不跟随滚动</li><li><code>background-position:center</code> 将图像位置设置为居中</li></ul><h4 id="11-文本修饰"><a href="#11-文本修饰" class="headerlink" title="11. 文本修饰"></a>11. 文本修饰</h4><p>​    CSS关于文本修饰的属性</p><ul><li><code>color:blue</code> 设置文本颜色为蓝色</li><li><code>text-align:center</code> 设置文本位置为居中</li><li><code>text-decoration:line-through</code> 设置文本效果为加删除线，除了删除线外还有上划线、下划线和无文字效果(none，这个可以和超链接混合使用)</li><li><code>text-indent:50px</code> 设置文本缩进为50px，通常是将段落的首行缩进，允许缩进使用负值 </li></ul><h4 id="12-文字修饰"><a href="#12-文字修饰" class="headerlink" title="12. 文字修饰"></a>12. 文字修饰</h4><p>​    CSS关于文字修饰的属性</p><ul><li><code>font-family:字体种类</code> 它可以设置多种字体，但在浏览器显示时需要操作系统中本身有该字体，不然会从浏览器下载该字体，多个字体按顺序来优先显示</li><li><code>font-style:italic</code> 将文字样式设置为斜体，默认值为normal即正常显示</li><li><code>font-size:40px</code> 将文字设置为40像素大小，还要一个单位em 1em=16px</li><li><code>font-weight:bold</code> 将文字设置为加粗(bold=700)，默认值为normal即正常显示，还可以使用数字表示<code>100~900</code>之间</li></ul><h4 id="13-CSS列表-ul与ol-的设置"><a href="#13-CSS列表-ul与ol-的设置" class="headerlink" title="13. CSS列表(ul与ol)的设置"></a>13. CSS列表(ul与ol)的设置</h4><p>​    通过使用列表的CSS选择器对属性<code>list-style-type:XXXX</code>进行指定来对列表进行设置</p><p>​    常见属性值见下图</p><p><a href="https://imgtu.com/i/Huz8pj"><img src="https://s4.ax1x.com/2022/02/06/Huz8pj.png" alt="Huz8pj.png"></a></p><h4 id="14-CSS表格相关样式的设置"><a href="#14-CSS表格相关样式的设置" class="headerlink" title="14. CSS表格相关样式的设置"></a>14. CSS表格相关样式的设置</h4><p>​     设置表格边框的属性(有边框的容器都适用)</p><ul><li>border:2px solid blue; 放在table标签中为设置边框的外边框为2像素，实线，颜色为蓝色，放在td标签中，即为设置内边框样式</li><li>width:500px; 放在table标签中设置表格宽度为500像素</li><li>height:500px; 放在table标签中设置表格高度为500像素</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML+CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端03</title>
      <link href="/2022/01/21/%E5%89%8D%E7%AB%AF03/"/>
      <url>/2022/01/21/%E5%89%8D%E7%AB%AF03/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML表单的设计与使用"><a href="#HTML表单的设计与使用" class="headerlink" title="HTML表单的设计与使用"></a>HTML表单的设计与使用</h2><h4 id="1-表单的概念"><a href="#1-表单的概念" class="headerlink" title="1. 表单的概念"></a>1. 表单的概念</h4><p>​    表单在网页中主要负责数据采集功能，<strong>主要用于搜集不同类型的用户输入</strong>，是人和电脑相互交流的通道</p><p>​    <strong>一个表单由两个基本组成部分：表单标签和表单域，<em>注意：由开始和结束的表单标签来组成一个表单域，一个页面可以有多个表单区域(通过name属性进行区分，不要重名)，但两个表单之间不支持嵌套</em></strong></p><p>​    表单区域代码示例</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>register.html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>//里面可以写表单内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>name属性：定义表单名字，由英文字母定义</li><li>action属性：指定表单提交后，提交的目的地</li><li>method属性：有post和get，post打包暗箱传输的数据，而get是通过地址栏传值，不写该属性默认值为get</li></ul><p>​    表单标签<code>&lt;form&gt;</code>(双) ：包含了处理表单数据所用CGI程序的URL以及数据提交到服务器的方法</p><p>​    <strong>下面所提到的标签必须包含在表单域中</strong></p><p>​    表单域：包含了<strong>文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框</strong>等</p><p>​    表单按钮(属于表单域)：包括**提交按钮、复位按钮和一般按钮(即什么功能都没有定义的空按钮，用户可以根据自己情况定义)**；用以将数据传送到服务器上的CGI脚本或者取消输入，还可以用表单按钮来控制其他定义了处理脚本的处理工作</p><h4 id="2-单行文本框-单"><a href="#2-单行文本框-单" class="headerlink" title="2. 单行文本框(单)"></a>2. 单行文本框(单)</h4><p>​    用<code>&lt;input&gt;</code> 标签描述，type属性为<code>text</code> </p><p>​    范例：定义一个文本框</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>name属性：指定输入框的名字，<strong>表单中每一个标签都有命名，不要有重名，接收时按名字来接收</strong>，使用英文字母自行定义，不可以为关键字</p></li><li><p>type属性：<strong>用于定义类型</strong>，单行文本输入框的type固定为text</p></li></ul><p>​    注意：未加修饰的文本框在不同的浏览器显示的效果是不一样的，如果要所有的浏览器看到同一个效果，则需要使用CSS对其进行修饰</p><h4 id="3-密码输入框-单"><a href="#3-密码输入框-单" class="headerlink" title="3. 密码输入框(单)"></a>3. 密码输入框(单)</h4><p>​    用<code>&lt;input&gt;</code> 标签描述，type属性为<code>password</code> </p><p>​    密码框和文本框的区别是在密码框输入时的东西都会被隐藏，但传值的时候还是可以看见</p><p>​    范例：定义一个密码框</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>name属性：指定密码框的名字，<strong>表单中每一个标签都有命名，不要有重名，接收时按名字来接收</strong>，使用英文字母自行定义，不可以为关键字</p></li><li><p>type属性：密码输入框的type固定为password</p></li></ul><p>​    <strong>注意：可以在表单中加入表格，使得各标签显示更加有序</strong></p><h4 id="4-单选框-单"><a href="#4-单选框-单" class="headerlink" title="4. 单选框(单)"></a>4. 单选框(单)</h4><p>​    用<code>&lt;input&gt;</code> 标签描述，type属性为<code>radio</code> </p><p>​    单选框一次只能选择一个选项，在单选框使用时，必须有两个以上的单选框标签，而且其name属性相同，每一个单选框构成一个选项</p><p>​    范例：性别选择的实现</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">男 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>女 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>name属性：name属性相同表示一组单选框</li><li>type属性：单选框的type固定为radio</li><li>value属性：单选框相对于用户来说只是提供选择，用户并没有往里面输入值，所以需要value属性来定义一个值，当发生传值时，将选中的单选框的value值传递出去，单选框传的值和页面显示的文字无关</li><li>checked属性：没有值，表示该选项默认为选中状态</li></ul><p>​    注意：文本框也有value属性，如果写了value属性，页面显示的就为value的默认值</p><h4 id="5-复选框-单"><a href="#5-复选框-单" class="headerlink" title="5. 复选框(单)"></a>5. 复选框(单)</h4><p>​    用<code>&lt;input&gt;</code> 标签描述，type属性为<code>checkbox</code> </p><p>​    复选框用于多选</p><p>​    范例：城市的选择</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>大连<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>name属性：name属性相同表示一组复选框</li><li>type属性：复选框的type固定为checkbox</li><li>value属性：复选框相对于用户来说也只是提供选择，用户并没有往里面输入值，所以需要value属性来定义一个值，当发生传值时，将选中的复选框的value值传递出去，复选框传的值和页面显示的文字无关</li><li>checked属性：没有值，表示该选项默认为选中状态</li></ul><h4 id="6-下拉单选框-双"><a href="#6-下拉单选框-双" class="headerlink" title="6. 下拉单选框(双)"></a>6. 下拉单选框(双)</h4><p>​    用<code>&lt;select&gt;</code> 包含<code>&lt;option&gt;</code> 标签来描述，没有type属性</p><p>​    下拉单选框一次只能选择一个选项，下拉单选框的本质还是单选，但其可以节省空间，可以选如年月日那种</p><p>​    范例：下拉单选框的使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大连<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>select标签的属性<ul><li>name属性：指定下拉单选框的名字，使用英文字母自行定义</li></ul></li><li>option标签的属性<ul><li>value属性：指定该选项的值，传参过去时使用</li><li>selected属性：没有值，表示默认选中该选项</li></ul></li></ul><h4 id="7-多行文本输入框-双"><a href="#7-多行文本输入框-双" class="headerlink" title="7. 多行文本输入框(双)"></a>7. 多行文本输入框(双)</h4><p>​    用<code>&lt;textarea&gt;</code> 标签描述，没有type属性</p><p>​    多行文本输入框用于输入大量文字信息，用于像电子邮件、发帖的正文等</p><p>​    范例：多行文本输入框的实现</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>name属性：指定输入框的名字，用英文表示自行定义</li><li>rows属性：指定文本框的行数(20表示有20个字符那么长)</li><li>cols属性：指定文本框的列数(80表示有80个字符那么长)</li><li>默认值：在开始标签和结束标签中间写的东西都会作为默认值显示</li></ul><p>​    注意：现在一般不会这样使用cols属性和rows属性来确定多行文本输入框的大小</p><h4 id="8-文件上传-单"><a href="#8-文件上传-单" class="headerlink" title="8. 文件上传(单)"></a>8. 文件上传(单)</h4><p>​    用<code>&lt;input&gt;</code> 标签描述，type属性为file</p><p>​    用于把文件上传到服务器</p><p>​    范例：文件上传的前端部分</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>name属性：指定该文件上传接口的名字，用英文表示自行定义</li><li>type属性：提交按钮的type属性固定为file</li></ul><p>​    注意：此时只是为前台页面的上传，该上传并不具有文件上传的逻辑，要想真正实现上传专门去用程序去实现上传的组件，他只是前台的一个接口</p><h4 id="9-提交按钮-单"><a href="#9-提交按钮-单" class="headerlink" title="9. 提交按钮(单)"></a>9. 提交按钮(单)</h4><p>​    用<code>&lt;input&gt;</code> 标签描述，type属性为submit</p><p>​    <strong>用于将表单数据提交给<code>form</code> 标签中action属性指定的地址进行处理，即传出去了，但action的那个页面能否接收要看那个页面是怎么写的</strong></p><p>​    范例：实现提交按钮</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>name属性：指定按钮名字，用英文字母自行定义</li><li>type属性：提交按钮的type属性固定为submit</li><li>value属性：指定按钮上显示的字</li></ul><h4 id="10-普通按钮-单"><a href="#10-普通按钮-单" class="headerlink" title="10. 普通按钮(单)"></a>10. 普通按钮(单)</h4><p>​    用<code>&lt;input&gt;</code> 标签描述，type属性为button</p><p>​    该按钮相当于空的按钮，需要自己使用脚本进行定义</p><h4 id="11-重置按钮-单"><a href="#11-重置按钮-单" class="headerlink" title="11. 重置按钮(单)"></a>11. 重置按钮(单)</h4><p>​    用<code>&lt;input&gt;</code> 标签描述，type属性为reset</p><p>​    用于清空表单已经填写的数据，把表单恢复初始化</p><p>​    范例：定义重置按钮</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重填<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>name属性：指定按钮名字，用英文字母自行定义</li><li>type属性：重置按钮的type属性固定为reset</li><li>value属性：指定按钮上显示的字</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML+CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端02</title>
      <link href="/2022/01/16/%E5%89%8D%E7%AB%AF02/"/>
      <url>/2022/01/16/%E5%89%8D%E7%AB%AF02/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML的标签"><a href="#HTML的标签" class="headerlink" title="HTML的标签"></a>HTML的标签</h2><h4 id="1-标题标签-双"><a href="#1-标题标签-双" class="headerlink" title="1. 标题标签(双)"></a>1. 标题标签(双)</h4><p>​    标题是通过<code>&lt;h1&gt;</code> -<code>&lt;h6&gt;</code> 等标签进行定义的，其中<code>&lt;h1&gt;</code> 定义最大的标题，<code>&lt;h6&gt;</code> 定义最小的标题</p><p>​    注意：标题标签只能用于标题，<strong>不要为了产生粗体或大号的文本而使用标题，标题是为网页结构和内容编制的索引，搜索引擎会抓取标题当关键字</strong></p><h4 id="2-基本标签"><a href="#2-基本标签" class="headerlink" title="2. 基本标签"></a>2. 基本标签</h4><ul><li><p><strong>段落标签(双)</strong></p><p>段落是使用<code>&lt;p&gt;</code> 标签在HTML页面中创建段落</p></li><li><p><strong>水平线标签(单)</strong></p><p>水平线是使用<code>&lt;hr&gt;</code>标签在HTML页面中创建水平线</p></li><li><p><strong>换行标签(单)</strong></p><p>换行是使用<code>&lt;br&gt;</code>标签在HTML页面中创建换行符，<code>&lt;br /&gt;</code>是写XHTML时的一个严格语法，如果不是写XHTML，则HTML中都应该使用<code>&lt;br&gt;</code>，<strong>注意：在代码中敲多少回车都没有用，多个空白符当一个空格</strong></p></li><li><p><strong>空格标签(符)</strong></p><p>空格是使用<code>&amp;nbsp</code>标签在HTML页面中显示空格</p></li><li><p><strong>注释</strong></p><p>HTML使用<code>&lt;!-- --&gt;</code>期间的内容为注释，注释在页面不显示，代码中可显示</p></li><li><p><strong>加粗( 双)</strong></p><p>加粗是使用<code>&lt;b&gt;</code>标签对标签内的文本进行加粗</p></li></ul><h4 id="3-图像标签-单"><a href="#3-图像标签-单" class="headerlink" title="3. 图像标签(单)"></a>3. 图像标签(单)</h4><p>​    图像使用<code>&lt;img&gt;</code> 标签在HTML页面中创建图像</p><p>​    <strong><code>&lt;img&gt;</code> 标签常用的属性如下（加粗为必须要使用的属性）</strong>：</p><ul><li><p><strong><code>src</code>：设定要引用图像的路径，如果图像路径不正确会在web页面上显示损坏的图像</strong></p></li><li><p><code>alt</code>：为图像定义一串预备的可替换文本，在浏览器无法载入图像时，浏览器将显示这个替代性文本</p></li><li><p><code>width</code>：设定图像宽度，属性值为像素</p></li><li><p><code>height</code>：设定图像高度，属性值为像素</p><p>注意：一般不会采用width或者height这种形式对图像进行强制放缩，<strong>因为采用这种形式进行放缩，文件量是不变的，即大图像变小但是文件大小不变，此时会造成网页上有许多占用流量的图像，使得网页反馈速度变慢</strong></p></li></ul><h4 id="4-路径"><a href="#4-路径" class="headerlink" title="4. 路径"></a>4. 路径</h4><p>​    路径分为网络路径和硬盘物理路径，我们在网上使用的都是网络路径</p><p>​    <strong>网络路径分为绝对路径和相对路径</strong></p><ul><li>绝对路径：由根目录（/）开始写起的文件名或目录名称</li><li>相对路径：相对于目前路径的文件名写法</li></ul><p>​    <strong>路径的切换</strong></p><ul><li>同级别：直接写文件名</li><li>上一次级别：用<code>../</code> 文件名</li><li>下一次级别：用目录名<code>/</code> 文件名</li></ul><p>​    <strong>注意：在网页中只能使用<code>/</code>来分隔路径</strong>，不可以使用<code>\</code>，<code>\</code>是Windows操作系统分隔路径用的</p><h4 id="5-超级链接（双）"><a href="#5-超级链接（双）" class="headerlink" title="5. 超级链接（双）"></a>5. 超级链接（双）</h4><p>​    超链接使用<code>&lt;a&gt;</code> 标签在HTML页面中创建超链接，开始标签和结束标签之间的文字、图像被作为链接来显示</p><p>​    <code>&lt;a&gt;</code> 标签里的内容会成为web页面中可单击的文本，默认这是有下划线的，可以用CSS去除</p><p>​    <strong><code>&lt;a&gt;</code> 标签常用的属性如下（加粗为必须要使用的属性）：</strong></p><ul><li><p><strong><code>href</code>：用于定位需要链接的文档，里面写要跳转网页的路径，或者目标文件，事实上可以指向各种各样的资源</strong></p></li><li><p><code>target</code>：定义被链接的文档在何处显示</p><p>常用的两个值</p><ol><li><code>_self</code>：在本窗口打开链接，不设置target则此为默认值</li><li><code>_blank</code>：在一个新窗口打开链接</li></ol></li><li><p>title：定义鼠标停留在链接上提示信息</p></li></ul><h4 id="6-列表-双"><a href="#6-列表-双" class="headerlink" title="6. 列表(双)"></a>6. 列表(双)</h4><p>​    列表分为有序列表和无序列表</p><ul><li>无序列表：在HTML中使用<code>&lt;ul&gt;</code> 标签表示无序列表，每一个列表项使用<code>&lt;li&gt;</code> 表示</li></ul><ul><li><p>有序列表：在HTML中使用<code>&lt;ol&gt;</code> 标签表示有序列表，每一个列表项使用<code>&lt;li&gt;</code> 表示</p><p><strong>注意：不管是有序列表还是无序列表<code>&lt;li&gt;</code> 都是双标签，而且这三个标签都为块元素</strong></p></li></ul><ul><li><p>自定义列表：使用<code>&lt;dl&gt;</code> 、<code>&lt;dt&gt;</code> 、<code>&lt;dd&gt;</code> 来组成自定义列表</p><pre class="line-numbers language-none"><code class="language-none">&lt;dl&gt;&lt;dt&gt;burma Shave Signs&lt;&#x2F;dt&gt;&lt;dd&gt;Road signs common&lt;&#x2F;dd&gt;&lt;dt&gt;Route&lt;&#x2F;dt&gt;&lt;dd&gt;Most famous&lt;&#x2F;dd&gt;&lt;&#x2F;dl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器显示效果</p><p><a href="https://imgtu.com/i/qpNZjS"><img src="https://s1.ax1x.com/2022/03/16/qpNZjS.png" alt="qpNZjS.png"></a></p></li></ul><p>​    </p><p>​    列表可以相互嵌套，但嵌套的标签需要放在<code>&lt;li&gt;</code> 里面</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>城市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>地方<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-表格-双"><a href="#7-表格-双" class="headerlink" title="7. 表格(双)"></a>7. 表格(双)</h4><p>​    表格一般主要用于展示数据，但在网页设计中，主要用于布局，做容器使用</p><p>​    表格的图示</p><p><a href="https://imgtu.com/i/7JdhZ9"><img src="https://s4.ax1x.com/2022/01/15/7JdhZ9.png" alt="7JdhZ9.png"></a></p><p>​    在HTML中使用<code>&lt;table&gt;</code> 标签来定义表格；<br>​    使用<code>&lt;tr&gt;</code> 标签表示表格的一行，<code>&lt;tr&gt;</code> 标签里面不可以直接放元素；<br>​    使用<code>&lt;td&gt;</code> 来表示表格的一列(必须在行标签中)，即单元格，<strong>在<code>&lt;td&gt;</code> 标签中可以包含文本、图片、列表、段落、水平线、表格等任何元素</strong>；<br>​    使用<code>&lt;th&gt;</code> 来表示表头，该标签可加可不加</p><p>​    <strong>注意：上述标签都为双标签</strong></p><p>​    <strong><code>&lt;table&gt;</code> 标签的常用属性</strong></p><ul><li><code>cellspacing</code> ：用来定义表格的间距(单元格边框与单元格边框之间的距离)，默认值为1px</li><li><code>cellpadding</code> ：用来定义表格的边距(内容与单元格边框之间的距离)</li><li><code>width</code> ：用来定义表格的宽度</li><li><code>height</code> ：用来定义表格的高度</li><li><code>border</code> ：用来定义表格的边框粗细</li></ul><p>注意：上述属性都是用像素(px)为单位，一般设计网页设定分辨率&lt;1000px，14寸笔记本分辨率为(1366<code>*</code> 768)px</p><ul><li><code>align</code> ：放在<code>&lt;table&gt;</code> 标签中用来定义表格在总页面中的水平对齐方式；放在<code>&lt;td&gt;</code> 标签中用来定义单元格中的内容在单元格中的位置，两个的默认值都为left</li></ul><h4 id="8-引用-双"><a href="#8-引用-双" class="headerlink" title="8. 引用(双)"></a>8. 引用(双)</h4><h5 id="1-lt-q-gt-标签表示的引用-本质上为行内元素"><a href="#1-lt-q-gt-标签表示的引用-本质上为行内元素" class="headerlink" title="(1).&lt;q&gt; 标签表示的引用(本质上为行内元素)"></a>(1).<code>&lt;q&gt;</code> 标签表示的引用(本质上为行内元素)</h5><p>​    当需要引用一段文字时可以使用<code>&lt;q&gt;</code> 标签来将该段文字被引用</p><p>​    在不同的浏览器中显示情况不同，有些浏览器会为被引用的文字添加双引号(该双引号在网页不会被选中)，而有些浏览器不会，所以在使用时需要自行调试</p><h5 id="2-lt-blockquote-gt-标签表示的引用-本质上为块元素"><a href="#2-lt-blockquote-gt-标签表示的引用-本质上为块元素" class="headerlink" title="(2).&lt;blockquote&gt; 标签表示的引用(本质上为块元素)"></a>(2).<code>&lt;blockquote&gt;</code> 标签表示的引用(本质上为块元素)</h5><p>​    当需要引用一段文字时可以使用<code>&lt;blockquote&gt;</code> 标签来将该段文字被引用</p><p>​    在浏览器中显示一块区域类似<code>&lt;p&gt;</code>但里面的放的文字会有所缩进(有些浏览器可能不会缩进)</p><h5 id="注意：两个标签表示的引用效果相同，只是一个是行内元素，另一个是块元素"><a href="#注意：两个标签表示的引用效果相同，只是一个是行内元素，另一个是块元素" class="headerlink" title="注意：两个标签表示的引用效果相同，只是一个是行内元素，另一个是块元素"></a>注意：两个标签表示的引用效果相同，只是一个是行内元素，另一个是块元素</h5><h4 id="9-特殊字符"><a href="#9-特殊字符" class="headerlink" title="9. 特殊字符"></a>9. 特殊字符</h4><p>​    在HTML中有些字符用于组成HTML页面，导致要输出其时无法正常显示，此时就需要使用HTML规定的特殊字符表示的方法</p><p>​    <strong>常用的特殊字符</strong></p><ol><li><code>&lt;</code>字符：<code>&amp;lt</code> </li><li><code>&gt;</code>字符：<code>&amp;gt</code> </li><li><code>&amp;</code>字符：<code>&amp;amp</code> </li></ol><h4 id="10-原样输出"><a href="#10-原样输出" class="headerlink" title="10. 原样输出"></a>10. 原样输出</h4><p>​    在HTML中使用<code>&lt;pre&gt;</code> 标签来告诉浏览器，标签中的内容按照你输入方式的原样显示文本</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>helloworld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-代码显示-双"><a href="#11-代码显示-双" class="headerlink" title="11. 代码显示(双)"></a>11. 代码显示(双)</h4><p>​    在HTML中使用<code>&lt;code&gt;</code> 标签来显示计算机程序代码</p><h4 id="12-HTML其他标签"><a href="#12-HTML其他标签" class="headerlink" title="12. HTML其他标签"></a>12. HTML其他标签</h4><p>​    可以通过这个网址跳转查询</p><p>​    <a href="[HTML Reference (w3schools.com)](https://www.w3schools.com/tags/)">HTML标签大全</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML+CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端01</title>
      <link href="/2022/01/14/%E5%89%8D%E7%AB%AF01/"/>
      <url>/2022/01/14/%E5%89%8D%E7%AB%AF01/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h2><h4 id="1-互联网的起源"><a href="#1-互联网的起源" class="headerlink" title="1. 互联网的起源"></a>1. 互联网的起源</h4><p>​    互联网起源于美国，最先是为了服务军方，后面由几个大学不断研发。首先是局域网，几个城市的局域网相互连接变成城域网，几个城域网相互连接变成广域网，而由几个国家连接就为互联网(因特网)。</p><p>​    </p><h4 id="2-W3C组织"><a href="#2-W3C组织" class="headerlink" title="2. W3C组织"></a>2. W3C组织</h4><p>​    由万维网发明者蒂姆.伯纳斯.李创立，其创建的目的是为了防止互联网陷入割据，现在很多web标准和技术都是由他制定</p><h4 id="3-HTML的概念"><a href="#3-HTML的概念" class="headerlink" title="3. HTML的概念"></a>3. HTML的概念</h4><p>​    HTML：即超文本标记语言，是构成网页文档的主要语言<br>​    <strong>超：</strong>指的是规定好的关键字，不放浏览器是看不出效果的<br>​    <strong>文本：</strong>指的是类似像使用记事本写的都是文本文件<br>​    <strong>标记：</strong>指的是由&lt;&gt;组成的标记(标签)<br>​    <strong>语言：</strong>HTML是解释执行语言，只是翻译不做逻辑</p><p>​    HTML页面也被称为静态页面或者HTML文档，后缀为html、htm，<strong>由于是之前操作系统只支持三位扩展名，到现在都支持了</strong></p><p>​    HTML语言通过浏览器进行翻译</p><h4 id="4-HTML的补充说明"><a href="#4-HTML的补充说明" class="headerlink" title="4. HTML的补充说明"></a>4. HTML的补充说明</h4><p>​    HTML是有版本的，最新的是HTML5，HTML是向下兼容，而且有些旧的浏览器可能不兼容最新版的HTML版本</p><p>​    同一个页面在不同浏览器(内核不同)中看到效果可能不同，这也称为浏览器兼容性问题</p><h4 id="5-HTML标签"><a href="#5-HTML标签" class="headerlink" title="5. HTML标签"></a>5. HTML标签</h4><p>​    HTML标签由尖括号包围的关键字构成</p><p>​    **HTML标签有成对出现(双标签)**，其中第一个标签是开始标签，第二个标签是结束标签； **也有单个出现(单标签)**，所有的单标签都以/结束</p><h4 id="6-HTML属性"><a href="#6-HTML属性" class="headerlink" title="6. HTML属性"></a>6. HTML属性</h4><p>​     HTML标签可以拥有属性，属性提供了有关HTML元素的更多信息，<strong>属性需要写在开始标签中，一个标签可以有多个属性</strong></p><p>​    属性的结构为：名称 = “value”</p><h4 id="7-HTML页面的基本结构"><a href="#7-HTML页面的基本结构" class="headerlink" title="7. HTML页面的基本结构"></a>7. HTML页面的基本结构</h4><p>​    HTML页面的结构包括头部(Head)、主体(Body)两大部分；<strong>头部描述浏览器所需的信息，主体包含所要说明的具体内容</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>//文本描绘网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        //头部信息在此设置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        //HTML文件正文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    标签是可以嵌套的，但不可以随意嵌套，需要明白父子关系</p><p>​    <strong>HTML页面的命名尽量使用英文，不要使用中文</strong></p><h4 id="8-HTML5的声明方法"><a href="#8-HTML5的声明方法" class="headerlink" title="8. HTML5的声明方法"></a>8. HTML5的声明方法</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-第一个HTML页面"><a href="#9-第一个HTML页面" class="headerlink" title="9. 第一个HTML页面"></a>9. 第一个HTML页面</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>欢迎您<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>jvav<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-标签的属性"><a href="#10-标签的属性" class="headerlink" title="10. 标签的属性"></a>10. 标签的属性</h4><p>​    标签属性的作用是提供元素的一些额外信息</p><p>​    在HTML中属性的写法为：属性名=”属性值”</p><p>​    注意：属性名和属性值都必须为HTML文档规定合法的写法</p><h4 id="11-元素"><a href="#11-元素" class="headerlink" title="11. 元素"></a>11. 元素</h4><p>​    HTML中的元素由三个部分组成：开始标记 + 内容 + 结束标记（单标签为各例）</p><p>​    其中内容可以为包含其他标签</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML+CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>望江南-超然台作</title>
      <link href="/2021/12/08/%E6%9C%9B%E6%B1%9F%E5%8D%97-%E8%B6%85%E7%84%B6%E5%8F%B0%E4%BD%9C/"/>
      <url>/2021/12/08/%E6%9C%9B%E6%B1%9F%E5%8D%97-%E8%B6%85%E7%84%B6%E5%8F%B0%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="致21岁生日的诗"><a href="#致21岁生日的诗" class="headerlink" title="致21岁生日的诗"></a>致21岁生日的诗</h2><h4 id="望江南·超然台作"><a href="#望江南·超然台作" class="headerlink" title="望江南·超然台作"></a>望江南·超然台作</h4><p>宋     苏轼</p><p>春未老，风细柳斜斜</p><p>试上超然台上望，半壕春水一城花，烟雨暗千家</p><p>寒食后，酒醒却咨嗟</p><p>休对故人思故国，且将新火试新茶，诗酒趁年华</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE-02.md</title>
      <link href="/2021/12/08/JavaEE-02/"/>
      <url>/2021/12/08/JavaEE-02/</url>
      
        <content type="html"><![CDATA[<h2 id="JSP基础语法"><a href="#JSP基础语法" class="headerlink" title="JSP基础语法"></a>JSP基础语法</h2><h4 id="1-JSP注释"><a href="#1-JSP注释" class="headerlink" title="1. JSP注释"></a>1. JSP注释</h4><p>​    JSP中一共支持两种注释</p><ul><li><p>显式注释</p><p>使用的是HTML风格的注释</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--注释--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>隐式注释</p><ul><li><p>使用Java语言提供的注释</p><pre class="line-numbers language-none"><code class="language-none">单行注释(&#x2F;&#x2F;)多行注释(&#x2F;* ... *&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>JSP提供的注释</p><pre class="line-numbers language-none"><code class="language-none">&lt;%-- 注释 --%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><p>​    <strong>注释的区别</strong></p><p>​    代码运行之后只有显式注释的内容会发送到客户端上，即通过查看网页源代码可以看见</p><h4 id="2-三种Scriptlet"><a href="#2-三种Scriptlet" class="headerlink" title="2. 三种Scriptlet"></a>2. 三种Scriptlet</h4><p>​    <strong>Scriptlet指的是脚本小程序</strong>，在之前只要编写Java程序的语句都需要在”&lt;%%&gt;”之中进行编写，而这样的操作形式就称为Scriptlet，根据其作用不同，Scriptlet分为三类：&lt;%%&gt;、&lt;%!%&gt;、&lt;%=%&gt;</p><p>​    <strong>注意：一个JSP文件里面可以同时编写多个Scriptlet，且相互关联</strong></p><h5 id="第一种Scriptlet：-lt-gt"><a href="#第一种Scriptlet：-lt-gt" class="headerlink" title="第一种Scriptlet：&lt;%%&gt;"></a>第一种Scriptlet：&lt;%%&gt;</h5><p>​    在这种Scriptlet里面只能够编写<strong>局部变量、程序语句</strong></p><p>​    范例：观察&lt;%%&gt;</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%&#x2F;&#x2F;局部变量，每次页面刷新(执行)都要重新执行(重复声明)int num &#x3D; 100;%&gt;&lt;%out.println(&quot;&lt;h1&gt;&quot;+num+&quot;&lt;&#x2F;h1&gt;&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    一般，在一个JSP文件中使用的最多的就是“&lt;%%&gt;”，里面就定义一些基础的局部变量</p><h5 id="第二种Scriptlet：-lt-gt"><a href="#第二种Scriptlet：-lt-gt" class="headerlink" title="第二种Scriptlet：&lt;%!%&gt;"></a>第二种Scriptlet：&lt;%!%&gt;</h5><p>​    这种Scriptlet定义的变量为全局变量，还可以定义全局常量、方法、类</p><p>​    范例：定义全局变量</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%!        &#x2F;&#x2F;声明全局变量，只在第一次生成页面时声明，之后刷新页面不会再将100赋值给num，num为最近一次更新的值int num &#x3D; 100;%&gt;&lt;%out.println(&quot;&lt;h1&gt;&quot;+num+++&quot;&lt;&#x2F;h1&gt;&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    此时，随着页面刷新，显示的数字也会不断增加，重新打开界面仍为之前退出去前的数字</p><p>​    <strong>注意：一般不会这样使用代码来编写程序</strong></p><p>​    范例：定义全局常量</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%!        public static final String str &#x3D; &quot;HELLO&quot;;%&gt;&lt;%out.println(&quot;&lt;h1&gt;&quot;+str+&quot;&lt;&#x2F;h1&gt;&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>基本上在“&lt;%!%&gt;”能用到的只是定义全局常量(常量)功能</strong></p><p>​    范例：定义类和方法</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%!        class fish&#123;private String name;private String color;public fish(String name,String color)&#123;this.name &#x3D; name;this.color &#x3D; color;&#125;public String getfish()&#123;return &quot;name: &quot;+this.name +&quot; color : &quot;+this.color;&#125;&#125;public static double buy(double ... args)&#123;double sum &#x3D; 0;for(double x: args)&#123;sum &#x3D; sum+x;&#125;return sum;&#125;%&gt;&lt;%out.println(&quot;&lt;h1&gt;&quot;+new fish(&quot;red fish&quot;,&quot;red&quot;).getfish()+&quot;&lt;&#x2F;h1&gt;&quot;);out.println(&quot;&lt;h1&gt;&quot;+buy(11.1,56.3)+&quot;&lt;&#x2F;h1&gt;&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    一般也不会这样写代码，只有业余的那部分人会在JSP里面直接编写一堆的Java类或者是方法。</p><h5 id="第三种Scriptlet：-lt-gt"><a href="#第三种Scriptlet：-lt-gt" class="headerlink" title="第三种Scriptlet：&lt;%=%&gt;"></a>第三种Scriptlet：&lt;%=%&gt;</h5><p>​    out.println()可以向页面中进行内容显示输出，但是在JSP中，<strong>输出某个变量、常量、方法的返回值，可以使用表达式输出的Scriptlet完成：&lt;%=%&gt;</strong></p><p>​    范例：观察表达式输出</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%!        public static final String str &#x3D; &quot;HELLO&quot;;%&gt;&lt;h1&gt;&lt;%&#x3D;str%&gt;&lt;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这种Scriptlet可以很好的代替out.println()</p><p>​    <strong>那么这两种输出方式选哪种</strong></p><p>​    范例：使用两种形式打印乘法口诀表</p><p>1.使用out.println()打印</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%out.println(&quot;&lt;table&gt;&quot;);%&gt;&lt;%for(int x &#x3D; 1 ; x &lt;&#x3D; 9 ; x++)&#123;out.println(&quot;&lt;tr&gt;&quot;);for(int y &#x3D; 1 ; y&lt;&#x3D;x ;y++)&#123;out.println(&quot;&lt;td&gt;&quot;+x+&quot;*&quot;+ y+&quot;&#x3D;&quot;+x*y+&quot;&lt;&#x2F;td&gt;&quot;);&#125;out.println(&quot;&lt;&#x2F;tr&gt;&quot;);&#125;%&gt;&lt;%out.println(&quot;&lt;&#x2F;table&gt;&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    以上代码完成了开发需要，但是存在如下问题</p><ul><li><p>不方便使用任何的网页设计工具进行调试</p><ul><li>代码没有缩进，输出的代码格式不适合浏览</li></ul></li></ul><p>2.使用表达式输出</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;table&gt;&lt;%for(int x &#x3D; 1 ; x &lt;&#x3D; 9 ; x++)&#123;%&gt;&lt;tr&gt;&lt;%for(int y &#x3D; 1 ; y&lt;x ;y++)&#123;%&gt;&lt;td&gt;&lt;%&#x3D;x%&gt;*&lt;%&#x3D;y%&gt;&#x3D;&lt;%&#x3D;x*y%&gt;&lt;&#x2F;td&gt;&lt;%&#125;%&gt;&lt;&#x2F;tr&gt;&lt;%&#125;%&gt;&lt;&#x2F;table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    此时的程序与out.println()相比最大的好处在于代码简化，而且功能又相同</p><p>​    <strong>注意：在以后的所有开发中，只要是JSP页面不允许使用out.println()输出，JSP的内容输出永远都依靠表达式输出完成</strong></p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>​    如果把JSP页面当成一个Java类的话</p><pre class="line-numbers language-none"><code class="language-none">class xxx.jsp&#123;全局变量; &lt;%!%&gt;全局常量; &lt;%!%&gt;public void 方法()&#123;局部变量;&lt;%%&gt;语句;&lt;%%&gt;输出;&lt;%&#x3D;%&gt;&#125;class 内部类&#123;&#125;&lt;%!%&gt;方法;&lt;%!%&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-page指令"><a href="#3-page指令" class="headerlink" title="3. page指令"></a>3. page指令</h4><p>​    page主要功能是定义一个页面中的全部属性，里面会包含很多的选项</p><p>​    page是JSP页面开发中用到的最多的一个操作</p><p>​    <strong>page指令的语法格式</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page 属性名1 &#x3D; &quot;value1&quot; 属性名2 &#x3D; &quot;value2&quot; ... %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-解决显示乱码"><a href="#1-解决显示乱码" class="headerlink" title="1. 解决显示乱码"></a>1. 解决显示乱码</h5><p>​    (1).如果是一个<strong>HTML文件</strong>，对于乱码可以使用</p><pre class="line-numbers language-none"><code class="language-none">meta charset &#x3D; &#39;UTF-8&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>的方式解决，<strong>其指定了页面的编码</strong>，浏览器在解析的时候被指定了编码，就可以准确的使用特定的解码方式进行显示</p><p>​    (2).<strong>jsp如果要设置浏览器支持的编码(浏览器会有默认的解码格式)，可以使用pageEncoding属性完成</strong></p><p>​    范例：设置浏览器的编码(.jsp文件)</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@page pageEncoding &#x3D; &quot;UTF-8&quot;%&gt;&lt;h1&gt;中文&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    <strong>注意：pageEncoding的编码设置只能一次，多次会报错</strong></p><p>​    (3).设置MIME类型</p><p>​    MIME指的是多路Internet媒体访问协议。相当于通过MIME类型定义出当前页面的执行方式</p><p>​    所有支持的MIME类型都在Tomcat安装目录中/conf/web.xml文件里面定义，<strong>里面定义了各种文件的执行方式</strong></p><p>​    范例：设置MIME类型，其优先级大于第二种设置方法</p><pre class="line-numbers language-none"><code class="language-none">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;%&gt;&lt;h1&gt;中文&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    <strong>注意：不要乱加空格，尤其是等号那里</strong></p><p>​    这个设置与上面的第二种不冲突</p><p>​    MIME类型一般不需要设置，默认就是“text/html”</p><p>​    <strong>contentType为MIME类型，设置文件运行方式，可以更改为其他形式，如更改为word形式</strong></p><p>​    范例：将jsp页面 以word格式下载</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;application&#x2F;msword&quot;%&gt;&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;h1&gt;中文&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    此时运行会弹出下载框，下载word文件，<strong>这个在ie中才明显，一般浏览器感受不到</strong></p><p>​    现在对于编码的设置一般都是使用第二种</p><h5 id="2-使用page来使用Java中的import操作"><a href="#2-使用page来使用Java中的import操作" class="headerlink" title="2. 使用page来使用Java中的import操作"></a>2. 使用<code>page</code>来使用Java中的<code>import</code>操作</h5><p>​     在page指令里面几乎所有的指令都只能够设置一次，但是import指令可以使用多次，表示导入开发包</p><p>​    范例：使用Java中的<code>import</code>(可以一行导入也可以多行导入)</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.io.*,java.text.*&quot;%&gt;&lt;%@ page import&#x3D;&quot;java.util.*&quot;%&gt;&lt;h1&gt;&lt;%&#x3D;new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date())%&gt;&lt;&#x2F;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    只要能导包，那么所有的系统类都可以调用</p><h5 id="3-数据库操作"><a href="#3-数据库操作" class="headerlink" title="3. 数据库操作"></a>3. 数据库操作</h5><p>​    因为可以进行导包操作，所以意味着可以在JSP页面上进行数据库的数据操作</p><p>​    对于要进行数据库操作的驱动程序，都需要拷贝到TomcatHOME/lib目录下即可(Tomcat需要重新启动才能加载新的包)</p><p>​    <strong>实际上，所有在JSP中的显示的内容永远都不是固定的，都是由程序动态生成的，在WebContainer中负责生成要显示的代码</strong></p><h4 id="4-包含指令"><a href="#4-包含指令" class="headerlink" title="4. 包含指令"></a>4. 包含指令</h4><p>​    一般要进行页面开发时都需要包含如下结构：菜单栏、头部信息、<strong>中间显示信息</strong>、尾部信息</p><p>​    一般都是中间显示信息发生变化，为实现这个有两种显示方式</p><ul><li>在每一个显示的页面里面重复包含有“菜单栏”、“头部信息”、“尾部信息”，这三个重复内容</li><li>将“菜单栏”、“头部信息”、“尾部信息”分别定义为三个文件，在需要的地方进行引用</li></ul><p>​    很明显第二种更加适合代码维护，所以此处就需要使用包含指令，但<strong>在JSP中对于包含指令有两种提供形式</strong></p><h5 id="1-静态包含：-lt-include-gt"><a href="#1-静态包含：-lt-include-gt" class="headerlink" title="1. 静态包含：&lt;%@include%&gt;"></a>1. 静态包含：<code>&lt;%@include%&gt;</code></h5><p>​    静态包含的语法：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@include file&#x3D;&quot;包含文件路径&quot;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>静态包含可以包含任意的文件内容</strong></p><p>​    范例：实现静态包含操作(定义几个被包含的页面)   </p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;1.jsp页面&lt;%@ page pageEncoding&#x3D;&#39;UTF-8&#39;%&gt;&lt;% String str &#x3D; &quot;这是页面一&quot;;%&gt;&lt;%&#x3D;str%&gt;&#x2F;&#x2F;2.html页面&lt;meta charset &#x3D; &quot;UTF-8&quot;&gt;&lt;%@ page pageEncoding&#x3D;&#39;UTF-8&#39;%&gt; &#x2F;&#x2F;保证引用后页面中文不会乱码&lt;h1&gt;这是页面2&lt;&#x2F;h2&gt;&#x2F;&#x2F;all.jsp&lt;%@ page contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;%&gt;&lt;%@include file&#x3D;&quot;2.html&quot;%&gt;&lt;%@include file&#x3D;&quot;1.jsp&quot;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：使用jsp包含html页面时，会一起编译为java代码进行处理，此时就需要对html页面进行设置防止乱码</strong></p><p>​    在这个程序中文件名为中文不影响结果</p><p>​    此时所有的页面都被包含显示在all.jsp中</p><h5 id="2-动态包含：-lt-jsp-include-gt"><a href="#2-动态包含：-lt-jsp-include-gt" class="headerlink" title="2. 动态包含：&lt;jsp:include&gt;"></a>2. 动态包含：<code>&lt;jsp:include&gt;</code></h5><p>​    静态包含只是简单的将文件进行包含，而动态包含则分为两种情况处理</p><ul><li><p>情况一：被包含的页面属于静态文件，那么就将静态包含一样直接将内容导入进去</p></li><li><p>情况二：被包含的页面属于动态页面，则要分别处理后再进行包含</p></li></ul><p>​    <strong>注意：动态包含给出的指令形式属于标签指令，标签指令最后必须完结</strong></p><p>​    动态包含的语法格式定义：</p><ul><li><p>定义一：包含的页面不接收递参数</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:include page&#x3D;&quot;路径&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>定义二：包含的页面需要接收参数</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:include page&#x3D;&quot;路径&quot;&gt;&lt;jsp:param name&#x3D;&quot;参数名称&quot; value&#x3D;&quot;参数内容&quot;&#x2F;&gt;&lt;jsp:param name&#x3D;&quot;参数名称&quot; value&#x3D;&quot;参数内容&quot;&#x2F;&gt;&lt;jsp:param name&#x3D;&quot;参数名称&quot; value&#x3D;&quot;参数内容&quot;&#x2F;&gt;...&lt;&#x2F;jsp:include&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​    <strong>注意：标签指令不能写在Scriptlet里面，其和HTML标签相似</strong></p><p>​    如果要在标签指令中使用Scriptlet里面定义的变量内容，则必须使用表达式输出的方式(<code>&lt;%=%&gt;</code>)</p><p>​    范例：实现参数的发送和接收</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;send.jsp,发送并显示receive.jsp界面&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;jsp:include page&#x3D;&quot;receive.jsp&quot;&gt;&lt;jsp:param name&#x3D;&quot;a&quot; value&#x3D;&quot;刘旭晟&quot;&#x2F;&gt;&lt;jsp:param name&#x3D;&quot;do&quot; value&#x3D;&quot;说&quot;&#x2F;&gt;&lt;jsp:param name&#x3D;&quot;proclaim&quot; value&#x3D;&quot;共产党万岁&quot;&#x2F;&gt;&lt;&#x2F;jsp:include&gt;&#x2F;&#x2F;receive.jsp,接收端需要接收参数传递内容&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;%&#x3D;request.getParameter(&quot;a&quot;)%&gt;&lt;%&#x3D;request.getParameter(&quot;do&quot;)%&gt;&lt;%&#x3D;request.getParameter(&quot;proclaim&quot;)%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-动态包含和静态包含的区别"><a href="#3-动态包含和静态包含的区别" class="headerlink" title="3. 动态包含和静态包含的区别"></a>3. 动态包含和静态包含的区别</h5><p>​    在静态导入时，如果导入的页面定义了Scriptlet变量且本页面也定义了一个一模一样名字的变量，则<strong>页面显示报错，如果执行报错后依然再次刷新会把错误给刷新没</strong></p><p>​    <strong>静态包含的最大特点为：先把内容包含到一起，而后一起进行处理</strong></p><p>​    在动态导入时，如果导入的页面定义了Scriptlet变量且本页面也定义了一个一模一样名字的变量，页面照常显示没有影响</p><p>​    <strong>动态包含的特点：</strong></p><ul><li>*<em>如果被包含页面是动态页面(</em>.jsp)，那么先分别处理两个页面的操作，而后将结果包含进来**</li><li>*<em>如果被包含的页面是静态页面(</em>.txt)，那么只是将文件内容简单的导入进来**</li></ul><p>​    动态包含相比静态包含可以在不同页面重复定义变量，更加安全</p><h4 id="5-跳转指令"><a href="#5-跳转指令" class="headerlink" title="5. 跳转指令"></a>5. 跳转指令</h4><p>​    跳转：从一个JSP页面可以跳转到另外一个JSP或其他页面</p><p>​    <strong>跳转指令依然输入标签指令形式，所以在跳转指令完成操作后依然要进行标签完结</strong></p><p>​    跳转指令的两种定义形式：</p><ul><li><p>定义一：不向跳转页面传递参数：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:forward page&#x3D;&quot;路径&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>定义二：向跳转页面传递参数</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:forward page&#x3D;&quot;路径&quot;&gt;&lt;jsp:param name&#x3D;&quot;参数名称&quot; value&#x3D;&quot;参数内容&quot;&#x2F;&gt;&lt;jsp:param name&#x3D;&quot;参数名称&quot; value&#x3D;&quot;参数内容&quot;&#x2F;&gt;&lt;jsp:param name&#x3D;&quot;参数名称&quot; value&#x3D;&quot;参数内容&quot;&#x2F;&gt;...&lt;&#x2F;jsp:forward&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​    范例：实现跳转</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;要跳转到的界面&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;h1&gt;&lt;%&#x3D;request.getParameter(&quot;paramA&quot;)%&gt;&lt;&#x2F;h1&gt;&lt;h1&gt;&lt;%&#x3D;request.getParameter(&quot;paramB&quot;)%&gt;&lt;&#x2F;h1&gt;&#x2F;&#x2F;跳转界面&lt;%@ page pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;jsp:forward page&#x3D;&quot;param.jsp&quot;&gt;&lt;jsp:param name&#x3D;&quot;paramA&quot; value&#x3D;&quot;int&quot;&#x2F;&gt;&lt;jsp:param name&#x3D;&quot;paramB&quot; value&#x3D;&quot;double&quot;&#x2F;&gt;&lt;&#x2F;jsp:forward&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    像以上代码这种跳转之后地址栏不发生改变，但页面内容发生改变，<strong>这种跳转称为服务器端跳转</strong></p><p>​    <strong>还有一种跳转会连地址栏一起跳转的叫客户端跳转</strong>，实现方式是使用Javascript，或者可以使用超链接跳转也是一样的</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"param.jsp"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    <strong>结论</strong>    </p><p>​    地址栏不改变的跳转称为服务器跳转</p><p>​    地址栏改变的跳转称为客户端跳转</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE-01</title>
      <link href="/2021/11/15/JavaEE-01/"/>
      <url>/2021/11/15/JavaEE-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Web与Tomcat"><a href="#Web与Tomcat" class="headerlink" title="Web与Tomcat"></a>Web与Tomcat</h2><h4 id="1-Web的简介"><a href="#1-Web的简介" class="headerlink" title="1. Web的简介"></a>1. Web的简介</h4><p>​    WEB最早出现是为了展示科研产品，到现在其发展超过预期，从WEB开始整个互联网的行业发生了变化</p><p>​    不管怎么改变WEB的处理流程永远都只有两种形式：<strong>静态WEB和动态WEB</strong></p><p>​    (1).静态WEB</p><p><a href="https://imgtu.com/i/IcNA3T"><img src="https://z3.ax1x.com/2021/11/14/IcNA3T.png" alt="IcNA3T.png"></a></p><p>​    在WEB中分为客户端与服务器端，而客户端主要通过WEB浏览器访问服务器端，并且使用的是HTTP协议</p><p>​    静态WEB的实现主要技术是：HTML、CSS、Javascript</p><p>​    <strong>静态WEB的缺点：无法操作数据库</strong></p><p>​    (2).动态WEB</p><p><a href="https://imgtu.com/i/Icaq41"><img src="https://z3.ax1x.com/2021/11/14/Icaq41.png" alt="Icaq41.png"></a></p><p>​    动态WEB与静态WEB一样，客户端上依然使用普通的WEB浏览器进行访问，但是服务器端的操作发生了变化</p><p>​    用户发送来的请求将由WEB服务插件进行接收，插件的主要功能是区分用户发送过来的是动态的还是静态的请求( * .htm为静态请求、 * .jsp为动态请求)，如果是静态请求，则由Web Server调用文件系统中的指定文件内容并发回给客户端(与静态Web相同)，但是如果发送为动态请求，则所有的请求交由Web容器进行处理。Web容器负责拼凑代码，拼凑完后交由Web Server返回给用户进行展示</p><p>​    <strong>动态Web的最大特征：交互性</strong></p><p>​    由于有Web容器的支持，所以动态Web可以进行数据库的连接访问</p><p>​    动态Web需要进行拼凑，所以总体上静态Web会快于动态Web</p><p>​    <strong>动态Web的实现可以使用的技术</strong></p><p>​    CGI，ASP，PHP，Servlet/JSP(Java做前台太费钱，也费劲)，RUBY，<strong>Node.JS</strong>，<strong>Python</strong></p><p>​    没有加粗的不用看，都是夕阳</p><p>​    核心本质没有变，还是Java处理整个后端业务(大脑)</p><p>​    <strong>注意：Web Container（Web容器）是决定整个动态Web的核心，所有的代码一定是拼凑而成，拼凑完后还是HTML代码</strong></p><h4 id="2-Tomcat的安装与配置"><a href="#2-Tomcat的安装与配置" class="headerlink" title="2. Tomcat的安装与配置"></a>2. Tomcat的安装与配置</h4><p>​    Tomcat是符合JavaEE标准的最小的Web容器</p><p>​    <strong>服务器与容器的区别</strong></p><p>​    服务器中会包含容器，除了容器之外服务器中还可能包含一些组件，例如：事务处理</p><p>​    <strong>Tomcat的下载</strong></p><p>​    去官网下载安装版，Tomcat本身很小，所以电脑上需要有额外的JDK，Tomcat在电脑中的运行必须有JDK的支持，或者简化版JRE支持，在安装Tomcat时会进行选择。</p><p>​    安装完成后会自动在Windows的服务里面进行服务的注册，但是不可以在这里启动</p><p>​    <strong>Tomcat的安装目录</strong></p><pre class="line-numbers language-none"><code class="language-none">C:\Program Files\Apache Software Foundation\Tomcat 10.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>bin：包含了所有的可执行的程序命令，使用“Tomcat10.exe”命令可以启动Tomcat服务器，<strong>打开服务器之后，就可以利用浏览器访问，输入：<a href="http://localhost:8080/">http://localhost:8080</a></strong></p></li><li><p>conf：包含了所有的配置文件路径信息</p></li><li><p>lib：这是一个Tomcat自己的CLASSPATH，可以在里面配置第三方的jar文件</p></li><li><p>logs：负责所有日志文件的保存目录</p></li><li><p>webapps：为项目的自动部署目录</p></li><li><p>work：保存所有的临时生成文件，如果程序则么都运行不了，但又没有错，可以考虑将此目录清空</p></li></ul><p>​    <strong>Tomcat的使用（配置虚拟目录）</strong></p><p>​    如果要在项目中使用Tomcat必须配置虚拟目录（核心）</p><p>​    虚拟目录指的就是工作目录，即，如果进行Web项目的开发，需要有一个指定结构的目录进行内容的保存，并且要在Tomcat中配置此目录</p><ol><li><p>在D盘建立一个lxsWeb的目录，这个目录作为虚拟目录存在</p></li><li><p>这个目录有建立要求，在这个目录中必须存在有一个WEB-INF/web.xml(大小写不能错)文件（从Tomcat的安装目录webapps-&gt;ROOT可以拷贝出来）</p></li><li><p>此时Tomcat不知道硬盘存在此目录，所以需要修改Tomcat的配置文件(conf/server.xml),在“<code>&lt;/Host&gt;</code> ”上面编写这行代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;Context path &#x3D; &quot;&#x2F;lxs&quot; docBase &#x3D; &quot;D:\lxsweb&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置意义：</p><ul><li><code>&lt;Context&gt;</code> ：表示配置一个新的上下文，结尾必须有<code>/</code> </li><li>path：为浏览器上的输入路径(<code>http://localhost:8080/lxs</code> )，名称不允许重复，此时通过上面的路径访问<code>D:\lxsweb</code> 目录下的内容</li><li>docBase：配置项目的磁盘路径，此目录下必须存在WEB-INF</li></ul></li><li><p>在默认情况下，如果直接输入路径会出现404(HTTP状态码，表示路径不可访问)错误，因为没有输入具体执行文件名称，输入后就可以访问。另外，从Tomca6.5开始关闭了页面列表功能，此时通过修改conf/web.xml文件打开列表，查找文件中listings，把其值改为true，此时就可以进行列表显示</p></li><li><p>默认情况下，所有的网络服务器都是有监听端口的，Tomcat默认的端口为8080端口，但是如果不想输入端口，则可以将监听端口设置为80这个默认端口(当你不写端口号时默认去寻找的就是80端口)，修改conf/server.xml文件即可</p><pre class="line-numbers language-none"><code class="language-none">&lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot; &#x2F;&#x2F;8080改为80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时访问时就不需要写端口8080了：<code>http://localhost/lxs/</code> ，此时如果加了8080反而进不去</p></li><li><p>也可以不使用localhost改用本机ip，通过cmd输入ipconfig，其中的IPv4地址，为本机ip地址，通过ip地址可以访问其ip的电脑</p></li></ol><p><strong>注意：所有的配置文件修改后，Tomcat需要重新启动才可以加载到新的内容</strong></p><h4 id="3-第一个JSP程序"><a href="#3-第一个JSP程序" class="headerlink" title="3. 第一个JSP程序"></a>3. 第一个JSP程序</h4><p>​    范例：在页面上输出”hello world”</p><p>​    此时需要定义一个JSP文件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello JSP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;%//此处为JSP代码out.println("hello world"); //页面输出%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    程序要想正常执行，必须将其保存在服务器工作区内(虚拟目录)，随后打开浏览器输入访问地址执行<a href="http://localhost/lxs/Hello.jsp">http://localhost/lxs/Hello.jsp</a></p><p>​    <strong>一般第一次会比第二次慢</strong></p><p>​    图示：Tomcat的原理</p><p><a href="https://imgtu.com/i/I24uXF"><img src="https://z3.ax1x.com/2021/11/15/I24uXF.png" alt="I24uXF.png"></a></p><ol><li><p>如果用户要访问服务器端的程序将通过浏览器输入访问地址</p></li><li><p>而后服务器端要读取hello.jsp文件，但这个时候并不是直接将这个文件发送给客户端</p></li><li><p>服务器端把hello.jsp文件变为hello.java的文件，并且会自动将这个 hello.java文件自动编译为 hello.class文件</p></li><li><p>之后将执行生成的hello.class文件，并且通过服务器端解析生成为HTML代码后发送给客户端浏览器</p><p>总结：第一次执行hello.jsp文件的时候需要将其转换和编译后才可以执行，而第二次访问由于 hello.class文件已经存在，不会再执行上面操作所以速度就快，但是如果文件发生变化，那么就会重新转换、编译</p></li></ol><p><strong>注意：所有转换和编译后的文件都保存在work目录下</strong></p><p>​    <strong>如果电脑变慢可能导致这个流程异常，即怎样修改文件都执行无变化，此时将Tomcat关上，而后将work目录清空即可</strong></p><p>​    范例：输出更多内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello JSP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;%//此处为JSP代码out.println("hello world"); //页面输出out.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>"); out.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">'</span>text/javascript<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>"); %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>关系</strong></p><p>​        <strong>JavaScript可以控制HTML代码的输出</strong></p><p>​        <strong>JSP可以控制JavaScript与HTML代码的输出</strong></p><h4 id="4-接收客户端请求数据"><a href="#4-接收客户端请求数据" class="headerlink" title="4. 接收客户端请求数据"></a>4. 接收客户端请求数据</h4><p>​    动态Web最大的特征就是交互性，而交互性的关键是必须由用户输入数据，在HTML中已经提供了表单给用户进行输入数据的空间，而所有的输入数据应由服务器端进行接收</p><p>​    <strong>如果要在服务器端接收数据可以使用操作：request.getParameter(String 参数名称(表单中的name属性))，该操作返回的是String型数据(可以通过正则验证且可以向任意数据类型转换)</strong></p><p>​    范例：编写表单–input.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>input.jsp<span class="token punctuation">"</span></span> <span class="token attr-name">method</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请输入信息：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>send<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    当点击提交按钮之后会自动的将表单的输入参数内容发送给服务器端，服务器端可以进行接收</p><p>​    范例：接收参数–input.jsp</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;%String str = request.getParameter("msg");out.println("<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>"+str+"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>");%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    此时用客户端输入的内容服务器端都可以接收到</p><p>​    <strong>注意：服务器若出现500，则表示代码错误</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java15</title>
      <link href="/2021/11/11/Java15/"/>
      <url>/2021/11/11/Java15/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h2><h4 id="1-多线程编程的本质就是并发编程"><a href="#1-多线程编程的本质就是并发编程" class="headerlink" title="1. 多线程编程的本质就是并发编程"></a>1. 多线程编程的本质就是并发编程</h4><p>​    并发编程的本质是指的发挥出所有硬件的最大性能</p><p>​    Java是为数不多的真正支持有多线程并发编程的开发语言，所以在整体的处理性能上是最高的</p><p>​    而python是多进程编程的注意区分</p><h4 id="2-进程"><a href="#2-进程" class="headerlink" title="2. 进程"></a>2. 进程</h4><p>​    传统硬件只有一个CPU(单核CPU)，为了发挥硬件的全部性能，引入了多进程编程模式</p><ul><li>进程指的是一个具有一定独立功能的程序关于某个数据集合的一次运行活动</li><li>进程是系统进行资源分配和调度运行的基本单位</li><li>进程实体中包含有三个组成部分：“程序”、“数据”、“PCB(进程控制块)”</li></ul><h4 id="3-单进程运行与多进程运行的区别"><a href="#3-单进程运行与多进程运行的区别" class="headerlink" title="3. 单进程运行与多进程运行的区别"></a>3. 单进程运行与多进程运行的区别</h4><p>​    单进程运行<br>​    所有的系统资源都为一个进程服务，该进程资源独享</p><p><a href="https://imgtu.com/i/5oHkGR"><img src="https://z3.ax1x.com/2021/10/26/5oHkGR.png" alt="5oHkGR.png"></a></p><p>​    多进程运行<br>​    在没有拓展原始系统硬件资源的前提下，利用一些算法，实现多个进程的并行执行</p><p>​    在每个进程执行时要独享全部资源，即在同一个时间点上只会有一个进程执行</p><p><a href="https://imgtu.com/i/5o7LPs"><img src="https://z3.ax1x.com/2021/10/26/5o7LPs.png" alt="5o7LPs.png"></a></p><h4 id="4-线程"><a href="#4-线程" class="headerlink" title="4. 线程"></a>4. 线程</h4><p>​    线程是在进程基础上的进一步划分，可以达到更快的处理性能，任何一个进程的启动都是非常缓慢的，线程性能上远高于进程，但是线程不可以离开进程存活</p><p>​    进程与线程图示</p><p><a href="https://imgtu.com/i/5oqIr6"><img src="https://z3.ax1x.com/2021/10/26/5oqIr6.png" alt="5oqIr6.png"></a></p><p>​    每一个进程都只有一个自己的重要处理单元，如果要想实现CPU(变量信息等)的共享，则必须利用线程来描述</p><p>​    一般来说，每一块CPU只会有一个线程执行，但有一些CPU可以使用超线程技术，设计出若干个多线程的执行状态，这叫<strong>超线程</strong></p><h4 id="5-并行编程"><a href="#5-并行编程" class="headerlink" title="5. 并行编程"></a>5. 并行编程</h4><p>​    随着硬件和软件技术的发展，硬件中的CPU出现了多核状态，理论上多核CPU的多进程执行称为并行编程</p><h4 id="6-纤-协-程"><a href="#6-纤-协-程" class="headerlink" title="6. 纤(协)程"></a>6. 纤(协)程</h4><p>​    在进程和线程的概念之上还有一个叫纤(协)程，是在线程基础上进一步划分，并不是像进程和线程一样由硬件支持，协程用的是由程序控制的<br>​    Java并没有支持有多协程编程（不代表以后没有），像python是支持多协程的</p><h4 id="7-多线程编程起步"><a href="#7-多线程编程起步" class="headerlink" title="7. 多线程编程起步"></a>7. 多线程编程起步</h4><p>​    所有的Java程序是通过主方法完成的，主方法作为程序的起点。而要进行多线程的编程也需要一个线程的起点结构，此结构称为线程类，所有的线程类是有继承要求的，可以有三种实现模式：<strong>继承Thread类、实现Runnable接口、实现Callable接口(两个接口更重要)</strong></p><h5 id="1-继承Thread类的实现多线程"><a href="#1-继承Thread类的实现多线程" class="headerlink" title="1. 继承Thread类的实现多线程"></a>1. 继承Thread类的实现多线程</h5><p>​    java.lang.Thread是由系统定义的一个线程处理类，<em>任何的子类只需要继承此类就可以得到一个线程处理的能力，在使用时一定要覆写Thread类中的run()方法</em>，<strong>这个方法将作为一个线程启动的主方法存在</strong></p><p>​    范例：定义一个<strong>线程主体类</strong></p><pre class="line-numbers language-none"><code class="language-none">class MyThread extends Thread&#123; &#x2F;&#x2F;得到了一个线程主体类private String name;public MyThread(String name) &#123; &#x2F;&#x2F;保存线程名称&#125;public void run() &#123; &#x2F;&#x2F;覆写run()方法for(int x &#x3D; 0; x &lt; 30 ; x++) &#123;System.out.println(&quot;【&quot;+this.name+&quot;线程】运行，x &#x3D; &quot;+x);&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>线程中主方法类和线程类的关系</strong><br>​    要在主类的主方法中启动线程<br>​    线程一般会多个交替执行，所以无法通过调用run()方法来调用线程<br>​    通过start()方法来开启线程<br><a href="https://imgtu.com/i/IpE5DS"><img src="https://z3.ax1x.com/2021/10/31/IpE5DS.png" alt="IpE5DS.png"></a></p><p>​    <strong>如果想要进行多线程的并发执行，则需要调用机器上操作系统提供的底层函数支持，所有多线程启动并不是依靠调用run()方法完成的，它需要通过start()方法进行启动，所有start()方法启动之后将调用run()方法中定义的方法体</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public void start()</td><td align="center">方法</td><td align="center">使线程开始执行，不能重复启动同一个进程，会造成异常</td></tr></tbody></table><p>​    <strong>注意：所有线程的启动只能依靠Thread.start()方法</strong></p><p>​    范例：启动多线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    所有线程对象交替执行run()方法中的内容</p><p>​    <strong>在start()方法里面调用了一个start0()方法，该方法没有方法体，但由关键字native来定义，此关键字的作用在于表示此操作交由底层实现</strong></p><p><a href="https://imgtu.com/i/IpeYNQ"><img src="https://z3.ax1x.com/2021/10/31/IpeYNQ.png" alt="IpeYNQ.png"></a></p><h5 id="2-实现Runnable接口实现多线程"><a href="#2-实现Runnable接口实现多线程" class="headerlink" title="2. 实现Runnable接口实现多线程"></a>2. 实现Runnable接口实现多线程</h5><p>​    可以通过java.lang.Runnable接口来实现多线程</p><table><thead><tr><th align="center">接口名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@FunctionalInterface public interface <strong>Runnable</strong></td><td align="center">函数式接口，里面可以使用nameda表达式</td></tr></tbody></table><p>​    在Runnable接口中只有唯一一个方法–run()方法，此方法作为线程主方法</p><p>​    **注意：之前Thread类中有提供start()方法启动线程，但是Runnable接口中不提供这个方法，此时需要Thread类提供的构造方法</p><pre class="line-numbers language-none"><code class="language-none">public Thread(Runnable target)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>这个构造方法里面需要接收Runnable接口对象的实例（子类对象实例）</strong></p><p>​    范例：使用Runnable接口实现多线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">MyThread</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MyThread</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MyThread</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    使用Runnable接口实现可以避免单继承局限(在Java中一个类只能使用extends继承一个父类),更加适合项目编写</p><p>​    在JDK1.8之后Runnable成为了函数式接口,所以此时的代码可以使用Lambda进行定义</p><p>​    <strong>Lambda表达式</strong></p><pre class="line-numbers language-none"><code class="language-none">()-&gt;&#123;&#125;  &#x2F;&#x2F;()表输入参数,&#123;&#125;里面是表达式或者返回值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    范例：使用Lambda表达式修改Runnable接口程序实现多线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"个线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    此时Lambda表达式本质上还是Runnable接口的实例</p><p>​    <strong>Thread类与Runnable接口关系</strong></p><p><a href="https://imgtu.com/i/ICrjVP"><img src="https://z3.ax1x.com/2021/11/01/ICrjVP.png" alt="ICrjVP.png"></a></p><ol><li><p>为什么Thread接收Runnable接口对象之后，会去调用真实线程类中的run()方法呢？</p><p>因为当Runnable接口传递到Thread类中之后，会自动利用Thread类中的target属性保存Runnable的接口实例</p></li><li><p>观察Thread类中的run()方法（调用start()就调用Thread类中的run()方法）</p><p>Thread.run()方法定义的时候会判断是否有target实例，如果有此实例，则调用相应的run()方法</p></li></ol><p>​    <strong>多个线程并行操作同一个资源</strong></p><p>​    Runnable接口相比较Thread类更容易描述</p><p>​    范例：观察资源共享</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">MyThread</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">30</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"票数"</span><span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    代码理解图示</p><p><a href="https://imgtu.com/i/IC5xIJ"><img src="https://z3.ax1x.com/2021/11/01/IC5xIJ.png" alt="IC5xIJ.png"></a></p><p>​    <strong>核心结论</strong></p><p>​    <strong>多线程的实现主要依靠Runnable来定义核心的业务处理功能，但是所有关于线程的控制都通过Thread类定义</strong></p><h5 id="3-Callable实现多线程"><a href="#3-Callable实现多线程" class="headerlink" title="3. Callable实现多线程"></a>3. Callable实现多线程</h5><p>​    Java多线程最初依靠Runnable接口来定义线程核心功能类，<strong>但是Runnable接口的run()方法没有返回值</strong></p><p>​    从JDk1.5开始，Java提供一个新的多线程实现接口：Callable，<strong>该接口定义在java.util.concurrent(JUC)，一共提供了三个JUC包</strong></p><p>​    </p><table><thead><tr><th align="center">接口名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@FunctionalInterface public interface Callable&lt; V &gt;</td><td align="center">(函数式接口)在java.util.concurrent包中提供的Callable接口</td></tr></tbody></table><p>​    Callable接口中提供的方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">V <strong>call()</strong> throws Exception</td><td align="center">方法</td><td align="center">描述线程的主体方法，与上面的run()方法相同但提供返回值</td></tr></tbody></table><p>​    使用call()方法定义线程主体，线程执行完毕后会将处理结果进行返回</p><p>​    范例：用callable定义线程核心业务类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">300</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"票数"</span><span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"执行完成"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>Callable接口与Thread类的关系图</strong></p><p><a href="https://imgtu.com/i/IuYocT"><img src="https://z3.ax1x.com/2021/11/05/IuYocT.png" alt="IuYocT.png"></a></p><p>​    要充分理解这个关系，通过与Thread类相联系才可以用start()方法启动线程</p><p>​    范例：启动Callable的多线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xpath<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>objects<span class="token punctuation">.</span></span><span class="token class-name">XString</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> callA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> callB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> futurecallA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>callA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futurecallA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futurecallA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>futurecallA<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">30</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"票数"</span><span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"执行完成"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    Callable和Runnable两个多线程接口的差别在于是否有返回值</p><p>​    <strong>多线程的几种状态</strong></p><p><a href="https://imgtu.com/i/IQEGtg"><img src="https://z3.ax1x.com/2021/11/06/IQEGtg.png" alt="IQEGtg.png"></a></p><p>​    </p><p>​    所有的系统的资源是有限的，不管多线程还是多进程都必须在执行一段时间之后让出资源，交由其他的线程继续执行</p><ol><li>创建过程：开发者定义好了相应的线程类对象(每一个Thread类的实例)</li><li>就绪状态：多线程的启动依靠的是start()方法，当调用start()方法的时候所有的线程不是立即执行，而是将进入到等待状态，等待CPU进行调度</li><li>执行状态：当CPU执行调度到了某个线程对象之后，该线程对象开始执行run()方法或call()方法，此时不是持续占用资源，而是在一段时间之后(一共时间片时间)，该线程就需要暂停执行</li><li>阻塞状态：当某个线程不再执行时(中断、休眠或调度失败)，那么所有的线程将进入到阻塞状态，如果此时线程没有执行完毕，则由阻塞状态切换到就绪状态，重新等待CPU执行调度</li><li>终止状态：如果多线程的执行体执行完毕或者被强制性的结束，那么就将进入到终止状态，终止状态不会再进入到就绪状态，即该线程对象将不会被继续执行</li></ol><h4 id="8-多线程操作方法-Thread类"><a href="#8-多线程操作方法-Thread类" class="headerlink" title="8. 多线程操作方法(Thread类)"></a>8. 多线程操作方法(Thread类)</h4><p>​    Thread类是实现线程的控制，所以除了有启动多线程的方法之外，也包含一些其他方法</p><h5 id="1-线程的命名与获取"><a href="#1-线程的命名与获取" class="headerlink" title="1. 线程的命名与获取"></a>1. 线程的命名与获取</h5><p>​     对于所有的线程对象而言，只能通过名称来进行线程的唯一标记</p><p>​    Thread类提供有方法实现线程名称的操作</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public Thread(Runnable target, String name)</td><td align="center">构造方法</td><td align="center">接收Runnable以及线程的名字</td></tr><tr><td align="center">public final void setName(String name)</td><td align="center">方法</td><td align="center">设置&amp;修改线程名字（一般不要去改）</td></tr><tr><td align="center">public final String getName()</td><td align="center">方法</td><td align="center">返回线程的名字</td></tr><tr><td align="center">public <strong>static</strong> Thread currentThread()</td><td align="center">方法</td><td align="center">返回对当前执行的线程对象的引用(因为线程不可控，你不知道执行到哪一个线程了)</td></tr></tbody></table><p>​    范例：线程名字的获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//等同于创造一个Runnable实例</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>th<span class="token punctuation">,</span><span class="token string">"线程A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>th<span class="token punctuation">,</span><span class="token string">"线程B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"线程运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：如果没有为线程设置名称，线程会自动生成线程名称</p><p>​    如果不使用start()启动run方法，而是直接类名.run()，<strong>此时是main()线程运行，即main方法本身就是一个线程，主线程</strong></p><p>​    当用户使用java命令解释一个类的时候，实际上会启动一共JVM的进程，<strong>即所有JVM程序运行时都会默认启动一个新的进程，所有的线程都是在这个进程产生的，该进程执行时默认启动一共主线程，又由主线程创建若干个子线程，所有线程并行执行</strong></p><h5 id="2-线程的休眠"><a href="#2-线程的休眠" class="headerlink" title="2. 线程的休眠"></a>2. 线程的休眠</h5><p>​    一般情况下线程对象只要启动了，那么就会持续的运行，一直到其运行完毕为止，<strong>如果想减慢线程的执行速度，就可以对其使用休眠处理</strong></p><p>​    Thread类中提供线程休眠操作的方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public <strong>static</strong> void sleep(long millis) throws InterruptedException</td><td align="center">方法</td><td align="center">休眠，单位毫秒</td></tr><tr><td align="center">public static void sleep(long millis, int nanos) throws InterruptedException</td><td align="center">方法</td><td align="center">休眠，单位毫秒，纳秒</td></tr></tbody></table><p>​    以第一个方法为主，<strong>sleep()方法为静态方法，静态调用即可</strong></p><p>​    <strong>InterruptedException为中断异常，所有的休眠都会有中断的问题</strong></p><h5 id="3-线程的中断"><a href="#3-线程的中断" class="headerlink" title="3. 线程的中断"></a>3. 线程的中断</h5><p>​    所有线程的执行都是可以被中断的</p><p>​    Thread类中提供有中断处理的方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public void interrupt()</td><td align="center">方法</td><td align="center">中断线程</td></tr><tr><td align="center">public boolean isInterrupted()</td><td align="center">方法</td><td align="center">判断线程的中断状态</td></tr></tbody></table><p>​    范例：线程中断处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"执行中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程的是否中断"</span><span class="token operator">+</span>my<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//主线程打断my线程</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程的是否中断"</span><span class="token operator">+</span>my<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>线程中断的本质：一个线程被另外一个线程打断执行</strong></p><p>​    线程一旦被中断之后会引发中断异常</p><h5 id="4-线程的强制执行-强制让出资源"><a href="#4-线程的强制执行-强制让出资源" class="headerlink" title="4. 线程的强制执行(强制让出资源)"></a>4. 线程的强制执行(强制让出资源)</h5><p>​    当一个程序有若干个线程时，那么这若干个线程一定是交替执行的状态。但如果某个线程特别急，需要优先处理完成，则可以使用线程的强制执行</p><p>​    Thread类中提供了强制执行的方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public final void join() throws InterruptedException</td><td align="center">方法</td><td align="center">程序会等待调用join方法的线程运行完，再执行当前线程</td></tr><tr><td align="center">public final void join(long millis) throws InterruptedException</td><td align="center">方法</td><td align="center">程序会等待调用join方法的线程运行若干毫秒，再执行当前线程</td></tr><tr><td align="center">public final void join(long millis, int nanos) throws InterruptedException</td><td align="center">方法</td><td align="center">程序会等待调用join方法的线程运行若干毫秒以及纳秒，再执行当前线程</td></tr></tbody></table><p>​    范例：线程的强制执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里应当调主线程实例，让主线程先执行，而不是自己让自己执行</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行，x ="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行，x ="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：像这样自己让自己先执行的话，这个线程之间就不会继续运行了</strong></p><h5 id="5-线程的礼让"><a href="#5-线程的礼让" class="headerlink" title="5. 线程的礼让"></a>5. 线程的礼让</h5><p>​    礼让指让出当前执行操作，类似让座，多线程并行执行时，礼让一次其他线程让它优于礼让的线程先执行</p><p>​    Thread类中提供礼让操作的方法：</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public <strong>static</strong> void yield()</td><td align="center">方法</td><td align="center">让当前线程让出一次，让其他线程优先执行一次</td></tr></tbody></table><p>​    范例：线程的礼让</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> a <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"礼让"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行，x ="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"子线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行 , j ="</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：线程礼让不一定会成功，可能失败</strong></p><h5 id="6-线程的优先级"><a href="#6-线程的优先级" class="headerlink" title="6. 线程的优先级"></a>6. 线程的优先级</h5><p>​    理论上线程的优先级越高，越有<strong>可能先执行</strong></p><p>​    在Thread类中提供有优先级的操作方法：</p><table><thead><tr><th align="center">方法及常量</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public final void setPriority(int newPriority)</td><td align="center">方法</td><td align="center">设置优先级，int newPriority的范围为[MIN_PRIORITY ~ MAX_PRIORITY]</td></tr><tr><td align="center">public final int getPriority()</td><td align="center">方法</td><td align="center">获取当前线程优先级</td></tr><tr><td align="center">public static final int MIN_PRIORITY</td><td align="center">常量</td><td align="center">最低优先级（整型数值为1）</td></tr><tr><td align="center">public static final int NORM_PRIORITY</td><td align="center">常量</td><td align="center">中等优先级（整型数值为5）</td></tr><tr><td align="center">public static final int MAX_PRIORITY</td><td align="center">常量</td><td align="center">最高优先级（整型数值为10）</td></tr></tbody></table><p>​    范例：设置线程优先级</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行 , x ="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"线程A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"线程B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>my<span class="token punctuation">,</span><span class="token string">"线程C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：一般未设置优先级时，子线程优先级为NORM_PRIORITY，主线程优先级为NORM_PRIORITY</strong></p><h4 id="9-多线程的同步与死锁"><a href="#9-多线程的同步与死锁" class="headerlink" title="9. 多线程的同步与死锁"></a>9. 多线程的同步与死锁</h4><p>​    多线程的优势在于，可以使用多个并行的程序处理同一个操作业务，这样可以实现业务功能的快速处理，但是<strong>在进行多个线程并发资源访问的时候也会造成不同步的因素</strong></p><h5 id="1-同步问题引出"><a href="#1-同步问题引出" class="headerlink" title="1. 同步问题引出"></a>1. 同步问题引出</h5><p>​    设计一个多线程买票程序，一共一百张票，要五个线程进行售票处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">TicketThread</span> th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>th<span class="token punctuation">,</span><span class="token string">"售票"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">TicketThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">120</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"卖票，剩余票数为："</span><span class="token operator">+</span> x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    会发现运行结果的问题</p><p><a href="https://imgtu.com/i/IaYMUs"><img src="https://z3.ax1x.com/2021/11/10/IaYMUs.png" alt="IaYMUs.png"></a></p><p>​    这就是线程不同步</p><p>​    <strong>图示：</strong></p><p><a href="https://imgtu.com/i/IaNHEQ"><img src="https://z3.ax1x.com/2021/11/10/IaNHEQ.png" alt="IaNHEQ.png"></a></p><p>​    <strong>注意：线程的休眠只是放大问题，不是问题的本因</strong></p><p>​    <strong><em>不同步问题核心的本质：多个线程并行执行操作</em></strong></p><h5 id="2-线程同步处理"><a href="#2-线程同步处理" class="headerlink" title="2. 线程同步处理"></a>2. 线程同步处理</h5><p>​    要解决上面的问题，需要使用同步，而<strong>同步就是指：多个操作在同一个时间段内只能有一个线程进行，其他线程要等待此线程完成之后才可以继续执行</strong></p><p>​    线程的同步处理通过<strong>synchronized</strong>关键字来实现</p><p>​    <strong>synchronized的使用有两种模式：同步代码块和同步方法</strong></p><ul><li><p>同步代码块</p><p>指使用synchronized关键字定义的代码块，在进行使用时<strong>必须要设置一个同步的对象</strong>，这个对象往往为当前资源的对象，<strong>可以使用this描述</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//所有的同步处理操作代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>范例：更改上面售票代码，实现同步处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">TicketThread</span> th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TicketThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>th<span class="token punctuation">,</span><span class="token string">"售票"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">TicketThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span>  <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">120</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"卖票，剩余票数为："</span><span class="token operator">+</span> x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当使用了同步代码块之后，所有的线程一个一个的执行，所以这个时候就解决了数据并发访问的安全问题，<strong>但是会带来执行性能过慢的性能问题</strong></p></li></ul><ul><li><p>同步方法</p><p>指的是使用了“synchronized”关键字定义的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 <span class="token keyword">synchronized</span> 返回值 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//需要同步的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>  <strong>注意：同步方法比同步代码块更常见</strong></p><h5 id="3-死锁"><a href="#3-死锁" class="headerlink" title="3. 死锁"></a>3. 死锁</h5><p>​    <em>同步的本质：一个线程要等待其他线程执行完毕</em></p><p>​    <strong>synchronized关键字</strong></p><p>​    <strong>synchronized的作用域默认是当前对象，这时锁就是对象，谁拿到这个锁谁就可以运行它所控制的那段代码。如果这个对象有多个synchronized方法，其它线程就不能同时访问这个对象中任何一个synchronized方法</strong></p><p>​    在项目中，不正当的同步处理有可能造成死锁，<strong>即两个线程彼此相互等待</strong></p><pre><code>  范例：死锁的产生情况**（本身无意义）**</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span>  <span class="token class-name">Play</span> play <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span>  <span class="token class-name">Learn</span> learn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Learn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>play<span class="token punctuation">.</span><span class="token function">said</span><span class="token punctuation">(</span>learn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>learn<span class="token punctuation">.</span><span class="token function">said</span><span class="token punctuation">(</span>play<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Play</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">said</span><span class="token punctuation">(</span><span class="token class-name">Learn</span> learn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩完就学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>learn<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学完了，这就去玩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Learn</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">said</span><span class="token punctuation">(</span><span class="token class-name">Play</span> play<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学完才能玩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>play<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩完了，这就去学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在实际的项目中，死锁是通过大量的程序测试得出来的，上述代码只是死锁的表现，不具有真实开发意义</p><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java14</title>
      <link href="/2021/10/25/Java14/"/>
      <url>/2021/10/25/Java14/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h4 id="1-泛型是在JDK1-5之后主要引入的一项技术，其主要的目的是为了解决类对象的安全隐患问题"><a href="#1-泛型是在JDK1-5之后主要引入的一项技术，其主要的目的是为了解决类对象的安全隐患问题" class="headerlink" title="1. 泛型是在JDK1.5之后主要引入的一项技术，其主要的目的是为了解决类对象的安全隐患问题"></a>1. 泛型是在JDK1.5之后主要引入的一项技术，其主要的目的是为了解决类对象的安全隐患问题</h4><h4 id="2-泛型问题的引出"><a href="#2-泛型问题的引出" class="headerlink" title="2. 泛型问题的引出"></a>2. 泛型问题的引出</h4><p>​    在Java中，最方便的参数统一使用Object类型，但是并不是意味所有的Object都可以解决实际问题</p><p>​    现在假设需要一个描述坐标点的信息类(Point)，该类中可以保存三种坐标类型</p><ul><li><p>保存整型</p></li><li><p>保存浮点型</p></li><li><p>保存字符串</p></li></ul><p>​    此时，要保证三类数据的保存，只有通过Object类型可以解决</p><p>​    <strong>Point类的设计</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Object</span> x<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Object</span> y<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token class-name">Object</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setY</span><span class="token punctuation">(</span><span class="token class-name">Object</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在使用这个类时，需要进行向上转型输入和向下转型输出。但是，由于Object所能描述的范围太广泛了，所以<strong>可能传入了字符串类型任何转型时不小心转为了int(其他)类型</strong>，此时代码在<strong>编译时可以通过，执行时出现”ClassCastException“异常</strong>，<strong>由此可以看出Object提供的解决方案实际上会存在安全隐患</strong>，所以Object类作为参数是项目中最大的败笔</p><h4 id="3-泛型基本定义"><a href="#3-泛型基本定义" class="headerlink" title="3. 泛型基本定义"></a>3. 泛型基本定义</h4><p>​    通过分析Object作为参数的优缺点，<strong>要想解决对象转型安全隐患问题，最简单的方式就是不转型</strong><br>​    JDk1.5后提供了泛型的概念，泛型&lt; T &gt;最大的特点为，类中的属性类型或方法的参数，可以在类的使用时，动态决定<br>​    <strong>范例：修改Point类的设计</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span> <span class="token comment">//T表示Type的意思，不一定要T写其他的也可以</span><span class="token keyword">private</span> <span class="token class-name">T</span> x<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">T</span> y<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token class-name">T</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setY</span><span class="token punctuation">(</span><span class="token class-name">T</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在Point类上定义的泛型T实际上只是一个随机设置的名称，表示的是，该类型由使用的时候来决定，<strong>泛型使用时只能使用引用数据类型，不能使用基本类型</strong></p><p>​    范例：使用泛型声明的类Point</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) throws Exception&#123;Point&lt;Integer&gt; a &#x3D; new Point&lt;Integer&gt;();a.setX(10);a.setY(20);System.out.println(&quot;x &#x3D; &quot;+a.getX()+ &quot;,y &#x3D; &quot;+a.getY());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    注意：使用泛型后，所有程序之中具有泛型标记的部分都会更换为相应的类型标记，这个标记在类对象实例化的时候进行动态的配置，此时就不需要转型了，而且编译时会帮助检测错误</p><p>​    <strong>注意：如果使用了泛型设计类但是使用这个类并没有给泛型，那么会把泛型中所有的T变成Object类型，Object的使用就需要转型了</strong></p><h4 id="4-泛型通配符"><a href="#4-泛型通配符" class="headerlink" title="4. 泛型通配符"></a>4. 泛型通配符</h4><p>​    泛型的出现解决了数据类型的转换安全问题，但是随之而来也会带来引用传递的麻烦。<strong>为解决该问题则用通配符对形参进行约束</strong></p><p>​    范例：泛型的引用传递</p><pre class="line-numbers language-none"><code class="language-none">package hello;class Message&lt;T&gt;&#123;private T info;public void setMessage(T info) &#123;this.info &#x3D; info;&#125;public T getMessage() &#123;return this.info;&#125;&#125;public class First&#123;public static void main(String[] args) throws Exception&#123;Message&lt;String&gt; msg &#x3D; new Message&lt;String&gt;();msg.setMessage(&quot;篮球&quot;);print(msg);&#125;public static void print(Message&lt;String&gt; msg) &#123;System.out.println(msg.getMessage());&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：</strong></p><ol><li>泛型作为形参不可以作为重载标识，重载的参数类型名以类名作为标识与泛型无关</li><li>泛型在作为形参时需要注明泛型的类型</li><li>如果没有声明泛型类型，传过来则使用Object类型来代替未设置的泛型标记，也就说传过来后的泛型可以设置成任意类型</li></ol><p>​    <em>为了解决3这个问题，泛型里提供了通配符”?“</em><br>​    使用通配符”?“会限制程序不可以修改传过来的对象，此时对象仍然为object类型(可以描述一切的泛型类型)，但无法进行修改(取和改)</p><p>​    在通配符?的基础之上，又产生了两个通配符的应用：</p><ul><li>设置泛型的下限：? super类;<br>​    例如：”? super String“，表示可以设置的泛型类只能够是String以及其父类(Object)</li><li>设置泛型的上限：? extands 类;<br>​    例如：”? extends Number“：表示所设置的泛型类型只能够是Number或者其子类<br>​    <strong>注意：泛型的上限可以对类进行修饰(类&lt; T extends 类(界限)&gt;)</strong></li></ul><h4 id="5-泛型接口"><a href="#5-泛型接口" class="headerlink" title="5. 泛型接口"></a>5. 泛型接口</h4><p>​    泛型也可以应用在接口上，此类接口称为泛型接口</p><p>​    泛型接口的定义</p><pre class="line-numbers language-none"><code class="language-none">interface IMessage&lt;T&gt;&#123;public void send(T content);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    所有的接口在使用的时候都必须依靠子类，那么在此时子类有两种实现泛型接口的方式</p><ul><li>方式一：在子类中继续指定泛型标记<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">IMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">T</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MessageImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">IMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">T</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">IMessage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后面的String可以省略，尖括号还是需要</span>a<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​    上面代码的注释中，在JDK1.8出现了一个自动推导泛型的概念，因为每一次前后都需要编写泛型类型，过于复杂，所以现在前面定义了泛型类型，那么后面就可以不需要重复定义了</p><ul><li>方式二：子类不再设置泛型类型，而为父类指派好类型</li></ul><pre class="line-numbers language-none"><code class="language-none">package hello;interface IMessage&lt;T&gt;&#123;public void send(T content);&#125;class MessageImpl implements IMessage&lt;String&gt;&#123;public void send(String content) &#123; System.out.println(content);&#125;&#125;public class First&#123;public static void main(String[] args) throws Exception&#123;IMessage&lt;String&gt; a &#x3D; new MessageImpl();a.send(&quot;hello&quot;);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-泛型方法"><a href="#6-泛型方法" class="headerlink" title="6. 泛型方法"></a>6. 泛型方法</h4><p>​    所有泛型方法不一定非要定义在泛型的类或泛型接口之中，这也就是说任意一个方法都可以定义为泛型方法，但是需要对泛型标记（&lt;  T &gt;）加以声明</p><p>​    范例：定义泛型方法<br>​    此时对于传入的参数类型就由调用方法的语句来外部定义了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//T[]表示T类型数组</span><span class="token keyword">return</span> args<span class="token punctuation">;</span> <span class="token comment">//返回是类对象</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    知道一个方法如何去定义一个泛型就行了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射实例</title>
      <link href="/2021/10/25/%E5%8F%8D%E5%B0%84%E5%AE%9E%E4%BE%8B/"/>
      <url>/2021/10/25/%E5%8F%8D%E5%B0%84%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-静态工厂"><a href="#1-静态工厂" class="headerlink" title="1. 静态工厂"></a>1. 静态工厂</h3><pre class="line-numbers language-none"><code class="language-none">package hello;public class First&#123;public static void main(String[] args) throws Exception&#123;Message msg &#x3D; factory.getMessage(&quot;PaperMessage&quot;);msg.send(&quot;静态工厂&quot;);&#125;&#125;interface Message&#123;public void send(String msg);&#125;class PaperMessage implements Message&#123;public void send(String msg) &#123;System.out.println(&quot;【报纸报道】：&quot;+ msg);&#125;&#125;class InternalMessage implements Message&#123;public void send(String msg) &#123;System.out.println(&quot;【网络报道】：&quot;+ msg);&#125;&#125;&#x2F;&#x2F;工厂类，隐藏构造方法，提供分发的方法class factory&#123;private factory() &#123;&#125;public static Message getMessage(String className) &#123;if(&quot;PaperMessage&quot;.equals(className)) &#123;return new PaperMessage();&#125;else if(&quot;InternalMessage&quot;.equals(className)) &#123;return new InternalMessage();&#125;elsereturn null;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用反射修改后的静态工厂"><a href="#2-使用反射修改后的静态工厂" class="headerlink" title="2. 使用反射修改后的静态工厂"></a>2. 使用反射修改后的静态工厂</h3><pre class="line-numbers language-none"><code class="language-none">package hello;import java.lang.reflect.InvocationTargetException;public class First&#123;public static void main(String[] args) throws Exception&#123;Message msg &#x3D; factory.getMessage(&quot;hello.PaperMessage&quot;);msg.send(&quot;静态工厂&quot;);&#125;&#125;interface Message&#123;public void send(String msg);&#125;class PaperMessage implements Message&#123;public void send(String msg) &#123;System.out.println(&quot;【报纸报道】：&quot;+ msg);&#125;&#125;class InternalMessage implements Message&#123;public void send(String msg) &#123;System.out.println(&quot;【网络报道】：&quot;+ msg);&#125;&#125;&#x2F;&#x2F;使用反射修改了工厂类class factory&#123;private factory() &#123;&#125;public static Message getMessage(String className) &#123;Message msg &#x3D; null;try &#123;msg &#x3D; (Message)Class.forName(className).getDeclaredConstructor().newInstance();&#125; catch (Exception e) &#123;e.printStackTrace();&#125;return msg;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-反射获取类结构"><a href="#3-反射获取类结构" class="headerlink" title="3. 反射获取类结构"></a>3. 反射获取类结构</h3><pre class="line-numbers language-none"><code class="language-none">package hello;import java.util.Arrays;public class First&#123;public static void main(String[] args)&#123;Class&lt;?&gt; clazz &#x3D; D.class;System.out.println(&quot;【包名称：】&quot;+clazz.getPackageName());System.out.println(&quot;【继承的父类：】&quot;+clazz.getSuperclass());System.out.println(&quot;【继承的接口：】&quot;+Arrays.toString(clazz.getInterfaces()));&#125;&#125;interface A&#123;&#125;interface B&#123;&#125;abstract class C implements A,B&#123;&#125;abstract class D extends C implements A,B&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java13</title>
      <link href="/2021/10/24/Java13/"/>
      <url>/2021/10/24/Java13/</url>
      
        <content type="html"><![CDATA[<h2 id="反射-Class-lt-gt"><a href="#反射-Class-lt-gt" class="headerlink" title="反射(Class&lt; ? &gt;)"></a>反射(Class&lt; ? &gt;)</h2><h4 id="1-Java的反射机制"><a href="#1-Java的反射机制" class="headerlink" title="1. Java的反射机制"></a>1. Java的反射机制</h4><p>​    Java语言最为重要的特性之一就是反射机制的存在，这个机制使得Java设计更加的灵活<br>​    要写出高复用的代码就要去学习Java反射，几乎所有的Java开发框架都为Java的反射应用</p><h4 id="2-反射的“反”"><a href="#2-反射的“反”" class="headerlink" title="2. 反射的“反”"></a>2. 反射的“反”</h4><p>​    在常规的做法是明确知道一个类之后，导入此类随后进行对象实例化处理，但反射可以依据实例化对象找到其根源。</p><h4 id="3-Object类中的getClass-方法"><a href="#3-Object类中的getClass-方法" class="headerlink" title="3. Object类中的getClass()方法"></a>3. Object类中的getClass()方法</h4><table><thead><tr><th>public final Class&lt;?&gt;  getClass()</th></tr></thead><tbody><tr><td>获得该类型详细描述。Class&lt;?&gt;的意思为记录了该类的一切信息</td></tr></tbody></table><p>​    <strong>注意：该方法不能被重写</strong></p><h4 id="4-反射的根源是Class类，Java对实例化的操作提供三类支持，实际项目都是混用都重要"><a href="#4-反射的根源是Class类，Java对实例化的操作提供三类支持，实际项目都是混用都重要" class="headerlink" title="4. 反射的根源是Class类，Java对实例化的操作提供三类支持，实际项目都是混用都重要"></a>4. 反射的根源是Class类，Java对实例化的操作提供三类支持，实际项目都是混用都重要</h4><ol><li>利用Object类中提供的getClass()方法，通过实例化调用获得</li><li>利用“类.class”的Java原生代码操作实现<br>示例<pre class="line-numbers language-none"><code class="language-none">Class&lt;?&gt; clsA &#x3D; java.util.Date.class  &#x2F;&#x2F;这个类必须存在<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>利用Class类中提供的forName()方法进行实例化<table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public <strong>static</strong> Class&lt; ? &gt; forName(String className) <strong>throws ClassNotFoundException</strong></td><td align="center">此类方法需要将加载反射类型的名称进行定义(通过字符串描述要使用类的名称)，而且定义的时候要求使用类的完整名称“包.类”，如果该类不存在则会出现”ClassNotFoundException”，也就意味着要进行加载的类一定要放在CLASSPATH可以识别</td></tr></tbody></table></li></ol><p>​    示例</p><pre class="line-numbers language-none"><code class="language-none">Class&lt;?&gt; clsA &#x3D; Class.forName(&quot;java.util.Date&quot;) &#x2F;&#x2F;需要包.类<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个与第二个的区别是第二个必须要类存在,这个写错的话会报异常</p><p>​    <strong>总结：三种形式获取Class类实例的特点</strong></p><ul><li>**getClass()**：需要明确的获得使用类的实例化对象；</li><li><strong>类.class</strong>：需要明确的进行操作类的导入处理；</li><li>**Class.forName()**：可以通过字符串描述要使用类的名称(最灵活的)</li></ul><p>​    <strong>注意：反射可以用来代替“new”操作符进行实例化对象，但其操作和“new”关键字一样受到类的构造方法的约束，如果类构造方法为private，在类外它一样不可以实例化对象</strong></p><h4 id="5-反射应用案例"><a href="#5-反射应用案例" class="headerlink" title="5. 反射应用案例"></a>5. 反射应用案例</h4><h5 id="1-反射对象实例化"><a href="#1-反射对象实例化" class="headerlink" title="1. 反射对象实例化"></a>1. 反射对象实例化</h5><p>​    获取Class类对象之后最大用处在于可以直接利用反射提供的方法调用指定类的构造实现对象的实例化，此操作的方法为：</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public <strong>T</strong> newInstance() <strong>throws InstantiationException, IllegalAccessException</strong></td><td align="center">反射实例化对象，<strong>T表示返回值为Object类型</strong></td></tr></tbody></table><p>注意：由于反射定义中的泛型比较尴尬所以出现“?”居多，“?”的返回为Object</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;clazz表示class的实例化对象Class&lt;?&gt; clazz &#x3D; Class.forName(&quot;java.util.Date&quot;);Object obj &#x3D; clazz.newInstance(); &#x2F;&#x2F;反射实例化对象，相当于表示“new java.util.Date()”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：上面代码反射为Object类型，如果要使用Date类的对象需要对obj进行向下转型，若只是需要对象则可以直接使用obj</strong></p><h5 id="2-反射与工厂设计模式"><a href="#2-反射与工厂设计模式" class="headerlink" title="2. 反射与工厂设计模式"></a>2. 反射与工厂设计模式</h5><p>​    工厂设计模式常用来获取接口实例，属于java面向对象编程的基本模型<br>​    使用工厂模式，在使用new操作符时，也叫做静态工厂</p><pre class="line-numbers language-none"><code class="language-none">class factory&#123;private factory() &#123;&#125;public static Message getMessage(String className) &#123;if(&quot;PaperMessage&quot;.equals(className)) &#123;return new PaperMessage();&#125;else if(&quot;InternalMessage&quot;.equals(className)) &#123;return new InternalMessage();&#125;elsereturn null;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>详细完整代码见反射实例例一</strong></p><p>​    <strong>静态工厂类的缺点</strong><br>​    当你要添加或者删除接口子类很多时，传统的静态工厂类将无法满足需要，问题产生的原因是关键字“new”，关键字“new”是Java提供的原生对象实例化支持，但需要使用特定的结构使用，一个好的代码new使用的少，所以此时需要使用反射机制来解决</p><p>​    <strong>反射机制的思路</strong><br><a href="https://imgtu.com/i/5ZJDt1"><img src="https://z3.ax1x.com/2021/10/11/5ZJDt1.png" alt="5ZJDt1.png"></a></p><p>​     用反射机制修改工厂类</p><pre class="line-numbers language-none"><code class="language-none">class factory&#123;private factory() &#123;&#125;public static Message getMessage(String className) &#123; Message msg &#x3D; null;try &#123;msg &#x3D; (Message)Class.forName(className).getDeclaredConstructor().newInstance();&#125; catch (Exception e) &#123;e.printStackTrace();&#125;return msg;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：此时由于调用Class.forname()所以方法传字符串(className)必须是完整路径，包+类名</strong></p><p>​    <strong>详细完整代码见反射实例例二</strong></p><p>​    此时添加子类时就不需要去修改工厂类了</p><h5 id="3-反射与单例设计模式"><a href="#3-反射与单例设计模式" class="headerlink" title="3. 反射与单例设计模式"></a>3. 反射与单例设计模式</h5><p>​    单例设计模式的核心：一个类在一个JVM进程之中只允许有一个实例化对象</p><p>​    单例设计模式的两种结构：饿汉式单例、懒汉式单例（问题比较麻烦，但找工作用这个可以使得问题表述的更加清晰）</p><p>​    懒汉式就是创建对象时比较懒，先不急着创建对象，在需要加载配置文件的时候再去创建。饿汉式就是在系统初始化的时候我们已经把对象创建好了，需要用的时候直接拿过来用就好了</p><ul><li><p>设计饿汉式单例</p><pre class="line-numbers language-none"><code class="language-none">class SingletonEH &#123;    &#x2F;**     *是否 Lazy 初始化：否     *是否多线程安全：是     *实现难度：易     *描述：这种方式比较常用，但容易产生垃圾对象。     *优点：没有加锁，执行效率会提高。     *缺点：类加载时就初始化，浪费内存。     *它基于 classloder 机制避免了多线程的同步问题，     * 不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，     * 在单例模式中大多数都是调用 getInstance 方法，     * 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，     * 这时候初始化 instance 显然没有达到 lazy loading 的效果。     * 饿汉就是类一旦加载（ java文件通过编译器变成了.class文件），就把单例初始化完成，保证getInstance的时候，单例是已经存在的了     *&#x2F;    private static SingletonEH instance &#x3D; new SingletonEH();    private SingletonEH ()&#123;&#125;    public static SingletonEH getInstance() &#123;        System.out.println(&quot;instance:&quot;+instance);        System.out.println(&quot;加载饿汉式....&quot;);        return instance;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设计懒汉式单例</p><pre class="line-numbers language-none"><code class="language-none">class Singleton&#123;&#x2F;**     *是否 Lazy 初始化：是     *是否多线程安全：否     *实现难度：易     *描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。     *这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。*&#x2F;&#x2F;&#x2F;设置单例，保证只有一个单例private static Singleton instance;&#x2F;&#x2F;私有化构造方法，使之只能在内部调用实例化private Singleton()&#123;System.out.println(&quot;hello&quot;);&#125;&#x2F;&#x2F;通过公有化方法提供对外部的接口public static Singleton getInstance() &#123;if(instance &#x3D;&#x3D; null) &#123;instance &#x3D; new Singleton();&#125;return instance;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​    但是一旦使用多线程，并且结合懒汉式设计时会出现对象的多次实例化<br><a href="https://imgtu.com/i/5mOrjJ"><img src="https://z3.ax1x.com/2021/10/12/5mOrjJ.png" alt="5mOrjJ.png"></a></p><p>​    需要解决问题需要增加同步处理<br>​    <strong>同步是否添加的因素：如果读取不要加同步，如果更新要加同步</strong><br>​    如果直接在方法外增加同步，线程若有10w个线程获取Singleton类的对象，则这10w个线程排队等待，性能会下降<br><a href="https://imgtu.com/i/5mxlan"><img src="https://z3.ax1x.com/2021/10/12/5mxlan.png" alt="5mxlan.png"></a></p><p>​    所以应该在方法内增加同步，而同步内用的对象的获取则使用反射机制</p><p>​    <strong>解决代码</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;此时即保证了getInstance()方法的操作性能，同时又保护了Singleton类对象的实例化次数class Singleton&#123;private static Singleton instance;private Singleton()&#123;System.out.println(&quot;hello&quot;);&#125;public static Singleton getInstance() &#123;if(instance &#x3D;&#x3D; null) &#123;synchronized(Singleton.class) &#123;if(instance &#x3D;&#x3D; null) &#123;instance &#x3D; new Singleton();&#125;&#125;&#125;return instance;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>代码解释图示</strong><br><a href="https://imgtu.com/i/5nSyuD"><img src="https://z3.ax1x.com/2021/10/12/5nSyuD.png" alt="5nSyuD.png"></a></p><h4 id="6-反射与类操作"><a href="#6-反射与类操作" class="headerlink" title="6. 反射与类操作"></a>6. 反射与类操作</h4><p>​    反射可以完整的实现Java允许规定的类的操作形式<br>​    传统的Java二进制文件对其进行操作就是进行类加载(import、CLASSPATH)；实例化类对象并操作，<strong>对于这些二进制文件的分析(Java中允许你做到的)就是反射</strong>，如果要对这个文件进行更深入的分析，需要使用第三方工具包</p><h5 id="1-反射获取类结构"><a href="#1-反射获取类结构" class="headerlink" title="1. 反射获取类结构"></a>1. 反射获取类结构</h5><p>​    class作为所有反射操作的源头，于是在Class类里面就可以获取clazz的一些结构上的信息，例如：类所在的包、类所继承的父类、已经类所实现的相关的接口，方法如下：</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">public Package getPackage()</td><td align="center">方法</td><td align="center">获取程序所在的包名称</td></tr><tr><td align="center">public <strong>Class</strong>&lt; ? super T&gt; getSuperclass()</td><td align="center">方法</td><td align="center">获取所继承的父类</td></tr><tr><td align="center">public Class&lt; ? &gt;[] getInterfaces()</td><td align="center">方法</td><td align="center">获取所有的父接口</td></tr></tbody></table><p>​    之所以通过反射可以获取这些信息，主要是由于Class类拥有了“*.class”二进制数据的分析能力，它实际上是根据二进制的结构文件动态获取的内容。</p><p>​    <strong>详细代码见反射实例例三</strong></p><h5 id="2-反射调用构造方法"><a href="#2-反射调用构造方法" class="headerlink" title="2. 反射调用构造方法"></a>2. 反射调用构造方法</h5><p>​    所有的构造方法都可以利用反射来进行获取，在Class类中定义如下构造方法获取的操作</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public Constructor&lt; T &gt; getConstructor(Class&lt; ? &gt;… parameterTypes) throws NoSuchMethodException, SecurityException</td><td align="center">方法</td><td align="center">根据指定的参数类型获取指定 的构造方法(Public)</td></tr><tr><td align="center">public Constructor&lt; ? &gt;[] getConstructors()                                 throws SecurityException</td><td align="center">方法</td><td align="center">获取类中所有的构造方法(public)</td></tr><tr><td align="center">public Constructor&lt; T &gt; get<strong>Declared</strong>Constructor(Class)&lt; ? &gt;… parameterTypes)                                      throws NoSuchMethodException, SecurityException</td><td align="center">方法</td><td align="center">获取一个类中指定的构造方法(public、protected、default)</td></tr><tr><td align="center">public Constructor&lt; ? &gt;[] get<strong>Declared</strong>Constructors() throws SecurityException</td><td align="center">方法</td><td align="center">获取一个类中的全部构造方法(public、protected、default)</td></tr></tbody></table><p>​    在Java中好用的方法为后两个，因为构造方法不一定只使用public来定义，所以获取的方法应该采用“getDeclaredConstructor”</p><p>​    <strong>获取构造并不意味着要进行简单的输出，这种获取信息的操作只在开发工具中比较常见，但是获取Constructor最大的意义在于其可以进行反射构造调用，提供有如下方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public T <strong>newInstance(Object… initargs)</strong> throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException</td><td align="center">方法</td><td align="center">调用指定的构造进行对象实例化处理</td></tr></tbody></table><p>​    范例：利用反射调用指定参数的构造进行实例化</p><pre class="line-numbers language-none"><code class="language-none">package hello;import java.lang.reflect.Constructor;import java.lang.reflect.InvocationTargetException;class Ball&#123;private String name;private double price;public Ball(String name,double price) &#123;this.name &#x3D; name;this.price &#x3D; price;&#125;public void print() &#123;System.out.println(&quot;球的名字为：&quot;+this.name+&quot;、价格为：&quot; + this.price);&#125;&#125;public class First&#123;public static void main(String[] args) throws NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException&#123;Class&lt;?&gt; clazz &#x3D; Ball.class;&#x2F;&#x2F;获取反射对象Constructor&lt;?&gt; con &#x3D; clazz.getDeclaredConstructor(String.class,double.class);Ball ball &#x3D; (Ball)con.newInstance(&quot;足球&quot;,12.5);ball.print();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    以上操作是JDK1.9之后官方推荐的做法，在JDK1.8及以前的版本里面，关于反射对象的实例化操作实际上提供了两个不同的方法</p><ul><li><p><strong>Class类：</strong>@Deprecated(since)=”9”) public T newInstance() throws InstantiationException, IllegalAccessException</p><p>-默认调用无参构造，如果类中，没有无参构造则将抛出异常；JDK1.9之后就修改为Constructor类调用；</p></li><li><p><strong>Constructor类：</strong>public T newInstance() throws InstantiationException, IllegalAccessException</p></li></ul><h5 id="3-反射调用方法"><a href="#3-反射调用方法" class="headerlink" title="3. 反射调用方法"></a>3. 反射调用方法</h5><p>​    在class类中定义了可以获取类中方法实例的操作</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public Method[] <strong>getMethods()</strong> throws SecurityException</td><td align="center">方法</td><td align="center">获取本类和父类中所有的public方法</td></tr><tr><td align="center">public Method getMethod(String name, Class&lt; ? &gt;… parameterTypes) throws NoSuchMethodException, SecurityException</td><td align="center">方法</td><td align="center">获取一个public的方法，包括父类的方法</td></tr><tr><td align="center">public Method[] <strong>getDeclaredMethods()</strong> throws SecurityException</td><td align="center">方法</td><td align="center">获取本类中所有的方法</td></tr><tr><td align="center">public Method getDeclaredMethod(<strong>String name</strong>, <strong>Class&lt; ? &gt;… parameterTypes</strong>) throws NoSuchMethodException, SecurityException</td><td align="center">方法</td><td align="center">获取本类一个指定类型的Method实例；String name表示方法名称，Class&lt; ? &gt;… parameterTypes表示我要操作的参数类型</td></tr></tbody></table><p>​    当获取了一个方法之后将以Method类的实例进行该方法的描述，Method类的定义方式如下：</p><p>​    <strong>Method类的定义</strong></p><pre class="line-numbers language-none"><code class="language-none">public final class Method extends Executable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    这个类的定义方式和之前Constructor类是完全一样的</p><p>​    图示：</p><p><a href="https://imgtu.com/i/5w4OD1"><img src="https://z3.ax1x.com/2021/10/19/5w4OD1.png" alt="5w4OD1.png"></a> </p><p>​    在Java里面可以利用Method明确的描述一个可以调用的方法结构，可以利用Method实现类中全部方法的输出</p><p>​    范例：获取Ball类中所有的public方法,包括所有父类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Balls</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toDo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Ball</span> <span class="token keyword">extends</span> <span class="token class-name">Balls</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">SecurityException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Ball</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Method</span> method<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> x<span class="token operator">:</span>method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    获取method实例后对<strong>该方法</strong>信息获得的方法<strong>（Method类或者其父类（Executable）下的方法）</strong>：</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String getName()</td><td align="center">方法</td><td align="center">获取方法的名字</td></tr><tr><td align="center">public abstract int getModifiers()</td><td align="center">方法</td><td align="center">获取方法前的权限修饰符</td></tr><tr><td align="center">public Class&lt; ? &gt; getReturnType()</td><td align="center">方法</td><td align="center">获取方法的返回值</td></tr><tr><td align="center">public abstract Class&lt; ? &gt;[] getParameterTypes()</td><td align="center">方法</td><td align="center">获取方法的所有参数,返回值为数组</td></tr><tr><td align="center">public Class&lt; ? &gt;[] getExceptionTypes()</td><td align="center"></td><td align="center">获取方法的所有异常</td></tr></tbody></table><p>​    <strong>注意：getModifiers()方法的返回值为int类型，因为所有的权限都是数字的组合(相加)，在java.lang.reflect.Modifier类中有static String toString(int mod)方法，将这些数字反推权限修饰符的字符串</strong></p><p>​    程序配置了任何的第三方工具包,各个开发工具之所以可以进行代码的检测以及方法的获取,就是由于反射机制的支持(二进制数据流的解析处理),但是对于我们开发人员来讲**,真正有意义的代码在于Method类中提供的反射调用方法(非常重要,使用Method类中最有意义的操作)**:</p><pre class="line-numbers language-none"><code class="language-none">public Object invoke(Object obj,Object... args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>invoke()可以直接依据Object类的实例化对象(不一定是具体类型)实现反射方法调用</strong></p><p>​    注意：所有的简单Java类一定要提供有无参构造方法,同时所有的属性必须封装(private),封装后的属性必须编写setter、getter方法</p><p>​    <strong>范例：利用反射调用setter、getter方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Ball</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"hello.Ball"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实例化对象</span><span class="token class-name">Method</span> setmethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//参数类型暂时无法动态获取，先固定一个String.class</span>setmethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"篮球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等价于“实例化对象.setName("篮球")”</span><span class="token class-name">Method</span> getmethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> a <span class="token operator">=</span> getmethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    此时程序实现了方法的反射调用，同时也解释了为什么简单Java类中的命名要有setter、getter规则</p><h5 id="4-反射调用成员属性"><a href="#4-反射调用成员属性" class="headerlink" title="4. 反射调用成员属性"></a>4. 反射调用成员属性</h5><p>​    类结构里面包含的三个组成：构造、方法、成员属性，那么对于所有的成员属性也是可以通过反射来实现调用，在class类中提供有如下的与成员有关的操作方法</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public Field[] getFields() throws SecurityException</td><td align="center">方法</td><td align="center">获取所有继承来的public成员</td></tr><tr><td align="center">public Field getField(String name) throws NoSuchFieldException, SecurityException</td><td align="center">方法</td><td align="center">获取一个指定类型的成员</td></tr><tr><td align="center">public Field[] getDeclaredFields() throws SecurityException</td><td align="center">方法</td><td align="center">获取本类定义的全部的成员</td></tr><tr><td align="center">public Field getDeclaredField(String name) throws NoSuchFieldException, SecurityException</td><td align="center">方法</td><td align="center">获取一个本类定义成员</td></tr></tbody></table><p>​    代码：获取属性信息，见反射实例-例四</p><p>​    在代码中获取了所需要的成员的信息，但是Field类的使用并不是获取成员信息的，这个类有如下几个重要的方法：</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>public Class&lt; ? &gt; getType()</strong></td><td align="center">方法</td><td align="center">获取属性类型，可以与上上面代码中(invoke())结合动态获取参数类型</td></tr><tr><td align="center">public Object get(Object obj) throws IllegalArgumentException, IllegalAccessException</td><td align="center">方法</td><td align="center">获取对象属性</td></tr><tr><td align="center">public void set(Object obj, Object value) throws IllegalArgumentException, IllegalAccessException</td><td align="center">方法</td><td align="center">设置属性内容</td></tr><tr><td align="center"><strong>public void setAccessible(boolean flag)</strong></td><td align="center">方法</td><td align="center">取消封装(private)，即设置可见</td></tr></tbody></table><p>​    <strong>图示：field类的继承图示以及setAccessible(boolean flag)方法的作用区间</strong></p><p>​    <a href="https://imgtu.com/i/5DuKSI"><img src="https://z3.ax1x.com/2021/10/20/5DuKSI.png" alt="5DuKSI.png"></a></p><p>​    <strong>注意：setAccessible(boolean flag)方法是在AccessibleObject类中定义的方法，所以下面继承此类的方法都可以进行调用，从而解除封装</strong></p><p>​    范例：调用类中的属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">hello</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Ball</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Ball</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解除封装</span>field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"篮球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等价于"对象.name = "篮球""</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//等价于"System.out.println(对象.name)"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：类中所谓的封装只是局限于标准语法的访问的限制，但是如果直接利用反射就可以打破这种封装所带来的影响，只不过大多数情况不会这样操作</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构01</title>
      <link href="/2021/10/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8401/"/>
      <url>/2021/10/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8401/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h2><h4 id="1-数据结构中的堆表示堆栈，数据结构中没有堆这个概念，堆分配内存的方式，不属于存储数据的结构。"><a href="#1-数据结构中的堆表示堆栈，数据结构中没有堆这个概念，堆分配内存的方式，不属于存储数据的结构。" class="headerlink" title="1. 数据结构中的堆表示堆栈，数据结构中没有堆这个概念，堆分配内存的方式，不属于存储数据的结构。"></a>1. 数据结构中的堆表示堆栈，数据结构中没有堆这个概念，堆分配内存的方式，不属于存储数据的结构。</h4><h4 id="2-数据结构的定义"><a href="#2-数据结构的定义" class="headerlink" title="2. 数据结构的定义"></a>2. 数据结构的定义</h4><p>​    <strong>以特定的数据类型(个体如何来存储)和特定的存储结构(个体之间的关系)保存到主存储器（内存）中</strong>（注意不是保存到硬盘），以及在此基础上为实现某个功能（比如查找某个元素，删除某个元素，对所有元素进行排序）而执行的相应操作，这个相应的操作也叫算法</p><p>​    数据结构 = 个体 + 个体的关系，即解决存储问题<br>​    算法 = 对存储数据的操作（狭义，存储的方式不同则算法也不同），即解决数据操作的问题</p><h4 id="3-算法的定义"><a href="#3-算法的定义" class="headerlink" title="3. 算法的定义"></a>3. 算法的定义</h4><p>​    解题的方法和步骤</p><h4 id="4-衡量算法的标准"><a href="#4-衡量算法的标准" class="headerlink" title="4. 衡量算法的标准"></a>4. 衡量算法的标准</h4><p>​    (1).时间复杂度<br>​    大概程序要执行的次数，而非执行的时间</p><p>​    (2).空间复杂度<br>​    算法执行过程中大概所占用的最大内存</p><p>​    (3).难易程度</p><p>​    (4).健壮性</p><p>​    (5).正确性（废话）</p><h4 id="5-数据结构的地位"><a href="#5-数据结构的地位" class="headerlink" title="5. 数据结构的地位"></a>5. 数据结构的地位</h4><p>​    数据结构是软件最核心的课程</p><p>​    程序 = 数据的存储 + 数据的操作 + 可以被计算机执行的语言</p><h4 id="6-指针变量"><a href="#6-指针变量" class="headerlink" title="6. 指针变量"></a>6. 指针变量</h4><p>​    指针是C语言的灵魂，指针就是地址(内存单元的编号)，地址就是指针，指针变量是存放内存单元地址的变量</p><p>​    若指针变量p指向整型变量i，那么*p就是i</p><p>​    指针变量都统一的只占四个字节</p><p>​    指针变量的声明</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//p是个指针变量，int * 表示该p变量只能存储int类型变量的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-结构体"><a href="#7-结构体" class="headerlink" title="7. 结构体"></a>7. 结构体</h4><p>​    为了表示一些复杂的数据，而普通的基本类型变量无法满足要求，所以使用结构体来表示</p><p>​    结构体适合在以算法为核心程序即面向过程的语言，但在面向对象的语言算法就不是核心了</p><p>​    注意：对于C语言中结构体内字符串的赋值需要使用strcpy()来进行赋值，不能像Java一样，Java本身也是C和C++实现，而且java是用String类实现的</p><pre class="line-numbers language-none"><code class="language-none">strcpy(st.name,&quot;LiHua&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>在结构体中有定义一个结构体然后用成员操作符来使用结构体里的成员，但一般不会这样使用，更多的是定义一个结构体指针，然后通过该指针来访问</strong></p><p>​    一般都会使用结构体指针来调用里面的内容</p><pre class="line-numbers language-none"><code class="language-none">pst-&gt;sid等价于(*pst).sid &#x2F;&#x2F;pst为指针<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    注意：结构体变量不能加减乘除但可以相互赋值</p><p>​    结构体变量和结构体指针作为函数传参的问题<br>​    <strong>注意：一般还是用传指针好，如果单传结构体耗内存、耗时间不推荐(即指针占得内存小，一般一个结构体变量占用内存大)</strong></p><h4 id="8-malloc-动态分配内存"><a href="#8-malloc-动态分配内存" class="headerlink" title="8. malloc()动态分配内存"></a>8. malloc()动态分配内存</h4><p>​    通过动态分配内存以实现动态分配数组，这样实现数组是灵活的，<strong>动态数组不够时可以继续增加，多出时可以删除</strong></p><pre class="line-numbers language-none"><code class="language-none">int len;scanf(&quot;%d&quot;,len);int * pArr &#x3D; (int *)malloc(sizeof(int) * len);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    注意1：malloc()函数只返回第一个字节的地址，强制转换目的是确定多少个为字节为一个元素</p><p>​    注意2：用完malloc()后要用free()释放它，不释放的话只能等程序终止了才能释放</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">free</span><span class="token punctuation">(</span>pArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把pArr所分配的动态内存释放</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-跨函数内存分配问题"><a href="#9-跨函数内存分配问题" class="headerlink" title="9. 跨函数内存分配问题"></a>9. 跨函数内存分配问题</h4><p>​    如果是使用普通在栈内存的函数(静态)，在调用完之后就会释放掉，而如果是含有动态分配的函数，除非手动的去释放调用不然不会系统自动释放</p><p>​    范例：跨函数分配内存</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span> q<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span>q <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件实例</title>
      <link href="/2021/09/29/%E6%96%87%E4%BB%B6%E5%AE%9E%E4%BE%8B/"/>
      <url>/2021/09/29/%E6%96%87%E4%BB%B6%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="文件操作实例"><a href="#文件操作实例" class="headerlink" title="文件操作实例"></a>文件操作实例</h2><h4 id="1-D-盘删盘程序"><a href="#1-D-盘删盘程序" class="headerlink" title="1. D:盘删盘程序"></a>1. D:盘删盘程序</h4><p>​    <strong>可以通过修改位置删除指定文件夹</strong></p><pre class="line-numbers language-none"><code class="language-none">package hello;import java.io.*;public class First&#123;public static void main(String[] args) &#123;File file &#x3D; new File(&quot;D:&quot;+File.separator);test(file);&#125; public static void test(File file) &#123;if(file.isDirectory()) &#123;File[] s &#x3D; file.listFiles();for(File a : s) &#123;test(a);&#125;&#125;file.delete();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>创建一堆文件</strong></p><pre class="line-numbers language-none"><code class="language-none">package hello;import java.io.*;import java.text.SimpleDateFormat;public class First&#123;public static void main(String[] args) throws Exception &#123;File fileOld &#x3D; new File(&quot;D:&quot;+File.separator+&quot;test-java&quot;);for(int x &#x3D; 0 ; x &lt; 100 ; x++) &#123;new File(fileOld,&quot;mldn-&quot; + getTime() + &quot;-&quot; + x + &quot;.log&quot;).createNewFile();&#125;&#125;public static String getTime() &#123;return new SimpleDateFormat(&quot;yyyyMMddHHmmssSSS&quot;).format(new java.util.Date());&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>对同类型的文件批量更改文件名（补零操作）</strong></p><pre class="line-numbers language-none"><code class="language-none">package hello;import java.io.*;import java.text.SimpleDateFormat;public class First&#123;public static void main(String[] args)&#123;File file &#x3D; new File(&quot;D:&quot;+File.separator+&quot;test-java&quot;);Count a &#x3D; new Count();a.to(file);a.rename(file);&#125;&#125;class Count&#123;private int max &#x3D; 0;private String filename &#x3D; null;private int length &#x3D; 0;public void to(File file) &#123;if(file.isDirectory()) &#123;&#x2F;&#x2F;判断是否为文件夹File a[] &#x3D; file.listFiles();&#x2F;&#x2F;获得所有子文件if(a !&#x3D; null) &#123;for(File childFile : a) &#123; to(childFile);&#125;&#125;&#125;else &#123;if(file.isFile()) &#123;if(file.getName().matches(&quot;mldn\\-\\d&#123;17&#125;\\-\\d+\\.log&quot;))&#123;&#x2F;&#x2F;需要修改路径的文件名称this.getMaxLength(file.getName());&#125;&#125;&#125;&#125;public void getMaxFileLength() &#123;this.length &#x3D; this.filename.substring(this.filename.lastIndexOf(&quot;-&quot;) + 1, this.filename.lastIndexOf(&quot;.&quot;)).length();&#125;public String getNewFileName(String oldName) &#123;StringBuffer buffer &#x3D; new StringBuffer(oldName);while(buffer.length() &lt; this.length) &#123;buffer.insert(0, 0);&#125;return buffer.toString();&#125;public void getMaxLength(String fileName) &#123;if(this.max &lt; fileName.length()) &#123;this.max &#x3D; fileName.length();this.filename &#x3D; fileName;&#125;&#125;public void rename(File file) &#123;if(file.isDirectory()) &#123;File a[] &#x3D; file.listFiles();if(a !&#x3D; null) &#123;for(File childFile : a) &#123;rename(childFile);&#125;&#125;&#125;else &#123;if(file.isFile()) &#123;if(file.getName().matches(&quot;mldn\\-\\d&#123;17&#125;\\-\\d+\\.log&quot;))&#123;&#x2F;&#x2F;需要修改路径的文件名称if(this.filename !&#x3D; null) &#123;this.getMaxFileLength();String oldFileName &#x3D; file.getName().substring(file.getName().lastIndexOf(&quot;-&quot;) + 1, file.getName().lastIndexOf(&quot;.&quot;));String newFileName &#x3D; file.getName().substring(0,file.getName().lastIndexOf(&quot;-&quot;) + 1) + this.getNewFileName(oldFileName) + file.getName().substring(file.getName().lastIndexOf(&quot;.&quot;));File newFile &#x3D; new File(file.getParentFile(),newFileName);file.renameTo(newFile);&#125;&#125;&#125;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>OutputStream类与其子类FileOutputStream的应用</strong><br>​    创建文件并且向文件中写入</p><pre class="line-numbers language-none"><code class="language-none">package hello;import java.io.*;public class First&#123;public static void main(String[] args) throws Exception&#123;File file &#x3D; new File(&quot;D:&quot;+File.separator+&quot;java-test&quot;+File.separator+&quot;test.txt&quot;);&#x2F;&#x2F;文件与其路径现在是不存在的，代码并没有进行手动创建，但文件还是直接生成了if(!file.getParentFile().exists()) &#123;&#x2F;&#x2F;创建父路径file.getParentFile().mkdirs();&#125;OutputStream output &#x3D; new FileOutputStream(file);output.write(&quot;hello&quot;.getBytes());output.close();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java12</title>
      <link href="/2021/09/19/Java12/"/>
      <url>/2021/09/19/Java12/</url>
      
        <content type="html"><![CDATA[<h2 id="I-O（Input-amp-Output）"><a href="#I-O（Input-amp-Output）" class="headerlink" title="I/O（Input&amp;Output）"></a>I/O（Input&amp;Output）</h2><h3 id="1-Java中的输入-输出流"><a href="#1-Java中的输入-输出流" class="headerlink" title="1. Java中的输入/输出流"></a>1. Java中的输入/输出流</h3><p>​    Java语言定义了许多类负责各种方式的输入/输出，java的io是所有语言之最，这些类都放在java.io包中。<strong>核心组成：一个类(File)、一个接口(Serializable)、四个抽象类(InputStream，OutputStream，Reader，Writer)</strong></p><h3 id="2-File类的简介"><a href="#2-File类的简介" class="headerlink" title="2. File类的简介"></a>2. File类的简介</h3><h4 id="1-File类是整个java-io包中唯一一个与文件本身有关-可以进行操作文档的路径指派，可以创建或者删除文件，以及还可以获取文件的相关信息内容-的操作类"><a href="#1-File类是整个java-io包中唯一一个与文件本身有关-可以进行操作文档的路径指派，可以创建或者删除文件，以及还可以获取文件的相关信息内容-的操作类" class="headerlink" title="(1).File类是整个java.io包中唯一一个与文件本身有关(可以进行操作文档的路径指派，可以创建或者删除文件，以及还可以获取文件的相关信息内容)的操作类"></a>(1).File类是整个java.io包中唯一一个<strong>与文件本身有关</strong>(可以进行操作文档的路径指派，可以创建或者删除文件，以及还可以获取文件的相关信息内容)的操作类</h4><h4 id="2-File类的常用构造方法"><a href="#2-File类的常用构造方法" class="headerlink" title="(2).File类的常用构造方法"></a>(2).File类的常用构造方法</h4><p>​    </p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public File(String pathname)</td><td align="center">构造方法</td><td align="center">设置要操作文件的完整路径，要考虑分隔符</td></tr><tr><td align="center">public File(String parent, String child)</td><td align="center">构造方法</td><td align="center">设置要操作文件的父目录和子文件路径</td></tr><tr><td align="center">public boolean createNewFile() throws IOException</td><td align="center">方法</td><td align="center">创建一个新文件</td></tr><tr><td align="center">public boolean delete()</td><td align="center">方法</td><td align="center">删除此抽象路径名表示的文件或目录。如果此路径名表示目录，则该目录必须为空才能删除</td></tr><tr><td align="center">public boolean exists()</td><td align="center">方法</td><td align="center">判断文件是否存在</td></tr></tbody></table><p>​    <strong>注意：在使用File类指派操作文件的时候该文件的路径有可能不存在，只要不进行信息的获取操作不会有报错问题，只是表示一个要操作的文件路径</strong></p><p>​    <strong>程序的磁盘操作(解释为什么有延迟)</strong></p><p><a href="https://imgtu.com/i/hve0eI"><img src="https://z3.ax1x.com/2021/09/10/hve0eI.png" alt="hve0eI.png"></a></p><p>​    <strong>跨平台的分隔符问题</strong></p><ul><li>windows系统的路径分隔符为“\”；</li><li>Unix、类Unix（Linux、MacOS、ALX）路径分隔符为“/”；</li></ul><p>​    java考虑到这个问题所以是互通的，但写大量的<code>//</code>或<code>\\</code>转义处理非常麻烦，所以<strong>一般使用File类中提供的常量(public static final String separator)</strong>,早期命名规范与现在不同所以是小写separator</p><p>​    <strong>separator常量的使用</strong></p><pre class="line-numbers language-none"><code class="language-none">File file &#x3D; new File(&quot;D:&quot;+File.separator+&quot;Hello.txt&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>注意：以后编写代码所有路径分隔符尽量通过常量separator来进行定义</strong></p><h4 id="3-File类在父-多-目录下子文件的创建"><a href="#3-File类在父-多-目录下子文件的创建" class="headerlink" title="(3).File类在父(多)目录下子文件的创建"></a>(3).File类在父(多)目录下子文件的创建</h4><p>​    子文件在父目录下创建时必须保证父目录是存在的，不然会产生异常</p><p>​    <strong>对目录创建的File类中的方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean mkdir()</td><td align="center">方法</td><td align="center">只创建单级目录</td></tr><tr><td align="center"><strong>public boolean mkdirs()</strong></td><td align="center"><strong>方法</strong></td><td align="center"><strong>创建多级目录(多个子目录可以同时创建)</strong></td></tr><tr><td align="center">public String getParent()</td><td align="center">方法</td><td align="center">获取父目录的信息</td></tr><tr><td align="center"><strong>public File getParentFile()</strong></td><td align="center"><strong>方法</strong></td><td align="center"><strong>获取父路径的File实例</strong></td></tr></tbody></table><p>​    <strong>在多线程下对文件的操作</strong><br>​    在Java项目中没有多线程，不是Java的风格。在多线程下对于文件是不是在父目录下每个线程都需要进行一个判断，此时程序的性能很低</p><p><a href="https://imgtu.com/i/hveNSe"><img src="https://z3.ax1x.com/2021/09/10/hveNSe.png" alt="hveNSe.png"></a></p><p>​    为了提高程序的性能最好的方法是让判断操作只执行一次，所以<strong>我们可以考虑使用静态代码块的模式来执行，静态代码块的执行优先于主方法执行</strong></p><h4 id="4-File类提供的其他操作"><a href="#4-File类提供的其他操作" class="headerlink" title="(4).File类提供的其他操作"></a>(4).File类提供的其他操作</h4><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean canExecute()</td><td align="center">方法</td><td align="center">程序是否能执行该文件</td></tr><tr><td align="center">public boolean canRead()</td><td align="center">方法</td><td align="center">是否能读</td></tr><tr><td align="center">public boolean canWrite()</td><td align="center">方法</td><td align="center">是否能写</td></tr><tr><td align="center">public File getAbsoluteFile()</td><td align="center">方法</td><td align="center">显示文件的绝对路径</td></tr><tr><td align="center">public boolean isDirectory()</td><td align="center">方法</td><td align="center">判断File对象是否是文件夹</td></tr><tr><td align="center">public boolean isFile()</td><td align="center">方法</td><td align="center">判断当前路径是否为文件</td></tr><tr><td align="center">public long lastModified()</td><td align="center">方法</td><td align="center">获取最后一次修改日期</td></tr><tr><td align="center">public long length()</td><td align="center">方法</td><td align="center">获取文件的长度(大小)</td></tr></tbody></table><p>​    <strong>File类之中的返回的日期long就是毫秒数、而文件大小返回的就是字节个数</strong></p><h4 id="5-File类获取文件目录信息"><a href="#5-File类获取文件目录信息" class="headerlink" title="(5).File类获取文件目录信息"></a>(5).File类获取文件目录信息</h4><p>​    将一个目录中所有的目录下所有子目录和文件详细的列出<br>​    </p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public String[] list()</td><td align="center">方法</td><td align="center">列出子路径的信息(不包括父目录)</td></tr><tr><td align="center"><strong>public File[] listFiles()</strong></td><td align="center"><strong>方法</strong></td><td align="center"><strong>列出子路径的完整信息(不包括父目录)</strong></td></tr><tr><td align="center">​    <strong>可以通过递归查询到目录下所有的文件，通过删除操作，可以实现恶意程序，见文件实例例一</strong></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="6-File类实现文件的更名处理"><a href="#6-File类实现文件的更名处理" class="headerlink" title="(6).File类实现文件的更名处理"></a>(6).File类实现文件的更名处理</h4><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public boolean renameTo(File dest)</td><td align="center">方法</td><td align="center">重命名由此抽象路径名表示的文件，即改变文件名</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">oldfile.renameTo(newFile); &#x2F;&#x2F;把旧文件名转化为新文件名，这两个都是绝对路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    实例：文件的批量更名，见文件实例例二、例三</p><h3 id="3-流"><a href="#3-流" class="headerlink" title="3. 流"></a>3. 流</h3><h4 id="1-File类本身实现了文件自身的处理操作，但是并未规定其文件内容的操作，而要想实现文件内容就必须使用流的概念"><a href="#1-File类本身实现了文件自身的处理操作，但是并未规定其文件内容的操作，而要想实现文件内容就必须使用流的概念" class="headerlink" title="(1).File类本身实现了文件自身的处理操作，但是并未规定其文件内容的操作，而要想实现文件内容就必须使用流的概念"></a>(1).File类本身实现了文件自身的处理操作，但是并未规定其文件内容的操作，而要想实现文件内容就必须使用流的概念</h4><h4 id="3-流的简介"><a href="#3-流的简介" class="headerlink" title="(3).流的简介"></a>(3).流的简介</h4><p>​    流指的是数据的处理方式，以及目标的内容的处理机制，所有的流都分为输入流或输出流，Java针对输入流和输出流分为了两种类型：</p><ul><li>字节操作流：OutputStream（字节输出流）、InputStream（字节输入流）</li><li>字符操作流：Write（字符输出流）、Reader（字符输入流）</li></ul><p>​    字节与字符最大的区别体现在对中文的处理上<br>​    注意：不管使用哪一种操作流，本质上的操作流程都是类似的</p><p>​    所谓输入流与输出流是相对的，而Java会提供一组标准的操作形式<br><a href="https://imgtu.com/i/hveKy9"><img src="https://z3.ax1x.com/2021/09/10/hveKy9.png" alt="hveKy9.png"></a></p><h4 id="4-以文件流为例来描述流的表现形式"><a href="#4-以文件流为例来描述流的表现形式" class="headerlink" title="(4).以文件流为例来描述流的表现形式"></a>(4).以文件流为例来描述流的表现形式</h4><ul><li>通过File类设定要操作的文件路径</li><li>通过字节流或字符流的子类为对象进行对象实例化处理 </li><li>进行读、写的流操作</li><li>流属于宝贵资源，操作完毕后一定要关闭（close()）</li></ul><h4 id="5-字节输出流-OutputStream"><a href="#5-字节输出流-OutputStream" class="headerlink" title="(5).字节输出流(OutputStream)"></a>(5).字节输出流(OutputStream)</h4><p>​    java.io.OutputStream是实现字节输出流的操作类，<strong>通过其子类对其实例化后使用</strong></p><table><thead><tr><th>OutputStream类的定义</th></tr></thead><tbody><tr><td>public <strong>abstract</strong> class OutputStream extends Object <strong>implements Closeable, Flushable</strong></td></tr></tbody></table><table><thead><tr><th>Closeable接口的定义和它提供的方法</th><th>Flushable接口的定义和它提供的方法</th></tr></thead><tbody><tr><td>public interface Closeable extends AutoCloseable {void close() throws IOException{}}</td><td>public interface Flushable{void flush() throws IOException{}}</td></tr><tr><td>该方法时强制关闭</td><td>该方法是强制清空缓存</td></tr></tbody></table><p>​    <strong>缓存的作用</strong><br><a href="https://imgtu.com/i/hvZBPU"><img src="https://z3.ax1x.com/2021/09/10/hvZBPU.png" alt="hvZBPU.png"></a></p><p>​    <strong>OutputStream类提供的三个输出方法（都很重要，加粗的用的多）</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public abstract void write(int b) throws IOException</td><td align="center">方法</td><td align="center">输出单个字节数据，<strong>byte和int是可以相互转换的</strong></td></tr><tr><td align="center">public void write(byte[] b) throws IOException</td><td align="center">方法</td><td align="center">输出全部字节数组的数据</td></tr><tr><td align="center"><strong>public void write(byte[] b, int off, int len) throws IOException</strong></td><td align="center"><strong>方法</strong></td><td align="center"><strong>输出部分字节数组的数据</strong></td></tr></tbody></table><p>​    <strong>FileOutputStream类（OutputStream类的子类）提供的构造方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public FileOutputStream(File file) throws FileNotFoundException</td><td align="center">构造方法</td><td align="center">设置文件输出流，每次都对原始内容进行覆盖</td></tr><tr><td align="center">public FileOutputStream(File file,boolean append) throws FileNotFoundException</td><td align="center">构造方法</td><td align="center">如果将append的内容设置为true，表示进行内容追加</td></tr></tbody></table><p>​    <strong>注意：在创建FileOutputStream需要进行异常处理</strong></p><h4 id="6-字节输入流-InputStream"><a href="#6-字节输入流-InputStream" class="headerlink" title="(6).字节输入流(InputStream)"></a>(6).字节输入流(InputStream)</h4><p>​    InputStream是一个提供字节输入流的实现类</p><table><thead><tr><th>InputStream类的定义</th></tr></thead><tbody><tr><td>public <strong>abstract</strong> class InputStream extends Object implements <strong>Closeable</strong></td></tr></tbody></table><p>​    注意：系统在进行读操作的时候是不会使用到系统的缓冲区的，是为了防止过多的写入才提供写入缓冲区，写入缓冲区才需要清空处理，所以InputStream类不实现Flushable父接口</p><p>​    InputStream类提供的输出方法（读取方法）</p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public abstract int read() throws IOException</td><td align="center">方法</td><td align="center">读取单个字节数据，如果没有数据返回-1</td></tr><tr><td align="center"><strong>public int read(byte[] b) throws IOException</strong></td><td align="center"><strong>方法</strong></td><td align="center"><strong>将内容读取到字节数组之中，返回读取个数，如果没有数据返回-1，不够长就有多长读多长</strong></td></tr><tr><td align="center">public int read(byte[] b,int off,                 int len) throws IOException</td><td align="center">方法</td><td align="center">读取部分内容到字节数组中，返回读取个数，没有数据返回-1</td></tr><tr><td align="center">public int available() throws IOException</td><td align="center">方法</td><td align="center">获取可用长度</td></tr></tbody></table><p>​    InputStream是一个抽象类，可以利用FileInputStream子类为其进行实例化</p><p>​    <strong>FileInputStream提供的构造方法</strong></p><table><thead><tr><th align="center">方法名称</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">public FileInputStream(File file) throws FileNotFoundException</td><td align="center">构造方法</td><td align="center">打开实际文件创建FileInputStream实例，如果命名文件不存在，或是目录而不是常规文件，则会引发FileNotFoundException</td></tr></tbody></table><h4 id="7-字符输出流-Writer"><a href="#7-字符输出流-Writer" class="headerlink" title="(7).字符输出流(Writer)"></a>(7).字符输出流(Writer)</h4><p>​    OutputStream是可以实现输出操作的，但是其在进行输出的时候全部都是字节数组的形式完成的，但在大部分情况下，最方便的处理类型一定是字符串，所以为了简化输出操作，提供了字符输出流</p><table><thead><tr><th>Writer类的定义</th></tr></thead><tbody><tr><td>public <strong>abstract</strong> class Writer <strong>extends</strong> Object <strong>implements</strong> Appendable, Closeable, Flushable</td></tr></tbody></table><p>​    Writer抽象类与之前的OutputStream类相比，多实现了一个Appendable接口，里面只有一个append方法，<strong>append方法用来追加内容</strong></p><pre class="line-numbers language-none"><code class="language-none">public interface Appendable&#123; &#x2F;&#x2F;Appendable接口定义的三种方法public Appendable append(CharSequence csq) throws IOException;public Appendable append(CharSequence csq,int start,int end) throws IOException;public Appendable append(char c) throws IOException;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    在使用Writer类进行输出的时候最大的操作特点在于其可以直接进行字符串的数据处理</p><table><thead><tr><th>Writer类的输出方法</th></tr></thead><tbody><tr><td>public void write(String str) throws IOException  //它可以直接输出字符串</td></tr></tbody></table><p>​    Writer类在后续的版本中逐步有了CharSequence接口的支持，只要可以接收此接口的实例，就意味可以追加String、StringBuffer、StringBuilder类的实例</p><p>​    <strong>与之前一样可以将Writer类实例化为FileWriter</strong></p><p>​    使用Writer可以实现与OutputStream类似的功能，但其最大的优势在于可以直接进行字符串数据的输出处理</p><h4 id="8-字符输入流-Reader"><a href="#8-字符输入流-Reader" class="headerlink" title="(8).字符输入流(Reader)"></a>(8).字符输入流(Reader)</h4><p>​    Reader是实现字符数据的输入流类</p><table><thead><tr><th>Reader类的定义</th></tr></thead><tbody><tr><td>public <strong>abstract</strong> class Reader <strong>extends</strong> Object <strong>implements</strong> Readable, Closeable</td></tr></tbody></table><p>​    Readable这个接口与NIO有关，不是IO</p><table><thead><tr><th>Reader类的输入方法</th><th>说明</th></tr></thead><tbody><tr><td>public int read() throws IOException</td><td>读取单个字符</td></tr><tr><td>public int read(char[] cbuf) throws IOException</td><td>将字符读入数组</td></tr><tr><td>public abstract int read(char[] cbuf, int off, int len) throws IOException</td><td>将一部分字符读入数组</td></tr></tbody></table><p>​    <strong>Reader的子类有FileReader</strong></p><h4 id="9-AutoCloseable类"><a href="#9-AutoCloseable类" class="headerlink" title="(9).AutoCloseable类"></a>(9).AutoCloseable类</h4><p>​    上面介绍的四个类实际上都属于AutoCloseable子类，所以对于打开和关闭的操作可以使用自动关闭的形式来处理</p><h4 id="10-字节流和字符流的区别"><a href="#10-字节流和字符流的区别" class="headerlink" title="(10).字节流和字符流的区别"></a>(10).字节流和字符流的区别</h4><p>​    字节操作属于基础的二进制数据流的操作形式，在网络、文件、图片、音乐等操作之中几乎都是以字节数据为主的，但是字节数据不方便进行中文的处理，所以对于中文的处理应该使用字符流。</p><p>​    在进行网络传输或者磁盘数据存储的时候，所有存放的内容都属于字节数据</p><p><a href="https://imgtu.com/i/4Eka5Q"><img src="https://z3.ax1x.com/2021/09/14/4Eka5Q.png" alt="4Eka5Q.png"></a><br>​    <strong>缓冲区：实现字符与字节的转换</strong></p><p>​    实际上如果想要观察出字符流的缓冲区的存在，只需要在输出的时候取消close()方法的调用即可，因为此方法一旦调用实际上会自动清空缓冲区的内容，随后才会将数据写入到目标终端设备之中，如果此时由于某些原因就是无法进行字符输出流的关闭，则可以使用由Flushable接口继承而来的flush()方法进行手工的强制清除。</p><p>​    <strong>本质上传递的所有内容只有字节，而字符是程序对字节的包装，通过代码可以发现字节流和字符流的使用非常相似，一般以字节流方式为主，只有进行中文操作时才会考虑字符流处理</strong></p><h4 id="11-字节流和字符流的转换（转换流）"><a href="#11-字节流和字符流的转换（转换流）" class="headerlink" title="(11).字节流和字符流的转换（转换流）"></a>(11).字节流和字符流的转换（转换流）</h4><p>​    为了方便实现字节流和字符流的转换处理，提供了两个类：<strong>OutputStreamWriter</strong>和<strong>InputStreamReader</strong></p><ol><li><p>OutputStreamWriter</p><p>在构造方法中，需要接收一个OutputStream的对象，而后再向上转型变为字符流</p><p><a href="https://imgtu.com/i/4VFHJJ"><img src="https://z3.ax1x.com/2021/09/15/4VFHJJ.png" alt="4VFHJJ.png"></a></p></li><li><p>InputStreamReader</p><p><a href="https://imgtu.com/i/4Ve0Ln"><img src="https://z3.ax1x.com/2021/09/15/4Ve0Ln.png" alt="4Ve0Ln.png"></a></p><p>通过继承的关系，<strong>InputStreamReader、OutputStreamWriter都是字符流的子类</strong>，同时又可以通过构造方法接收InputStream类和OutputStream类的实例，<strong>再向上转型为字符流</strong></p><p>转换流在一些系统类库的操作之中比较常见，有些情况系统只会给用户字节流，但是为了方便处理需要进行字符流转换，这个时候才会使用到这个流</p><p>注意：这种转换在类的定义时也有体现，如：OutputStreamWriter是FileWriter的父类，InputStreamReader是FileReader的父类，<strong>即转换流是字符输入输出流的父类</strong></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java11</title>
      <link href="/2021/08/16/Java11/"/>
      <url>/2021/08/16/Java11/</url>
      
        <content type="html"><![CDATA[<h2 id="对象数组-集合类"><a href="#对象数组-集合类" class="headerlink" title="对象数组(集合类)"></a>对象数组(集合类)</h2><h4 id="1-在java-util包中提供一些集合类，集合类又被称为容器-对象数组"><a href="#1-在java-util包中提供一些集合类，集合类又被称为容器-对象数组" class="headerlink" title="1. 在java.util包中提供一些集合类，集合类又被称为容器/对象数组"></a>1. 在java.util包中提供一些集合类，集合类又被称为容器/对象数组</h4><h4 id="2-集合类和数组的区别"><a href="#2-集合类和数组的区别" class="headerlink" title="2. 集合类和数组的区别"></a>2. 集合类和数组的区别</h4><ul><li>数组的长度是固定的，集合类的长度是可变的</li><li>数组用来存放基本数据类型的数据，集合类用来存放对象**(基本数据类型需要用包装类)**的引用</li></ul><h4 id="3-对象数组的优势"><a href="#3-对象数组的优势" class="headerlink" title="3. 对象数组的优势"></a>3. 对象数组的优势</h4><ul><li>对象数组属于Java语言的原生支持，不需要手工实现(简单)</li><li>对象数组根据索引的数据查询性能是“O(1)”。但若根据的是内容查询，在未经优化的情况下其性能是“O(n)”，优化为使用二分法可以使其时间复杂度为“log<del>2</del>n”</li></ul><h4 id="4-Collection-lt-E-gt-接口"><a href="#4-Collection-lt-E-gt-接口" class="headerlink" title="4. Collection&lt; E &gt;接口"></a>4. Collection&lt; E &gt;接口</h4><p>​    在Java中，Collection接口是层次结构的根接口（即集合的顶层框架）<br>​    Collection接口通常不能直接使用，但其提供增加、删除、管理数据的方法。List接口与Set接口继承了该接口，这些方法在这两个接口中是通用的</p><table><thead><tr><th align="center">方法</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">add(E e)</td><td align="center">将指定的对象(元素e)添加到该集合中</td></tr><tr><td align="center">remove(Object o)</td><td align="center">将指定的对象从该集合中删除</td></tr><tr><td align="center">isEmpty()</td><td align="center">返回值为boolean，判断当前集合是否为空</td></tr><tr><td align="center">iterator()</td><td align="center">返回在此Collection的元素的迭代器，用于遍历集合中的对象</td></tr><tr><td align="center">size()</td><td align="center">返回值为int，获取该集合中元素的个数</td></tr></tbody></table><h4 id="4-迭代器（Iterator-lt-E-gt-接口，E为元素迭代器返回元素类型）"><a href="#4-迭代器（Iterator-lt-E-gt-接口，E为元素迭代器返回元素类型）" class="headerlink" title="4. 迭代器（Iterator&lt; E &gt;接口，E为元素迭代器返回元素类型）"></a>4. 迭代器（Iterator&lt; E &gt;接口，E为元素迭代器返回元素类型）</h4><p>​    在Java中，有很多的数据容器，对于这些的操作有很多的共性。Java采用了迭代器来为各种容器提供了公共的操作接口。这样使得对容器的遍历操作与其具体的底层实现相隔离，达到解耦的效果，<strong>即：迭代器的作用是用来遍历集合元素</strong>，我们无需关心该序列的底层结构是什么样子的。只要拿到这个对象,使用迭代器就可以遍历这个对象的内部</p><p>​    <strong>注意：一般使用增强for也可以遍历元素，但如果是无序的则需要用迭代器了</strong></p><p>​    迭代器的创建</p><pre class="line-numbers language-none"><code class="language-none">Iterator&lt;String&gt; a &#x3D; list.iterator();  &#x2F;&#x2F;在集合list下创建它的迭代器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    迭代器的方法</p><ul><li><p>hasNext()方法：如果迭代器有下一个元素返回true，否则返回false，这个方法并不移动指针</p></li><li><p>next()方法：向下移动指针，并且返回指针指向的元素，如果指针指向的内存中没有元素，会报异常，而且指针目前无法反向指，所以只可以一直向下。<strong>注意：返回元素的类型是Object类型</strong></p></li><li><p>remove()方法：移除iterator.next()方法最后访问的元素</p><p><strong>注意：在同一个迭代(循环)中只能使用一次next()方法，不然会产生异常（java.util.NoSuchElementException)</strong></p></li></ul><h4 id="5-List集合"><a href="#5-List集合" class="headerlink" title="5. List集合"></a>5. List集合</h4><p>​    (1).List集合包括List接口和List接口中所有实现类。List集合中元素允许重复，顺序为插入对象时的顺序，类似Java数组，用户可以通过索引来访问集合中的元素</p><p>​    (2).List接口继承Collection接口，包含其所有方法，还定义了两个重要方法</p><ul><li>get(int index)：获得指定索引位置的元素</li><li>set(int index , Object obj)：将元素中指定位置的对象修改</li></ul><p>​    (3).List接口的实现类</p><ul><li>ArrayList类<br>​    ArrayList类实现了可变的数组，允许保存所有元素，包括null，可以根据索引位置快速访问，缺点为插入和删除对象元素速度较慢，<strong>其操作是移动数组</strong><br>​    <strong>ArrayList是使用动态数组实现的</strong></li></ul><ul><li>LinkedList类<br>​    采用链表结构保存对象，优点便于向集合中插入和删除对象，缺点对于随机访问时效率低，<strong>其操作是定位节点</strong><br>​    <strong>LinkedList是使用双向链表实现的</strong></li></ul><p>​    (4).List集合的声明<br>​    <strong>通常声明为List类型，然后通过不同的实现类来进行实例化</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;E为Java中合法的数据类型List&lt;E&gt; list &#x3D; new ArrayList&lt;&gt;(); List&lt;E&gt; list2 &#x3D; new LinkedList&lt;&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意1：代码中小括号内是可以设置容量的，如果不写的话JDK 1.8 默认是10且建议初始化容量减少系统初始化容量的耗时</strong><br><strong>注意2：该构造方法并不是将ArrayList()初始化为指定长度，而是指定了其内部的Object数组的长度，也就是其容量。当我们调用size()时，返回的是其实际长度，而非容量大小。对超出ArrayList长度的部分进行访问或赋值操作时也会造成访问越界，尽管它的容量大小足够</strong></p><p>​    <strong>注意：集合的索引与数组一样从0开始，而且使用remove方法删除数据时需要注意是否越界，即使用该方法时同时使用try-catch来捕捉异常</strong></p><h4 id="5-Set集合"><a href="#5-Set集合" class="headerlink" title="5. Set集合"></a>5. Set集合</h4><p>​    (1).Set集合的对象不按特定的方式排序，只是简单的把对象加入集合中<br>​    <strong>Set的构造有一个约束条件，传入的Collection对象不能有重复值，加入Set的元素必须定义equals()方法以确保对象的唯一性(在上面List中是可以重复的) ，小心操作可变可变对象导致出现问题</strong> </p><p>​    (2). Set接口继承Collection接口，包含Collection中所有的方法</p><p>​    (3). Set集合的常用的实现类</p><ul><li>HashSet类<br>​    HashSet类实现Set接口，由哈希表支持，不保证Set的迭代顺序，不保证顺序永恒不变，此类允许使用null元素</li><li>TreeSet类<br>​    TreeSet类在实现Set集合时，必须实现Comparable接口，实现接口中的方法compareTo(Object o)方法比较此对象与指定对象的顺序<br>​    TreeSet类不仅实现Set接口，还实现java.util.SortedSet接口，TreeSet类实现的Set集合在遍历集合时按照自然顺序递增排序，也可以按照指定的比较器递增排序，<strong>即TreeSet通过 Comparator&lt;-(这是一个无参方法) 或者 Comparable &lt;-(这是一个接口)维护了一个排序顺序</strong><br>​    <strong>一般使用TreeSet类来实现自定义排序</strong></li></ul><h4 id="6-Map集合"><a href="#6-Map集合" class="headerlink" title="6. Map集合"></a>6. Map集合</h4><p>​    (1).Map集合没有继承Collection接口，其提供key到value的映射，Map中不能有相同的key，每个key只可以映射一个value，使用的是Map接口</p><p>Map接口的常用方法</p><table><thead><tr><th align="center">方法</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">put(K key,V value)</td><td align="center">向集合中添加指定的key与value的映射关系</td></tr><tr><td align="center">containsKey(Object key)</td><td align="center">如果此映射包含指定key的映射关系，则返回true</td></tr><tr><td align="center">containsValue(Object value)</td><td align="center">如果此映射将一个或多个key映射到指定值，则返回true</td></tr><tr><td align="center">get(Object key)</td><td align="center">如果存在指定的key对象，则返回该对象对应的值，否则返回null</td></tr><tr><td align="center">keySet()</td><td align="center">返回该集合中的所有key对象形成的Set集合</td></tr><tr><td align="center">values()</td><td align="center">返回该集合中所有值对象形成的Collection集合</td></tr></tbody></table><p><a href="https://imgtu.com/i/f2JSeS"><img src="https://z3.ax1x.com/2021/08/15/f2JSeS.png" alt="f2JSeS.png"></a></p><p>​    (2).<strong>注意：Map是双列的,Collection是单列的</strong><br>​    Map集合的实例化</p><pre class="line-numbers language-none"><code class="language-none">Map&lt;*,*&gt; map &#x3D; new HashMap&lt;&gt;() &#x2F;&#x2F;*为你要的数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>(3).Map和Set和List的关系</strong></p><ul><li>Map中存放的时键值对，Set中存放的是单个对象，但如果把value看做key的附庸，key在哪里，value就在哪里，这样就可以像对待Set一样来对待Map了。事实上，Map提供了一个Entry内部类来封装key-value对，再计算Entry存储时则只考虑Entry封装的key。</li><li>如果把Map集合里的所有value放在一起来看，它们又类似于一个List，元素可以重复，每个元素可以根据索引来找，只是Map中的索引不再是整数值，而是以另一个对象作为索引</li></ul><p>​    (4).Map集合的内部类Entry<br>​    Map中包括一个内部类Entry,该类封装一个键值对，常用方法：</p><ul><li>Object getKey():返回该Entry里包含的所有key值；</li><li>Object getvalue():返回该Entry里包含的所有value值；</li><li>Object setValue(V value):设置该Entry里包含的value值，并设置新的value值。</li></ul><p>​    (5).Map接口的实现类<br>​    Map接口的常用实现类有HashMap和TreeMap。建议使用HashMap类实现Map集合，HashMap类实现的Map集合添加和删除元素效率更高</p><ul><li><p>HashMap类<br>​    基于哈希表的Map接口的实现，此实现提供所有可选的映射操作，并允许使用null值和null键，但必须保证键的唯一性，此类不保证映射的顺序，特别是它不保证该顺序永恒不变</p></li><li><p>TreeMap类<br>​    TreeMap类不仅实现了Map接口，而且实现了java.util.SortedMap接口，集合中的映射关系具有一定的顺序，在添加、删除、定位映射关系时，比HashMap性能稍差，且TreeMap不允许键对象为null</p></li></ul><p>​    <strong>注意：可以通过HashMap类创建Map集合，当需要顺序输出时，再创建一个完成相同映射关系的TreeMap类实例</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java10</title>
      <link href="/2021/06/20/Java10/"/>
      <url>/2021/06/20/Java10/</url>
      
        <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h4 id="1-异常的概述"><a href="#1-异常的概述" class="headerlink" title="1. 异常的概述"></a>1. 异常的概述</h4><ul><li>异常是一个在程序执行期间发生的事件，它中断了正在执行的程序的正常指令流</li><li>异常产生后，如果不做任何处理，程序会被终止</li><li>异常在Java中也是作为类的实例的形式出现，在某一方法错误时，这个方法会创建一个异常对象，并把他传递给正在运行的系统，通过异常处理机制，可以将非正常情况下的处理代码与程序的主逻辑分离，即在编写代码主流程的同时在其他地方处理异常</li></ul><h4 id="2-jvm默认处理异常的方式"><a href="#2-jvm默认处理异常的方式" class="headerlink" title="2. jvm默认处理异常的方式"></a>2. jvm默认处理异常的方式</h4><ol><li>当某个方法出现异常情况时，会将异常封装成一个异常对象。</li><li>异常对象抛出给调用者，一层一层往上抛，最终到达main方法，主方法也没有办法处理，就抛出给jvm虚拟机</li><li>jvm虚拟机有没有得到指令处理异常，只能将异常的信息通过标准错误流（System.err）打印到控制台，结束自己。</li></ol><h4 id="3-异常的结构"><a href="#3-异常的结构" class="headerlink" title="3. 异常的结构"></a>3. 异常的结构</h4><p>​     <strong>在 Java 中，所有的异常都有一个共同的祖先 Throwable（可抛出类）</strong><br>​     <strong>在java中只有Throwable类型的实例才可以被抛出（throw）或者捕获（catch）</strong><br>​    <strong>Throwable</strong>： 有两个重要的子类：Exception（异常）和 Error（错误），二者都是 Java 异常处理的重要子类，各自都包含大量子类。异常和错误的区别是：异常能被程序本身可以处理，错误是无法处理（但错误也是异常）<br><a href="https://imgtu.com/i/2qtZ5Q"><img src="https://z3.ax1x.com/2021/06/15/2qtZ5Q.png" alt="2qtZ5Q.png"></a></p><p>​    </p><p>**Error（错误）:**一般来说，最常见的错误有程序进入死循环、内存泄漏等。在这种情况下，程序运行时本身无法解决，只能通过其他程序干预，Error类对象由java虚拟机生成并抛弃（通常Java程序不对这类异常进行处理）</p><p>​    <strong>Exception（异常）</strong>：分两大类，运行时异常(不检查异常)和非运行时异常(编译异常)。程序中应当尽可能去处理这些异常。</p><ul><li><strong>运行时异常</strong>：都是<strong>RuntimeException类及其子类</strong>异常，如NullPointerException(空指针异常)、IndexOutOfBoundsException(下标越界异常)等，<strong>这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理</strong>。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。运行时异常的特点是<strong>Java编译器不会检查它</strong>，也就是说，当程序中可能出现这类异常，<strong>即使没有用try-catch语句捕获它，也没有用throws子句声明抛出它，也会编译通过</strong>。</li><li><strong>非运行时异常 （编译异常）</strong>：是<strong>RuntimeException以外的异常，类型上都属于Exception类及其子类</strong>。从程序语法角度讲是<strong>必须进行处理的异常，如果不处理，程序就不能编译通过</strong>。如IOException、SQLException等以及用户自定义的Exception异常，一般情况下不自定义检查异常。</li></ul><h4 id="4-异常的处理"><a href="#4-异常的处理" class="headerlink" title="4. 异常的处理"></a>4. 异常的处理</h4><p>​    在Java中如果某个方法抛出异常，可以在当前方法中进行捕捉并处理，也可以将异常向上抛出</p><h4 id="5-异常的捕捉"><a href="#5-异常的捕捉" class="headerlink" title="5. 异常的捕捉"></a>5. 异常的捕捉</h4><p>​    Java语言通过try、catch、finally来处理异常</p><ul><li>try语句块用来存放可能发生异常的Java语句</li><li>catch程序块在try语句块之后，当try语句块里抛出异常时执行</li><li>finally语句块里的内容无论try语句是否跳出，正常都会执行</li></ul><p>​    <strong>注意：如果程序跳到了catch块后会继续向下执行，不会再去执行try代码块的内容</strong></p><pre class="line-numbers language-none"><code class="language-none">try &#123; &#x2F;&#x2F;可能出现异常的代码&#125; catch (Exception e) &#123;&#x2F;&#x2F;可能出现的异常类型 异常的变量名称,e是引用了抛出的实例&#x2F;&#x2F;针对该异常类型的处理办法&#125;finally&#123;&#x2F;&#x2F;语句块&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    获取异常的信息的函数(需要在异常引用变量名称后调用，这是可抛出类(异常最上层父类)的方法)</p><ul><li>getMessage()函数：输出错误性质</li><li>toString()函数：给出异常的类型与性质</li><li>printStackTrace()函数：指出异常的类型、性质、栈层次及出现在程序中的位置</li></ul><h4 id="6-在方法中抛出异常"><a href="#6-在方法中抛出异常" class="headerlink" title="6. 在方法中抛出异常"></a>6. 在方法中抛出异常</h4><p>​    <strong>(1).使用throws关键字抛出异常</strong><br>​    <strong>throws关键字通常被应用在声明方法时，用来指定可能抛出的异常。</strong>多个异常可以使用逗号隔开。当在主函数中调用该方法时，如果发生异常，就会将异常抛给指定异常对象<br>​    <strong>throws关键字声明的方法表示此方法不处理异常，而交给方法调用处进行处理</strong><br>​    <strong>注意：throws不会抛出异常对象只是起通知作用，但是catch块的引用方法按这个通知的来分配异常对象的引用类型，即throws声明了是哪种类型的异常，使它的调用者可以捕获这个异常及其父类</strong></p><pre class="line-numbers language-none"><code class="language-none">修饰符 方法名() throws 异常名&#123; &#x2F;&#x2F;异常名必须是JavaException的子类，不可以自己取&#x2F;&#x2F;方法内容&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：写了throws后，调用这个方法的调用方必须要对可能发生异常进行处理(不管程序是否发生异常)，不写throws的话，就正常使用方法，其出错的话编译器报错，但用了接收的try-catch可以处理。</strong><br>​    <strong>而且抛给调用方后，调用方使用try-catch来处理，如果不想处理可以继续向上抛，但最终还是要有能够处理该异常的代码</strong></p><p>​    <strong>(2).使用throw关键字抛出异常</strong><br>​    throw关键字通常用于方法体中，通过throw<strong>抛出一个异常对象</strong>，程序在执行到throw语句时立即终止,必须对该抛出的异常进行处理，要么捕获要么上抛，如果需要该方法上一级代码来捕获处理异常，则需要在方法的声明中使用throws关键字并指明要抛出的异常（是该异常的引用，如果用父类可能会造成问题），捕捉throw抛出的异常用try-catch语句块</p><h4 id="7-自定义的异常"><a href="#7-自定义的异常" class="headerlink" title="7. 自定义的异常"></a>7. 自定义的异常</h4><p>​    在Java中用户通过继承Exception类来自定义异常类<br>​    通常使用throw来抛出自定义异常<br>​    父类Exception的主要构造方法，详细见API文档</p><pre class="line-numbers language-none"><code class="language-none">Exception()Constructs a new exception with null as its detail message.Exception(String message)Constructs a new exception with the specified detail message.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    使用自定义异常的步骤<br>​    (1). 创建自定义异常类<br>​    (2). 在方法中通过throw关键字抛出异常对象<br>​    (3). 对抛出异常进行处理</p><h4 id="7-异常的使用原则"><a href="#7-异常的使用原则" class="headerlink" title="7. 异常的使用原则"></a>7. 异常的使用原则</h4><p>​    异常的处理不应用来控制程序的正常流程，其主要作用是捕获程序在运行时发生的异常并进行相应的处理</p><h4 id="8-异常的注意事项"><a href="#8-异常的注意事项" class="headerlink" title="8. 异常的注意事项"></a>8. 异常的注意事项</h4><ul><li>一个方法被覆盖时，覆盖它的方法必须抛出相同的异常或异常子类</li><li>如果父类抛出多个异常，则覆盖方法必须抛出那些异常的一个子集，不能抛出新异常</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java09</title>
      <link href="/2021/06/15/Java09/"/>
      <url>/2021/06/15/Java09/</url>
      
        <content type="html"><![CDATA[<h2 id="类的高级特性"><a href="#类的高级特性" class="headerlink" title="类的高级特性"></a>类的高级特性</h2><h4 id="1-类名冲突与完整路径"><a href="#1-类名冲突与完整路径" class="headerlink" title="1. 类名冲突与完整路径"></a>1. 类名冲突与完整路径</h4><p>​    在Java中，同名的两个类需要放在不同的类包(包)中<br>​    完整的类名为包名和类名的组合<br>​    像指定类时是可以写完整类名的但是由于麻烦和可读性就会使用import关键字来引入</p><h4 id="2-同一个包中的类相互访问时，可以不指定包名"><a href="#2-同一个包中的类相互访问时，可以不指定包名" class="headerlink" title="2. 同一个包中的类相互访问时，可以不指定包名"></a>2. 同一个包中的类相互访问时，可以不指定包名</h4><h4 id="3-CLASSPATH"><a href="#3-CLASSPATH" class="headerlink" title="3. CLASSPATH"></a>3. CLASSPATH</h4><p>​    直译的话就是类的路径，配置了classpath后java程序会直接去classpath的路径下去找.class文件运行。这样我们就可以在任意目录下来运行我们的java程序，在连接数据库时我配置了这个的环境变量</p><h4 id="4-package关键字"><a href="#4-package关键字" class="headerlink" title="4. package关键字"></a>4. package关键字</h4><p>​    用来定义包</p><pre class="line-numbers language-none"><code class="language-none">package 包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    需要将package表达式放置在第一行，它必须是程序第一行非注释代码<br>​    Java包的命名规则：全部使用小写字母</p><h4 id="5-import关键字"><a href="#5-import关键字" class="headerlink" title="5. import关键字"></a>5. import关键字</h4><p>​    (1).用来导入包</p><pre class="line-numbers language-none"><code class="language-none">import 包名.类名  &#x2F;&#x2F;如果类不在包中则只要类名即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    如果需要使用包中的多个类，类名用 * 代替， * 表所有的类<br>​    <strong>注意：<br>​    如果已经用import引入了一个类，如果还要引用一个和这个类同名的类，则必须使用完整路径</strong></p><p>​    (2).用来导入静态成员</p><pre class="line-numbers language-none"><code class="language-none">import static 静态成员 &#x2F;&#x2F;静态成员应为完整路径，可以为静态变量，也可以是静态方法<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    导入完之后就可以直接使用了，不需要再写完整的路径</p><h4 id="6-final关键字"><a href="#6-final关键字" class="headerlink" title="6. final关键字"></a>6. final关键字</h4><p>​    <strong>(1).final变量</strong><br>​    使用final声明的变量，一旦被设定就不可以再改变它的值，<strong>通常使用这个方式来定义常量，final常量定义时需要使用大写字母命名</strong><br>​    注意：final变量定义的时候，可以先声明，而不给初值，这种变量也称为final空白</p><p>​    final修饰的变量有三种：静态变量、实例变量和局部变量，分别表示三种类型的常量</p><p>​    <strong>(2).final对象</strong><br>​    使用final修饰对象，一旦一个对象的引用被修饰，则它只能恒定指向一个对象，不能改变指向，未被指定时可以随便指<br>​    <strong>注意：数组也可以看作是一个对象来使用这个关键字</strong></p><p>​    <strong>(3).final方法</strong><br>​    定义为final的方法不能被重写，可以被继承<br>​    定义为final的方法的执行效率高于非final的方法<br>​    定义为private不能被子类方法覆盖，private类型的方法默认是final类型的（这句先不说覆不覆盖就private感觉外部就调用不了了）</p><p>​    <strong>(4).final类</strong><br>​    定义为final类不能被继承，没有子类</p><pre class="line-numbers language-none"><code class="language-none">final 类名&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>如果一个类设置为final，则类中所有的方法都被隐式设置为final形式，但final类中的成员变量可以被定义为final或者非final形式</strong></p><p>​    <strong>(5).static和final一起使用</strong><br>​    static final用来修饰成员变量和成员方法，可以看作为全局常量</p><ul><li>对于变量，表示一旦给值就不可修改，并且通过类名可以访问</li><li>对于方法，表示不可覆盖，并且可以通过类名直接访问</li></ul><p>​    <strong>注意：对于被static和final修饰过的实例常量，实例本身不能再改变了，但对于一些容器类型（比如，ArrayList、HashMap）的实例变量，不可以改变容器变量本身，但可以修改容器中存放的对象</strong></p><h4 id="7-内部类"><a href="#7-内部类" class="headerlink" title="7. 内部类"></a>7. 内部类</h4><p>​    如果在一个类中再定义一个类，则将这个再定义的类称为内部类，<strong>内部类分为成员内部类、局部内部类、匿名类</strong></p><p>​    <strong>(1).成员内部类</strong></p><pre class="line-numbers language-none"><code class="language-none">public class Outside&#123; &#x2F;&#x2F;外部类private class Inside&#123; &#x2F;&#x2F;内部类,是一个私有成员&#x2F;&#x2F;something&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>在内部类中可以随意使用外部类的成员方法和成员变量，尽管被修饰为了private</strong><br>​    就像main方法放在类中可以访问该类的私有成员一样<br>​    <strong>但外部类不能直接访问内部类成员，需要先将内部类在外部类中实例化后再使用，内部类为private在外部类实例化后一样也可以使用</strong><br>​    <strong>内部类修饰为private只能外部类访问，其他类没有权限访问（哪怕是继承了外部类的子类）</strong></p><p>​    内部类的实例化需要绑定在外部类的实例上</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;内部类的实例化，如果在外部类和外部类非静态方法之外实例内部类对象则需要下面的形式外部类名.内部类名 引用变量名 &#x3D; 外部实例引用变量.内部实例  &#x2F;&#x2F;内部实例可以是new的也可以是其他只要是内部实例就行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    <strong>类中多次实现接口中同一个方法</strong><br>​    在程序中可以用权限修饰符为private的内部类实现。可以在外部提供一个接口，在接口中声明一个方法。如果在实现该接口的内部类中实现该接口的方法，就可以定义多个内部类以不同的方式实现接口中的同一个方法，而在一般的类中是不能多次实现接口中同一个方法的<br>​    此时通过在外部类中写方法实例化这个private内部类，之后用接口的引用来接这个实现接口的实例<br>​    <strong>详细见《Java实例-内部类的基本作用》例一</strong></p><p>​    <strong>外部类中定义的成员变量与内部类的成员变量名称相同，可以使用this关键字</strong></p><pre class="line-numbers language-none"><code class="language-none">public class Outside&#123;private int x &#x3D; 0;private class Inside&#123;private int x &#x3D; 9;public void doit(int x)&#123;x++;              &#x2F;&#x2F;调用的是形参xthis.x++          &#x2F;&#x2F;调用的是内部类成员变量xOutside.this.x++  &#x2F;&#x2F;调用的是外部类成员变量x&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>(2).局部内部类</strong><br>​    在类的局部进行定义，如在类的方法或任意作用域中定义<br>​    由于内部类在类方法或者任意作用域中，<strong>在方法(作用域)的外部是无法访问该内部类</strong>，而内部类却可以访问当前代码块的常量**(final类型的局部变量)<strong>以及</strong>此外部类的所有成员**<br>​    在方法中的局部变量在内部类中可以访问<br>​    <strong>详细见《Java实例-内部类的基本作用》例二</strong></p><p>​    <strong>(3).匿名内部类</strong><br>​    用时再查，和局部内部类一样在方法中，不过去掉类名，在return语句下在描述类体</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;语法return new A()&#123;&#x2F;&#x2F;A为接口名&#x2F;&#x2F;类体&#125;; &#x2F;&#x2F;注意：这里特殊的需要加一个分号，分号代表接口的引用表达式的创建<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    匿名内部类编译后会产生以“外部类名$序号”为名称的.class文件，序号以1<del>n排列，分别代表1</del>n个匿名内部类</p><p>​    <strong>(4).静态内部类（少见）</strong><br>​    在内部类前加修饰符static，则为静态内部类，<strong>静态内部类中可以声明static成员，但在非静态内部类中不能声明静态成员</strong><br>​    <strong>静态内部类的特点</strong></p><ul><li>静态内部类内不可以使用外部类的非静态成员</li><li>如果创建静态内部类的对象，不需要其外部类的对象<br>​    在程序测试时需要每个文件设置一个主方法，这会产生许多额外的代码，程序本身不需要这些主方法，所以一般把主方法写到静态内部类中，主要是编译后会产生独立类，测试完后删除即可</li></ul><h4 id="8-内部类的继承"><a href="#8-内部类的继承" class="headerlink" title="8. 内部类的继承"></a>8. 内部类的继承</h4><p>​    内部类的继承比普通类的继承要复杂</p><pre class="line-numbers language-none"><code class="language-none">package hello;public class First extends A.B&#123; &#x2F;&#x2F;继承内部类class Bpublic First(A a) &#123;a.super();&#125;&#125;class A&#123;class B&#123;&#x2F;&#x2F;something&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>在某个类继承内部类时，必须硬性给与这个类一个带参数的构造方法，并且该构造方法的参数为需要继承内部类的外部类的引用，同时在构造方法体中使用a.super()语句，这样才为继承提供了必要的对象引用</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实例-内部类</title>
      <link href="/2021/06/15/Java%E5%AE%9E%E4%BE%8B-%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2021/06/15/Java%E5%AE%9E%E4%BE%8B-%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="Java实例-内部类的基本作用"><a href="#Java实例-内部类的基本作用" class="headerlink" title="Java实例-内部类的基本作用"></a>Java实例-内部类的基本作用</h2><h4 id="1-实例内部类–内部类在外部类中，内部类修饰为private"><a href="#1-实例内部类–内部类在外部类中，内部类修饰为private" class="headerlink" title="1. 实例内部类–内部类在外部类中，内部类修饰为private"></a>1. 实例内部类–内部类在外部类中，内部类修饰为private</h4><pre class="line-numbers language-none"><code class="language-none">package hello;interface Food&#123;public void doing();&#125;public class First&#123;public static void main(String[] args) &#123;Outside o &#x3D; new Outside();Food i &#x3D; o.create(); &#x2F;&#x2F;用接口引用类型来接内部类实现接口的实例i.doing();&#125;&#125;class Outside&#123;private class Inside implements Food&#123; &#x2F;&#x2F;private只能在外部类访问public void doing() &#123;System.out.println(&quot;eat egg&quot;);&#125;&#125;public Inside create() &#123;return new Inside();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-局部内部类–内部类在外部类的方法中，内部类无修饰符"><a href="#2-局部内部类–内部类在外部类的方法中，内部类无修饰符" class="headerlink" title="2. 局部内部类–内部类在外部类的方法中，内部类无修饰符"></a>2. 局部内部类–内部类在外部类的方法中，内部类无修饰符</h4><pre class="line-numbers language-none"><code class="language-none">package hello;interface Food&#123;public void doing();&#125;public class First&#123;public static void main(String[] args) &#123;Outside b &#x3D; new Outside();Food c &#x3D; b.a();c.doing();&#125;&#125;class Outside&#123;public Food a() &#123; &#x2F;&#x2F;方法返回值类型为接口类型class Inside implements Food&#123;public void doing() &#123;System.out.println(&quot;hello&quot;);&#125;&#125;return new Inside();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java08</title>
      <link href="/2021/06/05/Java08/"/>
      <url>/2021/06/05/Java08/</url>
      
        <content type="html"><![CDATA[<h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><h4 id="1-抽象类的引入"><a href="#1-抽象类的引入" class="headerlink" title="1. 抽象类的引入"></a>1. 抽象类的引入</h4><p>​    一般将父类定义为抽象类，然后对这个父类进行继承与多态处理，在继承树中越上方的类越抽象<br>​    在多态机制中，一般不需要将父类初始化对象，只需要子类对象，<strong>在Java中设置的抽象类不能实例化为对象</strong></p><h4 id="2-abstract关键字"><a href="#2-abstract关键字" class="headerlink" title="2. abstract关键字"></a>2. abstract关键字</h4><p>​    abstract关键字定义的类为抽象类，定义的方法为抽象方法，抽象方法没有方法体，方法本身没有意义，但通过重写来获得意义，承载这个抽象方法的抽象类必须被继承，实际上抽象类除了被继承之外没有任何意义</p><pre class="line-numbers language-none"><code class="language-none">public abstract class Test&#123;  &#x2F;&#x2F;定义抽象类abstract void textAbstract();  &#x2F;&#x2F;定义抽象方法&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    声明一个抽象的方法，则必须将承载这个抽象方法的类定义为抽象类，不可能在非抽象类获取抽象方法，只要类中有一个抽象方法，这个类就被标记为抽象类<br>​    抽象类被继承后子类若不是抽象类需要实现其中所有的抽象方法，要保证相同的方法名称、参数列表和相同的返回类型<br>​    abstract无法和final共存修饰类，但是抽象类里面可以用final与static修饰变量和方法，若你创建的类不想被创建对象，变量方法不想被继承，但又要可以直接调用，可以实现抽象类</p><h4 id="3-接口的引入"><a href="#3-接口的引入" class="headerlink" title="3. 接口的引入"></a>3. 接口的引入</h4><p>​    当你需要的一系列子类既需要继承重写父类的抽象方法，同时还需要一个共同的方法但实现过程各子类不相同，有些甚至不需要，就可以把这个方法封装在接口中，需要的子类再去实现这个接口，不需要的就不用了<br>​    接口是抽象类的延伸，可以把它看作为一个纯粹的抽象类，接口中的所有方法都没有方法体<br>​    接口用来弥补类无法实现多继承的局限<br>​    由于接口为抽象类，为父类，所以你也可以像之前多态一样去使用接口，具体见<strong>7</strong><br>​    <strong>注意：接口内的方法省略abstract关键字</strong><br>​    如果一个类实现了一个接口中要求的所有的方法，然而没有提供方法体而仅仅只有方法标识，那么这个类一定是一个抽象类</p><h4 id="4-interface关键字"><a href="#4-interface关键字" class="headerlink" title="4. interface关键字"></a>4. interface关键字</h4><p>​    接口使用interface关键字进行定义</p><pre class="line-numbers language-none"><code class="language-none">public interface drawTest&#123;&#x2F;&#x2F;public可以不要，有public类时就不需要了void draw(); &#x2F;&#x2F;接口内的方法省略abstract关键字&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-implements关键字"><a href="#5-implements关键字" class="headerlink" title="5. implements关键字"></a>5. implements关键字</h4><p>​    一个类实现一个接口，可以使用implements关键字</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;public可以不要，有public类时就不需要了public class child extends father implements drawTest&#123;&#x2F;&#x2F;可以不继承直接实现接口的，要实现多个接口每个接口用,隔开&#x2F;&#x2F;something&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-接口的注意事项"><a href="#6-接口的注意事项" class="headerlink" title="6. 接口的注意事项"></a>6. 接口的注意事项</h4><ul><li>在接口中方法必须定义为public或者abstract形式，其他权限修饰符不被Java编译器认可，如果未注明默认就是public and abstract的</li><li>在接口中定义的任何字段都自动是static和final和public的</li><li>继承一个接口时需要实现接口中所有的方法</li><li>一个类可以实现不止一个接口，语法见<strong>5</strong></li></ul><h4 id="7-接口的进阶"><a href="#7-接口的进阶" class="headerlink" title="7. 接口的进阶"></a>7. 接口的进阶</h4><p>​    <strong>我们不能直接去实例化一个接口，因为接口中的方法都是抽象的，是没有方法体的，这样怎么可能产生具体的实例呢？但是，我们可以使用接口类型的引用指向一个实现了该接口的对象，并且可以调用这个接口中的方法</strong></p><p>​    应该优先使用接口而不是类来引用对象。如果有适合的接口类型存在，那么对于参数、返回值、变量和域来说，就都应该使用接口类型进行声明。只有当你利用构造器创建某个对象的时候，才真正需要引用这个对象的类。<br>​    如果你养成了用接口作为类型的习惯，你的程序将会更加灵活</p><h4 id="8-接口的静态方法"><a href="#8-接口的静态方法" class="headerlink" title="8. 接口的静态方法"></a>8. 接口的静态方法</h4><p>​    Java 8允许静态接口方法<br>​    不能覆盖静态接口方法，只能通过使用接口名+静态接口方法名使用该静态接口方法，实例化后是无法调用的<br><a href="https://imgtu.com/i/4zrWGD"><img src="https://z3.ax1x.com/2021/10/06/4zrWGD.png" alt="4zrWGD.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java07</title>
      <link href="/2021/06/04/Java07/"/>
      <url>/2021/06/04/Java07/</url>
      
        <content type="html"><![CDATA[<h2 id="类的继承，多态"><a href="#类的继承，多态" class="headerlink" title="类的继承，多态"></a>类的继承，多态</h2><h4 id="1-继承的基本思想是基于某个父类进行拓展，得到一个新子类，该子类可以继承父类原有的属性和方法，可以增加父类不具备的属性和方法，可以重写-覆盖-父类中的某些方法"><a href="#1-继承的基本思想是基于某个父类进行拓展，得到一个新子类，该子类可以继承父类原有的属性和方法，可以增加父类不具备的属性和方法，可以重写-覆盖-父类中的某些方法" class="headerlink" title="1. 继承的基本思想是基于某个父类进行拓展，得到一个新子类，该子类可以继承父类原有的属性和方法，可以增加父类不具备的属性和方法，可以重写(覆盖)父类中的某些方法"></a>1. 继承的基本思想是基于某个父类进行拓展，得到一个新子类，该子类可以继承父类原有的属性和方法，可以增加父类不具备的属性和方法，可以重写(覆盖)父类中的某些方法</h4><h4 id="2-extends关键字"><a href="#2-extends关键字" class="headerlink" title="2. extends关键字"></a>2. extends关键字</h4><p>​    用来标识两个类的继承关系</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;父类class bookStore&#123;&#125;&#x2F;&#x2F;子类class book extends bookStore&#123;&#x2F;&#x2F;当子类再次声明与父类一样的成员变量时，就有两个名字一样的成员变量，要使用父类的话需用super()关键字来引用父类(无关键字时，子类中和父类中的属性或方法同名，则父类中的方法或属性将被覆盖或隐藏)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-super关键字"><a href="#3-super关键字" class="headerlink" title="3. super关键字"></a>3. super关键字</h4><p>​    (1).在Java类中使用super关键字来引用父类的成分，它是一个指代变量，用于在子类中指代父类对象<br>​    (2).只能用于子类的构造函数和实例方法中，不能用于子类的类（静态）方法中。原因是super指代的是一个父类的对象，它需要在运行时被创建，而静态方法是类方法，它是类的一部分。当类被加载时，方法已经存在，但是这时候父类对象还没有被初始化</p><h4 id="4-子类是父类的派生类，它的实例化依赖于父类的实例化。所以它的任何一个构造函数都必须要初始化父类"><a href="#4-子类是父类的派生类，它的实例化依赖于父类的实例化。所以它的任何一个构造函数都必须要初始化父类" class="headerlink" title="4. 子类是父类的派生类，它的实例化依赖于父类的实例化。所以它的任何一个构造函数都必须要初始化父类"></a>4. 子类是父类的派生类，它的实例化依赖于父类的实例化。所以它的任何一个构造函数都必须要初始化父类</h4><pre class="line-numbers language-none"><code class="language-none">class bookStore&#123;&#125;&#x2F;&#x2F;子类class book extends bookStore&#123;public book()&#123;super();  &#x2F;&#x2F;初始化父类&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：</strong></p><ul><li>在我们子类的构造函数中，如果我们没有显式调用super来初始化父类的话，那么Java会隐式的调用super();来调用父类无参构造函数并把它放在构造函数的第一行</li><li>Java只会隐式的调用无参构造函数，如果父类没有无参构造函数，那么子类中就必须显式的调用super关键字来调用已有的有参构造函数来初始化父类</li><li> 子类中的super为什么必须要放在第一行？因为子类的实例化依赖于父类的实例化，在构建子类时，必须要有父类实例，只能有了父类的实例，子类才能够初始化自己</li></ul><h4 id="5-当实例化子类对象时，父类的对象也相应的被实例化，且Java编译器会在子类的构造方法中自动调用父类的无参构造方法，-一个-多个父类时是从顶级向下调用"><a href="#5-当实例化子类对象时，父类的对象也相应的被实例化，且Java编译器会在子类的构造方法中自动调用父类的无参构造方法，-一个-多个父类时是从顶级向下调用" class="headerlink" title="5. 当实例化子类对象时，父类的对象也相应的被实例化，且Java编译器会在子类的构造方法中自动调用父类的无参构造方法，(一个)多个父类时是从顶级向下调用"></a>5. 当实例化子类对象时，父类的对象也相应的被实例化，且Java编译器会在子类的构造方法中自动调用父类的无参构造方法，(一个)多个父类时是从顶级向下调用</h4><h4 id="6-方法的重写"><a href="#6-方法的重写" class="headerlink" title="6. 方法的重写"></a>6. 方法的重写</h4><p>​    重写只有方法的重写与属性无关    </p><p>​    重写也可以称为覆盖，是保留父类成员方法的名字，重写可以重写成员方法实现的内容、成员方法的修饰符权限、成员方法的返回值类型<br>​    <strong>注意：1.方法名必须相同</strong></p><p>​                <strong>2.参数列表必须相同</strong></p><p>​                <strong>3.修改成员方法修饰符权限只能从小范围向大范围改变</strong></p><p>​                <strong>4.抛出的异常的范围可以缩小，但不能扩大</strong></p><p>​    重构：特殊的重写方法，子类与父类的返回值、方法名称、参数类型以及个数完全相同，唯一不同的是方法的实现内容</p><h4 id="7-Object类"><a href="#7-Object类" class="headerlink" title="7. Object类"></a>7. Object类</h4><p>​    在Java中所有的类都继承了Java.lang.Object类，由于所有类都是继承这个类所以定义类时可以省略extends Object</p><p>​    Object类中的getClass()，notify()，notifyAll()，wait()等方法不能被重写，这些方法被定义为final类型</p><p>​    Object类的重要方法</p><ul><li><p>getClass()方法<br>​    返回对象执行时的Class实例，该实例通过getName()方法获得类的名称</p></li><li><p>toString()方法<br>​    将一个对象返回为字符串形式，它会返回一个String实例，在实际运用中经常重写该方法</p></li><li><p>equals()方法<br>​    按理说是比较两个对象的实际内容是否相等,但类对象的equals方法实现了对象上最有区别的等价关系；也就是说，对于任何非空的引用值x和y，当且仅当x和y引用同一对象（x == y的值为true）时，此方法才返回true，像之前的String比较里面内容是因为重写了这个方法<br>​    <strong>注意：在自定义类中使用equals()方法进行比较时，相同的对象比较会返回false，因为equals()方法的默认实现使用”==”运算符来比较两个对象的引用地址，而不上比较对象的内容，所以要比较内容需要重写equals()方法</strong></p></li></ul><h4 id="8-对象类型的转换"><a href="#8-对象类型的转换" class="headerlink" title="8. 对象类型的转换"></a>8. 对象类型的转换</h4><ul><li><p>向上转型(多态)<br>​    把子类对象赋值给父类类型的引用变量<br>​    <strong>父类的引用可以调用子类中重写的父类的方法，但不能调用子类中独有的方法</strong></p><pre class="line-numbers language-none"><code class="language-none">父类型 a &#x3D; new 子类型();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>向下转型(显式类型转换)<br>​    把父类对象强制转化为子类型，赋值给子类引用变量<br>​    进行向下转型时，如果父类对象不是子类的实例，会产生ClassCastException异常，所以经常使用instanceof操作符来完成判断</p><pre class="line-numbers language-none"><code class="language-none">子类型 b &#x3D; (子类型)父类对象的引用变量;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    父类中没有的方法和类型必须要向下转型后才能调用</p></li></ul><h4 id="9-instanceof操作符"><a href="#9-instanceof操作符" class="headerlink" title="9. instanceof操作符"></a>9. instanceof操作符</h4><p>​    用来判断是否一个类实现了某个接口，还可以判断一个实例的对象是否属于一个类(子类一定时属于父类的，不能说父类属于子类，即平行四边形属于四边形，但四边形不属于平行四边形)</p><pre class="line-numbers language-none"><code class="language-none">子对象 instanceof 父类型; &#x2F;&#x2F;返回true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    该方式经常与向下转型连用，当不属于时把父类强制转化为子类<br>​    当两个类完全没有关系时使用这个操作符来操作会报错</p><p><strong>详细使用请看笔记《Java实例-多态》</strong></p><h4 id="10-方法的重载"><a href="#10-方法的重载" class="headerlink" title="10. 方法的重载"></a>10. 方法的重载</h4><p>​    在同一个类中允许存在一个以上的同名方法，只要这些方法的参数个数或类型不同即可<br>​    <strong>注意：方法重载中可以使两个方法的返回值类型不同，但只有返回值类型不同不足以区分两个方法的重载</strong><br>​    编译器是利用方法名、方法各参数类型和参数的个数以及参数的顺序来确定类中的方法是否唯一</p><h4 id="11-不定长参数"><a href="#11-不定长参数" class="headerlink" title="11. 不定长参数"></a>11. 不定长参数</h4><pre class="line-numbers language-none"><code class="language-none"> &#x2F;&#x2F;定义不定长参数方法 &#x2F;&#x2F;返回值 方法名(参数数据类型...参数名称)public static int add(int...a)&#123;不定长参数a为一个数组，a的长度取决于调用时传的参数&#x2F;&#x2F;方法体&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    不定长参数方法可以作为一个单独的重载方法</p><h4 id="12-多态"><a href="#12-多态" class="headerlink" title="12. 多态"></a>12. 多态</h4><p>​    多态存在的三个前提</p><ul><li>要有继承关系</li><li>子类要重写父类方法</li><li>父类引用指向子类对象</li></ul><p>​    通过定义一个父类，让它的所有子类通过向上转型的原则作为一个方法的参数，再在这个方法中做出一些限定，后可以做出每个子类自己独有的事情。<br>​    这样的处理可以很好解决代码的冗余问题，同时使得程序易于维护，可以随意增加子类，只需要改变传参就可以了</p><p><strong>多态的样例代码见请看笔记《Java实例-多态》</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实例-多态</title>
      <link href="/2021/06/04/Java%E5%AE%9E%E4%BE%8B-%E5%A4%9A%E6%80%81/"/>
      <url>/2021/06/04/Java%E5%AE%9E%E4%BE%8B-%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="多态实例"><a href="#多态实例" class="headerlink" title="多态实例"></a>多态实例</h2><pre class="line-numbers language-none"><code class="language-none">package hello;import java.text.DecimalFormat;import java.util.Random;import java.lang.Math;public class First&#123;public static void main(String[] args) &#123;choose(new child1());choose(new child2());&#125;public static void choose(father a) &#123;a.Todo();if(a instanceof child1) &#123;((child1) a).eat();&#x2F;&#x2F;父类中没有的方法和类型必须要向下转型后才能调用&#125;else if(a instanceof child2) &#123;((child2) a).eat();&#125;&#125;&#125;class father&#123;public father() &#123;&#125;public void Todo() &#123;System.out.println(&quot;work&quot;);&#125;&#125;class child1 extends father&#123;public child1() &#123;super();&#125;public void Todo() &#123;System.out.println(&quot;study&quot;);&#125;public void eat() &#123;System.out.println(&quot;fish&quot;);&#125;&#125;class child2 extends father&#123;public child2() &#123;super();&#125;public void Todo() &#123;System.out.println(&quot;sing&quot;);&#125;public void eat() &#123;System.out.println(&quot;fish&quot;);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java06</title>
      <link href="/2021/06/02/Java06/"/>
      <url>/2021/06/02/Java06/</url>
      
        <content type="html"><![CDATA[<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h4 id="1-为什么要有包装类"><a href="#1-为什么要有包装类" class="headerlink" title="1. 为什么要有包装类"></a>1. 为什么要有包装类</h4><ul><li>在面向对象中，“一切皆对象”，但基本数据类型的数据不太符合这一理念，基本数据类型不是对象</li><li>涉及到类型之间的转化，数据类型之间的基本操作；如果都有我们自己去实现，那么工作量过大</li><li>java针对每一个基本数据类型都设计了一个包装类</li></ul><h4 id="2-java-lang包中的Integer类、Long类、Short类，可以将int、long和short封装成一个类，这些都是Number的子类，他们包含的方法基本相同，之后只以Integer类为例"><a href="#2-java-lang包中的Integer类、Long类、Short类，可以将int、long和short封装成一个类，这些都是Number的子类，他们包含的方法基本相同，之后只以Integer类为例" class="headerlink" title="2. java.lang包中的Integer类、Long类、Short类，可以将int、long和short封装成一个类，这些都是Number的子类，他们包含的方法基本相同，之后只以Integer类为例"></a>2. java.lang包中的Integer类、Long类、Short类，可以将int、long和short封装成一个类，这些都是Number的子类，他们包含的方法基本相同，之后只以Integer类为例</h4><h4 id="3-Integer类"><a href="#3-Integer类" class="headerlink" title="3. Integer类"></a>3. Integer类</h4><p>Integer类将原语类型int的值包装在对象中。integer类型的对象包含一个类型为int的字段</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args) &#123;Integer d &#x3D; Integer.valueOf(400); &#x2F;&#x2F;等同于将基本类型装箱，另一种装箱方法已经不允许Integer d &#x3D; new Integer(400);int a &#x3D; d.intValue(); &#x2F;&#x2F;将Integer类型拆箱&#x2F;**在Java 5之前的版本中，基本数据类型和包装类之间的转换是需要手动进行的,但Sun公司从Java5开始提供了的自动装箱(Autoboxing)和自动拆箱(AutoUnboxing)操作*&#x2F;Integer i &#x3D; 13; &#x2F;&#x2F;自动装箱int c &#x3D; i;      &#x2F;&#x2F;自动拆箱System.out.print(a);&#125;&#x2F;&#x2F;输出400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般都是使用该类的提供的一些方法，让数据可以在int类型与String类型之间相互转换<br>如，以下为部分静态方法(详细全部方法见API文档)</p><pre class="line-numbers language-none"><code class="language-none">toString() &#x2F;&#x2F;返回一个表示该Integer值的String对象，返回值StringparseInt(String str) &#x2F;&#x2F;返回包含在由str指定的字符串中的数字的等价整数值，返回值intvalueOf(String str或者int i) &#x2F;&#x2F;返回保存指定的String值或int值的Integer对象intValue() &#x2F;&#x2F;以int型返回此Integer对象，返回值int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-Boolean类，Byte类，Character类，Double类都与上面Integer类类似，需要时自己查阅即可"><a href="#4-Boolean类，Byte类，Character类，Double类都与上面Integer类类似，需要时自己查阅即可" class="headerlink" title="4. Boolean类，Byte类，Character类，Double类都与上面Integer类类似，需要时自己查阅即可"></a>4. Boolean类，Byte类，Character类，Double类都与上面Integer类类似，需要时自己查阅即可</h4><h2 id="数字处理类"><a href="#数字处理类" class="headerlink" title="数字处理类"></a>数字处理类</h2><h4 id="1-Java中未进行格式化的数字遵循以下原则："><a href="#1-Java中未进行格式化的数字遵循以下原则：" class="headerlink" title="1. Java中未进行格式化的数字遵循以下原则："></a>1. Java中未进行格式化的数字遵循以下原则：</h4><ul><li>如果数据绝对值大于0.001并且小于10000000，使以常规小数形式表示</li><li>如果数据绝对值小于0.001并且大于10000000，使用科学计数法表示</li></ul><h4 id="2-数字格式化-使用DecimalFormat"><a href="#2-数字格式化-使用DecimalFormat" class="headerlink" title="2. 数字格式化(使用DecimalFormat)"></a>2. 数字格式化(使用DecimalFormat)</h4><p>​    使用这个类时需要用import关键字将java.text.DecimalFormat引入<br>​    DecimalFormat是NumberFormat的一个子类，用于格式化十进制数字，可以在实例化DecimalFormat对象时传递数字格式(以字符串格式表示)，如果未传入的话则可以通过applyPattern方法来传入设置模板(模板是有特殊字符组成的)，该方法参数为空时抛出异常NullPointerException，<strong>注意：小数时若模板小于数字则会四舍五入</strong></p><p><a href="https://imgtu.com/i/2V5aR0"><img src="https://z3.ax1x.com/2021/05/30/2V5aR0.png" alt="2V5aR0.png"></a></p><hr><p><strong>DecimalFormat类中特殊字符的说明</strong></p><table><thead><tr><th align="center">字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">代表阿拉伯数字，一个0表示一个阿拉伯数字，如果该位不存在数字，则显示0</td></tr><tr><td align="center">#</td><td align="center">代表阿拉伯数字，一个#表示一个阿拉伯数字，如果该位不存在数字，则不显示</td></tr><tr><td align="center">.</td><td align="center">小数分割符或货币小数分割符</td></tr></tbody></table><p>​    setGroupingSize(int newValue)方法设置格式化数字的分组大小,分组大小是数字整数部分中分组分隔符之间的位数，像分组为2的话，123456.789为12,34,56.789<br>​    setGroupingUsed(boolean newValue)方法设置是否在此格式中使用分组，newValue的值为如果使用分组，则为true；否则为假</p><h4 id="3-数学运算"><a href="#3-数学运算" class="headerlink" title="3. 数学运算"></a>3. 数学运算</h4><p>​    Java中提供了一个执行数学基本运算的Math类，在java.lang.Math，里面提供的大多数方法都被定义为static形式</p><pre class="line-numbers language-none"><code class="language-none">Math.数字方式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    Math类也提供一些常用数学常量</p><pre class="line-numbers language-none"><code class="language-none">Math.PI   &#x2F;&#x2F;Π<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>常用的数学运算方法分为四类，三角函数方法、指数函数方法、取整函数方法、取最大值最小值绝对值函数方法，具体的需要使用时，自行翻阅API文档</strong></p><h4 id="4-随机数"><a href="#4-随机数" class="headerlink" title="4. 随机数"></a>4. 随机数</h4><p>​    通过Math类中的random()方法产生伪随机数字，该方法返回一个double型的随机数，小数点后面可以保留15位小数，返回值是从该范围内以（近似）均匀分布伪随机选择的，范围在0&lt;=Math.random()&lt;1.0，通过对于该方法的处理可以产生任意范围内的随机数，这个方法是调用java.util.Random()</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;产生其他范围的伪随机数(int)(Math.random()*n) &#x2F;&#x2F;返回大于等于0且小于n的随机数m+(int)(Math.random()*n) &#x2F;&#x2F;返回大于等于m且小于m+n的随机数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    什么是伪随机数？</p><ul><li>伪随机数是看似随机实质是固定的周期性序列,也就是有规则的随机。</li><li>只要这个随机数是由确定算法生成的,那就是伪随机,只能通过不断算法优化,使你的随机数更接近随机。(随机这个属性和算法本身就是矛盾的)</li><li>通过真实随机事件取得的随机数才是真随机数</li></ul><p>​    Random类<br>​    Random类在java.util下，通过实例化Random对象可以创建一个随机数字生成器</p><pre class="line-numbers language-none"><code class="language-none">Random r &#x3D; new Random(); &#x2F;&#x2F;未在初始化器里设置种子<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    当用这个方式实例化对象时(未在初始化器里设置种子)，Java编译器将以系统当前时间作为随机数生成器的种子(每时每刻时间不同)，但如果运行速度太快，也会产生两次运行结果相同的随机数</p><p>​    也可以在实例化对象时，设置随机数生成器种子</p><pre class="line-numbers language-none"><code class="language-none">Random r &#x3D; new Random(long seed); &#x2F;&#x2F;设置种子,当种子一样时，产生的随机数是一样的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    Random类提供的常用方法(部分)</p><pre class="line-numbers language-none"><code class="language-none">public int nextInt():返回一个随机整数public int nextInt(int n):返回大于等于0且小于n的随机整数public boolean nextBoolean():返回一个随机布尔值public double nextDouble():返回一个随机双精度值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java05</title>
      <link href="/2021/05/25/Java05/"/>
      <url>/2021/05/25/Java05/</url>
      
        <content type="html"><![CDATA[<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h4 id="1-在Java中对象的属性也被称为成员变量，类对象的行为叫做成员方法"><a href="#1-在Java中对象的属性也被称为成员变量，类对象的行为叫做成员方法" class="headerlink" title="1. 在Java中对象的属性也被称为成员变量，类对象的行为叫做成员方法"></a>1. 在Java中对象的属性也被称为成员变量，类对象的行为叫做成员方法</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;成员方法的语法格式权限修饰符 返回值类型 方法名(参数类型 参数名)&#123;&#x2F;&#x2F;方法体return 返回值;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-权限修饰符"><a href="#2-权限修饰符" class="headerlink" title="2. 权限修饰符"></a>2. 权限修饰符</h4><p><strong>类权限(注意：类权限会约束类成员的权限设定，大于类的权限的类成员都会默认为类的权限进行约束)</strong></p><table><thead><tr><th align="center">访问包位置</th><th align="center">private</th><th align="center">protected</th><th align="center">public</th></tr></thead><tbody><tr><td align="center">本类</td><td align="center">可见</td><td align="center">可见</td><td align="center">可见</td></tr><tr><td align="center">同包其他类或者子类</td><td align="center">不可见</td><td align="center">可见</td><td align="center">可见</td></tr><tr><td align="center">其他包的类或子类</td><td align="center">不可见</td><td align="center">不可见</td><td align="center">可见</td></tr></tbody></table><p><strong>注意：声明类时不使用上述三个修饰符设置权限，则这个类预设为friendly，可以本类，同包其他类但不能子类，其他包即子类也不行</strong></p><h4 id="3-局部变量"><a href="#3-局部变量" class="headerlink" title="3. 局部变量"></a>3. 局部变量</h4><p>​    在成员方法内定义的变量叫做局部变量，方法是形参也是局部变量<br>​    <strong>局部变量在方法内使用时必须进行赋值和初始化不然会报错</strong></p><h4 id="4-局部变量的作用域-有效范围"><a href="#4-局部变量的作用域-有效范围" class="headerlink" title="4. 局部变量的作用域(有效范围)"></a>4. 局部变量的作用域(有效范围)</h4><p>​    在相互不嵌套使用的作用域中可以同时声明两个名称和类型相同的局部变量<br>​    一个花括号括起来的表示一个作用域</p><h4 id="5-this关键字"><a href="#5-this关键字" class="headerlink" title="5. this关键字"></a>5. this关键字</h4><p>​    在Java语言中规定使用this关键字来代表本类对象的引用，即引用对象的成员变量和方法<br>​    <strong>(1).在局部变量与类的成员变量重名时，就需要添加this关键字来明确引用的是类</strong></p><p>​    (2).this关键字还可以作为方法的返回值</p><pre class="line-numbers language-none"><code class="language-none">public Book getBook()&#123;return this;      &#x2F;&#x2F;返回Book类的对象等同于return Book&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    (3).this关键字还可以调用构造方法</p><pre class="line-numbers language-none"><code class="language-none">public class Student &#123; &#x2F;&#x2F;定义一个类，类的名字为student。  public Student() &#123; &#x2F;&#x2F;定义一个方法，名字与类相同故为构造方法this(“Hello!”);   &#x2F;&#x2F;this来引用下面的带形参的构造方法，因为this关键字里面带有一个参数&#125;public Student(String name) &#123;&#x2F;&#x2F;定义一个带形式参数的构造方法 &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：this()只能出现在构造方法非注释语句的第一行</strong></p><p>​    (4). this关键字不能使用在静态方法当中</p><h4 id="6-类的构造方法"><a href="#6-类的构造方法" class="headerlink" title="6. 类的构造方法"></a>6. 类的构造方法</h4><p>类中除了成员方法外，还存在着构造方法<br>​    ==构造方法是一个与类同名的方法==，对象的创建就是构造方法完成的，每当实例化对象(new 对象)时，类会自动调用构造方法<br>​    <strong>注意：构造方法没有返回值，但方法前不需要void关键字修饰，类中没有明确定义构造方法时编译器会自动创建一个不带参数的默认构造方法</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;构造方法的定义格式public book()&#123; &#x2F;&#x2F;里面可以放参数&#x2F;&#x2F;构造方法体; &#x2F;&#x2F;可以初始化成员变量&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-static关键字"><a href="#7-static关键字" class="headerlink" title="7. static关键字"></a>7. static关键字</h4><p>​    由static修饰的变量、常量和方法被称为静态变量、常量和方法，即静态成员，静态成员属于类所有，使用类名+’.’运算符调用静态成员<br>​    当需要两个或以上的类要在同一个内存区域共享一个数据，可以使用静态变量来存储该数据<br>​    实例化后的对象依然可以调用静态XX，但不建议使用这样的形式，这样容易混淆静态成员和非静态成员<br>​    <strong>注意：静态方法中不可以直接调用非静态方法</strong><br>​    Java中规定不能将方法体内的局部变量声明为static</p><p>​    <strong>类加载</strong><br>​    jvm在程序执行的时候，需要用到类中的信息，但jvm只能读取内存的数据，所以需要进一步操作，把类中的信息，从硬盘上.class文件读取出来放在合适的位置<br>​    当一个类首次被使用，对该类加载，加载的同时，执行类的初始化过程<strong>（注意初始化和实例化的区别）</strong><br>​    被<strong>static关键字修饰</strong>的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问</p><pre class="line-numbers language-none"><code class="language-none">class Test&#123;private Test(String s) &#123;System.out.println(s);&#125;&#x2F;&#x2F;通过static关键字在类加载时初始化aprivate static Test a &#x3D; new Test(&quot;这是一个static程序&quot;);public static Test instance() &#123;return a;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>类的初始化操作</strong><br>​    通过static定义静态区域(静态块)</p><pre class="line-numbers language-none"><code class="language-none">public class example&#123;static&#123;&#x2F;&#x2F;some;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    当这个类被引用时，首先自动执行static块中的程序，而且只会执行一次</p><h4 id="8-类的主方法"><a href="#8-类的主方法" class="headerlink" title="8. 类的主方法"></a>8. 类的主方法</h4><p>​    主方法是类的入口点，Java编译器通过主方法来执行程序<br>​    主方法语法</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String[] args)&#123;&#x2F;&#x2F;方法体;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    主方法的特性<br>​    (1).主方法是静态的,在主方法中要直接调用其他方法,该方法也必须是静态的<br>​    (2).主方法没有返回值<br>​    (3).主方法的形参为数组,args[0]~args[n],表示第一到第n个参数,参数个数用args.length来获取</p><h4 id="9-对象"><a href="#9-对象" class="headerlink" title="9. 对象"></a>9. 对象</h4><p>​    (1).对象的创建<br>​    对象是由类抽象出来的某一个特例,每一个对象是相互独立的<br>​    Java语言中使用new操作符调用构造方法来创建对象,对象被创建出来时就是对一个对象的引用</p><pre class="line-numbers language-none"><code class="language-none">Book a &#x3D; new Book(); &#x2F;&#x2F;对象的创建可以直接new Book()不需要前面的,但操作不了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    (2).访问对象的属性和方法<br>​    在使用new操作符创建了一个对象后,可以使用”对象.类成员”来获取对象的属性和方法</p><p>​    (3).对象的引用<br>​    基本语法</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;类名 对象引用名称Book book; &#x2F;&#x2F;引用不需要有一个对象相关联<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    <strong>注意:引用只是存放一个对象的内存地址,并非存放一个对象</strong></p><p>​    (4).对象的比较<br>​    Java语言有两种比较对象的方式,”==”运算符和equals()方法(String类中的方法)</p><ul><li><p>“==”运算符<br>​    比较的是两个对象的引用地址是否相等</p></li><li><p>equals()方法<br>​    比较两个对象引用所指向的内容是否相等</p></li></ul><p>​    (5).对象的销毁<br>​    在Java中处于两种情况下对象被Java虚拟机视为垃圾</p><ul><li>对象引用超过其作用范围(作用域)</li><li>将对象的赋值为null</li></ul><p>​    <strong>注意:Java的垃圾回收器只能销毁new操作符创建的对象</strong><br>​    为了回收不通过new操作符来在内存中获取存储空间的对象,Java还提供object类中的finalize()方法被声明为protected,用户可以自己的类中定义这个方法来回收垃圾(不保证一定发生,当Java虚拟机内存耗尽时,则不会执行垃圾回收处理)<br>​    Java还提供了System.gc()方法强制启动垃圾回收器</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java04</title>
      <link href="/2021/05/23/Java04/"/>
      <url>/2021/05/23/Java04/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="1-数组的声明-两种方式"><a href="#1-数组的声明-两种方式" class="headerlink" title="1. 数组的声明(两种方式)"></a>1. 数组的声明(两种方式)</h4><p>​    注意：数组在声明时并没有分配内存空间<br>​    注意：数组声明数组名后的[]里什么都不能写</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;符号[]表面变量为一个数组变量，单个[]表示要创建的数组为一维数组数组元素类型 数组名字[]数组元素类型[] 数组名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-数组内存空间的分配"><a href="#2-数组内存空间的分配" class="headerlink" title="2. 数组内存空间的分配"></a>2. 数组内存空间的分配</h4><pre class="line-numbers language-none"><code class="language-none">数组名字 &#x3D; new 数组元素的类型[数组元素的个数]  &#x2F;&#x2F;创建数组后未进行赋值则数组元素都为该类型的初始值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-一维数组声明并分配内存空间"><a href="#3-一维数组声明并分配内存空间" class="headerlink" title="3. 一维数组声明并分配内存空间"></a>3. 一维数组声明并分配内存空间</h4><pre class="line-numbers language-none"><code class="language-none">int a[] &#x3D; new int[10];  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-注意：数组一旦进行初始化不可以对数组手动分配内存空间"><a href="#4-注意：数组一旦进行初始化不可以对数组手动分配内存空间" class="headerlink" title="4. 注意：数组一旦进行初始化不可以对数组手动分配内存空间"></a><strong>4. 注意：数组一旦进行初始化不可以对数组手动分配内存空间</strong></h4><h4 id="5-一维数组的初始化"><a href="#5-一维数组的初始化" class="headerlink" title="5. 一维数组的初始化"></a>5. 一维数组的初始化</h4><pre class="line-numbers language-none"><code class="language-none">int a[] &#x3D; new int[]&#123;1,2,3,4&#125;;  &#x2F;&#x2F;第一种初始化方式，注意括号内不能写数字int a[] &#x3D; &#123;1,2,3,4&#125;;           &#x2F;&#x2F;第二种初始化方式int a[];                       &#x2F;&#x2F;第三种初始化方式a &#x3D; new int[]&#123;1,2,3,4&#125;;        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-二维-高维-数组声明后的内存空间分配-2种"><a href="#6-二维-高维-数组声明后的内存空间分配-2种" class="headerlink" title="6. 二维(高维)数组声明后的内存空间分配(2种)"></a>6. 二维(高维)数组声明后的内存空间分配(2种)</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;(1)为每一维分配内存空间a &#x3D; new int[2][4];&#x2F;&#x2F;(2)分别为每一维分配内存空间a &#x3D; new int[2][];a[0] &#x3D; new int[2];a[1] &#x3D; new int[3];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-二维数组的初始化-与一维类似"><a href="#7-二维数组的初始化-与一维类似" class="headerlink" title="7. 二维数组的初始化(与一维类似)"></a>7. 二维数组的初始化(与一维类似)</h4><pre class="line-numbers language-none"><code class="language-none">数组数据类型 数组名[][] &#x3D; &#123;&#123;值1,值2&#125;,&#123;..&#125;,&#123;..&#125;&#125;; &#x2F;&#x2F;注意：每一个大的项要用花括号&#123;&#125;起来,不需要每一项元素个数相等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-数组的基本操作"><a href="#8-数组的基本操作" class="headerlink" title="8. 数组的基本操作"></a>8. 数组的基本操作</h4><p>​    (1).遍历数组<br>​    通过数组的length属性来获得数组的长度<br>​    **注意：数组的元素只取到length-1</p><p>​    (2).剩下的都是一些对数组的函数可以自己用算法来完成，到时要用再看看就行，我觉得可能是方法重写的时候用的上</p><h4 id="9-数组排序算法"><a href="#9-数组排序算法" class="headerlink" title="9. 数组排序算法"></a>9. 数组排序算法</h4><p>​    (1).冒泡排序法<br>​    <strong>主要思想：把相邻两个元素进行比较，不满足则交换，每次循环将最大或是最小的元素排在最后，下一次循环进行类似操作</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;外层循环控制排序轮数，一般比数组长度减一因为最后一次只剩一个数组元素了for(int i &#x3D; 1;i &lt; arr.length;i++) &#123;&#x2F;&#x2F;内层循环用于对比临近元素的大小，对比交换次数随着排序轮数减少for(int j &#x3D; 0;j &lt; arr.length-i;j++) &#123;if(arr[j]&gt;arr[j+1]) &#123;int tmp &#x3D; arr[j];arr[j] &#x3D; arr[j+1];arr[j+1] &#x3D; tmp;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    (2).直接选择排序法(选择排序的一种)<br>​    <strong>主要思想：将指定排序位置与其他数组元素分别对比，如果满足条件就交换元素的值</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;index是用来寻找当前数组中最大或最小的值的索引位置int index &#x3D; 0;&#x2F;&#x2F;外层循环控制排序轮数，一般比数组长度减一因为最后一次只剩一个数组元素了for(int i &#x3D; 1;i&lt;arr.length;i++) &#123;&#x2F;&#x2F;index在每次循环时都应该清零index &#x3D; 0;&#x2F;&#x2F;内循环用来获取当前数组中最大的值，在下一次循环时不计入该数值for(int j &#x3D; 1;j&lt;&#x3D;arr.length - i;j++) &#123;if(arr[j]&gt;arr[index]) &#123;index&#x3D;j;&#125;&#125;&#x2F;&#x2F;将数组最左或者最右的值与数组最大值交换int tmp &#x3D; arr[arr.length - i];arr[arr.length - i] &#x3D; arr[index];arr[index] &#x3D; tmp;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java03</title>
      <link href="/2021/05/17/Java03/"/>
      <url>/2021/05/17/Java03/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h4 id="1-前面的char类型只可以表示单个字符"><a href="#1-前面的char类型只可以表示单个字符" class="headerlink" title="1. 前面的char类型只可以表示单个字符"></a>1. 前面的char类型只可以表示单个字符</h4><h4 id="2-java语言将字符串作为对象来处理，可以通过java-lang包中的String类来创建字符串对象"><a href="#2-java语言将字符串作为对象来处理，可以通过java-lang包中的String类来创建字符串对象" class="headerlink" title="2. java语言将字符串作为对象来处理，可以通过java.lang包中的String类来创建字符串对象"></a><strong>2. java语言将字符串作为对象来处理，可以通过java.lang包中的String类来创建字符串对象</strong></h4><h4 id="3-java中由双引号-“”-包围的都是字符串，不能作为其他数据类型来使用"><a href="#3-java中由双引号-“”-包围的都是字符串，不能作为其他数据类型来使用" class="headerlink" title="3. java中由双引号(“”)包围的都是字符串，不能作为其他数据类型来使用"></a>3. java中由双引号(“”)包围的都是字符串，不能作为其他数据类型来使用</h4><h4 id="4-声明字符串"><a href="#4-声明字符串" class="headerlink" title="4. 声明字符串"></a>4. 声明字符串</h4><pre class="line-numbers language-none"><code class="language-none">String s;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：声明的字符串变量必须经过初始化才可以使用，否则编译器报错</strong></p><h4 id="5-创建字符串对象"><a href="#5-创建字符串对象" class="headerlink" title="5. 创建字符串对象"></a><strong>5. 创建字符串对象</strong></h4><p>由于java是按照对象来处理字符串，所以创建方式和对象一样</p><p>==String类常用的构造方法==<br>​    (1).String(char a[])<br>​    用一个字符数组a创建String对象</p><pre class="line-numbers language-none"><code class="language-none">char a[] &#x3D; &#123;&#39;g&#39;,&#39;o&#39;,&#39;o&#39;,&#39;d&#39;&#125;; 等价于    String s &#x3D; new String(a);  &#x3D;&#x3D;&#x3D;&#x3D;&gt;   String s &#x3D; new String(&quot;good&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    (2).String(char a[],int offset,int length)  <strong>//从第offse个元素向后取length个元素</strong></p><p>​    提取字符数组a中的一部分创建一个字符串对象</p><pre class="line-numbers language-none"><code class="language-none">char a[] &#x3D; &#123;&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;d&#39;,&#39;e&#39;,&#39;n&#39;,&#39;t&#39;&#125;; 等价String s&#x3D;new String(a,2,4)               &#x3D;&#x3D;&#x3D;&gt;String s&#x3D;new String(&quot;uden&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    (3).引用字符串常量来创建字符串变量</p><pre class="line-numbers language-none"><code class="language-none">String str1,str2;str1 &#x3D; &quot;We are students&quot;;str2 &#x3D; &quot;We are students&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：str1和str2引用相同的字符串常量，所以指向同一个实体所在的内存</strong></p><h4 id="6-连接字符串"><a href="#6-连接字符串" class="headerlink" title="6. 连接字符串"></a>6. 连接字符串</h4><p>使用”+”运算符可以实现连接多个字符串，”+”连接多个字符串后产生一个String对象<br><strong>注意：字符串也可以与其他基本数据类型连接，连接后这些数据将转化为字符串，当基本数据类型与字符串连接时会自动调用toString()方法将其转为字符串形式</strong></p><h4 id="7-获取字符串的长度"><a href="#7-获取字符串的长度" class="headerlink" title="7. 获取字符串的长度"></a>7. 获取字符串的长度</h4><p>​    使用String类型下的length()方法可以获取声明的字符串对象的长度</p><pre class="line-numbers language-none"><code class="language-none">str.length()      &#x2F;&#x2F;str为字符串对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    字符串的下标是0~length()-1</p><h4 id="8-字符串查找的方法"><a href="#8-字符串查找的方法" class="headerlink" title="8. 字符串查找的方法"></a>8. 字符串查找的方法</h4><p>(1).indexOf(String s)<br>返回值为int型，在里面填想要查找的字符串，返回整个字符串中第一次出现的这个字符串的第一个元素的数组下标对应的位置(索引位置)，如果没有检索到字符串s，则返回-1</p><pre class="line-numbers language-none"><code class="language-none">s.indexOf(the_str1)  &#x2F;&#x2F;字符用单(双)引号，字符串用双引号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    (2).lastIndexOf(String str)<br>​    返回值为int型，在里面填想要查找的字符串，返回整个字符串中最后一次出现的这个字符串的第一个元素的数组下标对应的位置(索引位置)，如果没有检索到字符串s，则返回-1</p><pre class="line-numbers language-none"><code class="language-none">str.lastIndexOf(the_str1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>注意：如果lastIndexOf方法中的参数是空字符串””，则返回结果和调用该字符串的length()方法返回结果相同，indexOf方法中的参数是空字符串””，则返回结果为0</strong></p><h4 id="9-获取指定索引位置的字符"><a href="#9-获取指定索引位置的字符" class="headerlink" title="9. 获取指定索引位置的字符"></a>9. 获取指定索引位置的字符</h4><p>​    使用charAt()方法，可以将指定索引处的字符返回</p><pre class="line-numbers language-none"><code class="language-none">str.charAt(int index)  &#x2F;&#x2F;返回值为char<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    注意：若索引值超出本身字符串的长度则报错</p><h4 id="10-字符串操作"><a href="#10-字符串操作" class="headerlink" title="10. 字符串操作"></a>10. 字符串操作</h4><p>​    (1).获取子字符串<br>​    通过String类下的substring()方法（两种方法重载），返回值String类型</p><ul><li>substring(int beginIndex)<br>​    从指定的索引位置开始截取直到该字符串结尾的子串，beginIndex指指定的索引位置<br>​    </li><li>substring(int beginIndex , int endIndex)<br>​      从字符串某一索引位置开始截取至某一索引位置结束的子串<br>​      <strong>注意：取得到第beginIndex这里的字符，取不到第endIndex这里的字符，即在这里结束</strong><pre class="line-numbers language-none"><code class="language-none">String s &#x3D; &quot;hello&quot;;String s1 &#x3D; s.substring(3);System.out.print(s1);&#x2F;&#x2F;输出：lo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​    (2).去除空格<br>​    通过trim()方法返回字符串的副本,作用是忽略前导空格和尾部空格,注意:字符串中间的空格不忽略,返回值为String</p><pre class="line-numbers language-none"><code class="language-none">str.trim()  &#x2F;&#x2F;str为字符串对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​<br>​    (3).字符串替换<br>​    通过replace()方法来实现将指定的字符或者字符串替换成新的字符或字符串,返回值为String</p><pre class="line-numbers language-none"><code class="language-none">str.replace(char oldChar , char newChar)&#x2F;*oldChar:要替换的字符或字符串newChar:用于替换原来字符串的内容*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意:<br>​    [1].如果字符串oldChar没有出现在原字符串中,则将原字符串返回<br>​    [2].如果要替换的oldChar在原字符串中出现多次,则会被全部替换成newChar<br>​    [3].切记大小写是区分的</strong></p><p>​    (4).判断字符串以什么开头与结尾<br>​    [1].startsWith()方法<br>​    该方法用于判断当前字符串是否以指定的前缀开头，返回值为Boolean类型</p><pre class="line-numbers language-none"><code class="language-none">str.startsWith(String prefix)  &#x2F;&#x2F;prefix指作为前缀的字符或字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    [2].endsWith()方法<br>​    该方法用于判断当前字符串是否以指定的后缀结束，返回值为Boolean类型</p><pre class="line-numbers language-none"><code class="language-none">str.endsWith(String suffix)  &#x2F;&#x2F;suffix指作为后缀的字符或字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    (5).判断字符串是否相等<br>​    对于字符串的比较不可以使用’==’来进行判断，因为比较运算符是比较两个字符串的地址，即使字符串内容相同但地址也是不同的<br>​    通过equals()方法或者equalsIgnoreCase()方法<br>​    [1].equals()方法<br>​    如果两个字符串具有相同的字符和长度，返回值为ture，即返回值为Boolean类型<br>​    <strong>注意：equals()方法严格区分大小写</strong></p><pre class="line-numbers language-none"><code class="language-none">str.equals(String otherstr)  &#x2F;&#x2F;str和otherstr相比较<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    [2].equalsIgnoreCase()方法<br>​    在忽略字符串大小写的情况下比较字符串是否相等，返回值为Boolean类型</p><pre class="line-numbers language-none"><code class="language-none">str.equalsIgnoreCase(String otherstr)  &#x2F;&#x2F;str和otherstr相比较<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    (6).字符串分割<br>​    使用split()方法对给定原字符串指定的分割字符或分割字符串进行分割，将分割后的结果放在字符串数组中，返回值为字符串数组<br>​    [1].split(String sign)<br>​    对给定分隔符对字符串拆分</p><pre class="line-numbers language-none"><code class="language-none">str.split(String sign)  &#x2F;&#x2F;sign为分割符为String类型，即注意必须用&quot;&quot;,不能使用&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    [2].split(String sign,int limit)<br>​    对给定分隔符对字符串拆分，并限制拆分次数</p><pre class="line-numbers language-none"><code class="language-none">str.split(String sign,int limit)  &#x2F;&#x2F;sign为分割符为String类型，即注意必须用&quot;&quot;,不能使用&#39;&#39;,limit为分割次数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>注意：如果想定义多个分割符，可以使用’|’来隔开</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;如：str.split(&quot;+|&#x3D;&quot;)  &#x2F;&#x2F;以+和&#x3D;进行分割<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    (7).字符串开始前缀检测</p><p>​    使用startsWith()方法检测字符串是否以指定的前缀开始</p><pre class="line-numbers language-none"><code class="language-none">str.startsWith(String prefix)  &#x2F;&#x2F;返回值为布尔类型，输入前缀为String类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-格式化字符串"><a href="#11-格式化字符串" class="headerlink" title="11. 格式化字符串"></a>11. 格式化字符串</h4><pre><code>  String类的静态format()方法用于创建格式化字符串，返回值为String类型</code></pre><pre class="line-numbers language-none"><code class="language-none">String s &#x3D; String.format(&quot;转换符&quot;,变量); &#x2F;&#x2F;对变量进行格式化，变量参数只要是类类型就可以<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    与C语言中printf的转化类似</p><h4 id="12-了解"><a href="#12-了解" class="headerlink" title="12. 了解"></a>12. 了解</h4><p>​    (1).Date类来实现获取日期并通过格式化字符串来显示想要的数据<br>​    (2).正则表达式是用来检查某一字符串是否满足某一格式<br>​    (3).字符串生成器StringBuilder类，用来实现对字符串操作提高效率</p><h4 id="13-StringBuilder类与String类型的转换"><a href="#13-StringBuilder类与String类型的转换" class="headerlink" title="13. StringBuilder类与String类型的转换"></a>13. StringBuilder类与String类型的转换</h4><ul><li><p>将String类转为StringBuilder类(转为StringBuffer类同理)</p><pre class="line-numbers language-none"><code class="language-none">String s &#x3D; “xxxx”;StringBuilder sb &#x3D; new StringBuilder(s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将StringBuilder类转为String类(StringBuffer类转String同理)</p><pre class="line-numbers language-none"><code class="language-none">StringBuilder s1 &#x3D; new StringBuilder(); &#x2F;&#x2F;初始化器里可以赋值String s &#x3D; s1.toString();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java02</title>
      <link href="/2021/05/04/Java02/"/>
      <url>/2021/05/04/Java02/</url>
      
        <content type="html"><![CDATA[<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h4 id="1-if条件语句"><a href="#1-if条件语句" class="headerlink" title="1. if条件语句"></a>1. if条件语句</h4><pre class="line-numbers language-none"><code class="language-none">if()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   if后面”()”内的值必须是boolean型的,若语句中仅有一条语句，则可以省略条件语句中的”{}”，书上说为增强程序可读性最好不要省略<br>   <strong>注意：if语句是从上到下执行，上面有满足条件就算下面满足条件也不执行</strong></p><h4 id="2-if-else与三元运算符的转化"><a href="#2-if-else与三元运算符的转化" class="headerlink" title="2. if~else与三元运算符的转化"></a>2. if~else与三元运算符的转化</h4><p>例：求绝对值</p><pre class="line-numbers language-none"><code class="language-none">if(a&gt;0)b &#x3D; a;elseb &#x3D; -a;可以转化为b &#x3D; a &gt; 0?a:-a; &#x2F;&#x2F;问号前面的表达式为真则返回问号与冒号之间的表达式，否则把冒号后面的表达式给b，注意：三元运算符是有一个返回值的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-switch多分支语句"><a href="#3-switch多分支语句" class="headerlink" title="3. switch多分支语句"></a>3. switch多分支语句</h4><pre class="line-numbers language-none"><code class="language-none">switch(表达式) &#x2F;*在JDK1.6以前常量值必须是整型或字符型，在JDK1.7中，常量值除了整型或字符型还可以是字符串类型，注意常量值绝对不能是实数，如1.1就不行*&#x2F;&#123;注意：同一个switch语句，case的常量值必须不互相同case 常量值1:语句块1;break;...case 常量值n:语句块n;break;default:语句块n+1; &#x2F;&#x2F;default不需要break&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-while循环语句-先判断再执行"><a href="#4-while循环语句-先判断再执行" class="headerlink" title="4. while循环语句(先判断再执行)"></a>4. while循环语句(先判断再执行)</h4><pre class="line-numbers language-none"><code class="language-none">while(条件表达式)&#123;  &#x2F;&#x2F;条件表达式返回值为真继续循环，为假退出循环执行语句&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-do…while循环语句-先执行再判断"><a href="#5-do…while循环语句-先执行再判断" class="headerlink" title="5. do…while循环语句(先执行再判断)"></a>5. do…while循环语句(先执行再判断)</h4><pre class="line-numbers language-none"><code class="language-none">do&#123;执行语句&#125;while(条件表达式);  &#x2F;&#x2F;注意这里是比while循环多一个分号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-for循环语句"><a href="#6-for循环语句" class="headerlink" title="6. for循环语句"></a>6. for循环语句</h4><p>与c一样<br><strong>注意：for循环里第一个表达式里是填初始化表达式，可以为空，但不可以直接填一个变量(不管什么类型)，哪怕这个变量前面已经定义赋值</strong></p><pre class="line-numbers language-none"><code class="language-none">for(i;i&lt;12;i++) &#x2F;&#x2F;错误的，i因改为i&#x3D;0，若i是已经定义赋值的这个第一个表达式也可以直接为空不写东西<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-foreach语句"><a href="#7-foreach语句" class="headerlink" title="7. foreach语句"></a>7. foreach语句</h4><p>foreach是for语句的特殊简化版本，不能完全取代for语句，任何foreach语句都可以改写为for语句版本，foreach语句一般用于遍历数组等方面,在这种方面给与程序员很大的方便</p><pre class="line-numbers language-none"><code class="language-none">for(元素变量x:遍历对象obj)&#123;引用了x的java语句;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例：输出一维数组中全部元素</p><pre class="line-numbers language-none"><code class="language-none">public static void main(String args[]) &#123;int[] arr &#x3D; &#123;3,5,7,4&#125;;for(int x:arr) &#123;System.out.println(x);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-循环控制"><a href="#8-循环控制" class="headerlink" title="8. 循环控制"></a>8. 循环控制</h4><p>(1).break<br>中断循环<br><strong>注意：break只能跳出一层循环，如果想直接跳到外层的循环，可以使用“标签”(java提供的功能)</strong></p><pre class="line-numbers language-none"><code class="language-none">标签名:循环体&#123;break 标签名;  &#x2F;&#x2F;直接跳出有标签名的循环&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2).continue<br>跳过本次循环执行下一次循环<br>**注意：continue也支持标签功能</p><pre class="line-numbers language-none"><code class="language-none">标签名:循环体&#123;continue 标签名;  &#x2F;&#x2F;直接跳出有标签名的循环&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java01</title>
      <link href="/2021/05/02/Java01/"/>
      <url>/2021/05/02/Java01/</url>
      
        <content type="html"><![CDATA[<h2 id="Java语言基础"><a href="#Java语言基础" class="headerlink" title="Java语言基础"></a>Java语言基础</h2><h4 id="1-java中文件名和类名必须同名，注意：java是严格区分大小写"><a href="#1-java中文件名和类名必须同名，注意：java是严格区分大小写" class="headerlink" title="1. java中文件名和类名必须同名，注意：java是严格区分大小写"></a>1. java中文件名和类名必须同名，注意：java是严格区分大小写</h4><h4 id="2-类属性称为类的全局变量，方法中的属性称为局部变量"><a href="#2-类属性称为类的全局变量，方法中的属性称为局部变量" class="headerlink" title="2. 类属性称为类的全局变量，方法中的属性称为局部变量"></a>2. 类属性称为类的全局变量，方法中的属性称为局部变量</h4><h4 id="3-Java中通过import关键字导入相关的类"><a href="#3-Java中通过import关键字导入相关的类" class="headerlink" title="3. Java中通过import关键字导入相关的类"></a>3. Java中通过import关键字导入相关的类</h4><h4 id="4-long型的值，若赋给的值大于int型的最大值或者小于int型的最小值，则需要在数字后面加L或l表示该数值为长整数"><a href="#4-long型的值，若赋给的值大于int型的最大值或者小于int型的最小值，则需要在数字后面加L或l表示该数值为长整数" class="headerlink" title="4. long型的值，若赋给的值大于int型的最大值或者小于int型的最小值，则需要在数字后面加L或l表示该数值为长整数"></a>4. long型的值，若赋给的值大于int型的最大值或者小于int型的最小值，则需要在数字后面加L或l表示该数值为长整数</h4><h4 id="5-默认情况下小数被看作double型，若使用float型需要在小数后面加F或f，声明为float型变量时若不加f默认为double型"><a href="#5-默认情况下小数被看作double型，若使用float型需要在小数后面加F或f，声明为float型变量时若不加f默认为double型" class="headerlink" title="5. 默认情况下小数被看作double型，若使用float型需要在小数后面加F或f，声明为float型变量时若不加f默认为double型"></a>5. 默认情况下小数被看作double型，若使用float型需要在小数后面加F或f，声明为float型变量时若不加f默认为double型</h4><h4 id="6-char（字符类型）：用于存储单个字符，占两个字节的存储空间"><a href="#6-char（字符类型）：用于存储单个字符，占两个字节的存储空间" class="headerlink" title="6. char（字符类型）：用于存储单个字符，占两个字节的存储空间"></a>6. char（字符类型）：用于存储单个字符，占两个字节的存储空间</h4><h4 id="7-常量声明：用final关键字"><a href="#7-常量声明：用final关键字" class="headerlink" title="7. 常量声明：用final关键字"></a>7. 常量声明：用final关键字</h4><p>​    语法：final 数据类型 常量名称[=值]<br>​    常量名通常使用大写字母<br>​    final变量属于“成员变量”时，必须在定义时就设定它的初值<br>​    常量一经赋值不给改变</p><h4 id="8-成员变量与局部变量-根据变量的有效范围划定"><a href="#8-成员变量与局部变量-根据变量的有效范围划定" class="headerlink" title="8. 成员变量与局部变量(根据变量的有效范围划定)"></a>8. 成员变量与局部变量(根据变量的有效范围划定)</h4><p>​    (1).成员变量<br>​    在类体中定义的变量，成员变量又可以分为静态变量和实例变量<br>​    静态变量是在类型前面加关键字static，<strong>静态变量的有效范围可以跨类，达到整个应用程序内，通过类名.静态变量的方式在其他类中使用</strong><br>​    实例变量是实例化后可以使用<br>​<br>​    (2).局部变量<br>​    在类的方法体中定义的变量，局部变量只在当前代码块中有效<br>​    当方法被调用时，Java虚拟机为方法中的局部变量分配内存空间<br>​    局部变量可以与成员变量的名字相同，此时成员变量将被隐藏</p><h4 id="9-进行除法运算时，0不能做除数，系统会抛出ArithmeticException异常"><a href="#9-进行除法运算时，0不能做除数，系统会抛出ArithmeticException异常" class="headerlink" title="9. 进行除法运算时，0不能做除数，系统会抛出ArithmeticException异常"></a>9. 进行除法运算时，0不能做除数，系统会抛出ArithmeticException异常</h4><h4 id="10-逻辑运算符的操作元必须是Boolean型的变量"><a href="#10-逻辑运算符的操作元必须是Boolean型的变量" class="headerlink" title="10. 逻辑运算符的操作元必须是Boolean型的变量"></a>10. 逻辑运算符的操作元必须是Boolean型的变量</h4><h4 id="11-位运算符"><a href="#11-位运算符" class="headerlink" title="11. 位运算符"></a>11. 位运算符</h4><p>​    位运算符除”按位与’’和”按位或”运算符外，其他只能用于处理整数的操作符<br>​    (1).“按位与”运算(&amp;):双目<br>​    运算法则：如果两个整型数据a,b的对应位都是1，则结果为1，否则为0；如果两个操作数精度不同，则结果的精度与精度高的操作数相同<br>​    (2).”按位或”运算(|):双目<br>​    运算法则：如果两个操作数的对应位都是0，则结果为0，否则为1；如果两个操作数精度不同，则结果的精度与精度高的操作数相同<br>​    (3).”按位取反”运算(~):单目<br>​    运算法则：将操作数二进制中的1改为0，0改为1<br>​    (4).”按位异或”运算(^):双目<br>​    运算法则：当两个操作数的二进制表示对应位相同时，结果为0，反之结果为1；如果两个操作数精度不同，则结果的精度与精度高的操作数相同<br>​    (5).位移操作</p><pre class="line-numbers language-none"><code class="language-none">&lt;&lt;:左移 &#x2F;&#x2F;将运算符左边的二进制数据，按照运算符右边操作数指定的位数向左移动移空的部分补0&gt;&gt;:右移 &#x2F;&#x2F;将运算符左边的二进制数据，按照运算符右边操作数指定的位数向右移动，如果最高位是0，右移空的位就填入0；如果最高位是1，右移空的位就填入1；右移时右边最低位被抛弃&gt;&gt;&gt;:无符号右移 &#x2F;&#x2F;无论最高位是0还是1，左侧被移动的高位都填入0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：位移可以实现整数乘以或者除以2^n^的效果；如y&lt;&lt;2与y*4结果相同；y&gt;&gt;1的结果与y/2效果相同，即一个数左移n位，则将数乘以2^n^，一个数右移n位，就是将数除以2^n^</strong></p><p>​    <strong>(6).按位操作符在程序设计中具有以下几种用法</strong><br>​    <strong>按位与</strong>运算有两种典型用法，一是取一个位串信息的某几位，如以下代码截取x的最低7位：x &amp; 0177。二是让某变量保留某几位，其余位置0，如以下代码让x只保留最低6位：x = x &amp; 077。以上用法都先要设计好一个常数，该常数只有需要的位是1，不需要的位是0。用它与指定的位串信息按位与。<br>​    <strong>按位或</strong>运算的典型用法是将一个位串信息的某几位置成1。如将要获得最右4为1，其他位与变量j的其他位相同，可用逻辑或运算017|j。若要把这结果赋给变量j，可写成：<br>  j = 017|j<br>​    <strong>异或运算符</strong>可以交换连个变量，如</p><pre class="line-numbers language-none"><code class="language-none">想将ａ和ｂ的值互换，可以用以下赋值语句实现：    ａ＝a∧b;    ｂ＝b∧a;    ａ＝a∧b;ａ＝011(2)    （∧）ｂ＝100(2)ａ＝111(2)（a∧b的结果，a已变成７）    （∧）ｂ＝100(2)ｂ＝011(2)（b∧a的结果，b已变成３）    （∧）ａ＝111(2)ａ＝100（2）（a∧b的结果，a已变成４）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-在编写程序时尽量使用括号运算符来限定次序"><a href="#12-在编写程序时尽量使用括号运算符来限定次序" class="headerlink" title="12. 在编写程序时尽量使用括号运算符来限定次序"></a>12. 在编写程序时尽量使用括号运算符来限定次序</h4><h4 id="13-数据类型转换"><a href="#13-数据类型转换" class="headerlink" title="13. 数据类型转换"></a>13. 数据类型转换</h4><p>​    (1)隐式类型转换<br>​    低级类型向高级类型的转换，系统自动执行，无须程序员操作<br>​    基本数据类型按精度从低到高的排序<br>​    byte&lt;short&lt;int&lt;long&lt;float&lt;double<br>​    如：</p><pre class="line-numbers language-none"><code class="language-none">short a &#x3D; 5;int b &#x3D; a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    (2)显式类型转换<br>​    高精度的变量的值赋给低精度的变量时，必须使用显式类型的转换运算(又称强制类型转换)<br>​    语法：(类型名)要转换的值<br>​    如：</p><pre class="line-numbers language-none"><code class="language-none">int a &#x3D; 5;short b &#x3D; (short)a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    <strong>注意：强制类型转换可能会导致精度丢失，除boolean类型以外的其他基本类型，都能以显式类型的方法实现转换</strong></p><h4 id="14-代码注释与编码规范"><a href="#14-代码注释与编码规范" class="headerlink" title="14. 代码注释与编码规范"></a>14. 代码注释与编码规范</h4><pre class="line-numbers language-none"><code class="language-none">(1).单行注释：&#x2F;&#x2F;(2).多行注释：&#x2F;*   *&#x2F;(3).文档注释：&#x2F;**  *&#x2F; 与多行注释格式相同，用在声明之前时会被Javadoc文档工具读取作为文档内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    <strong>注意：可读性第一，效率第二，注释要占程序代码总量的20%~50%</strong></p><h4 id="15-注意：Java语言的基本数据类型中并没有String类型"><a href="#15-注意：Java语言的基本数据类型中并没有String类型" class="headerlink" title="15. 注意：Java语言的基本数据类型中并没有String类型"></a><strong>15. 注意：Java语言的基本数据类型中并没有String类型</strong></h4><h4 id="16-main方法"><a href="#16-main方法" class="headerlink" title="16. main方法"></a>16. main方法</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;程序入口的main方法(必须有这个程序才能运行)public static void main(String[] args) &#123;&#x2F;&#x2F;方法体&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    当运行程序的时候，通常都是以程序入口的main方法作为起点，以main方法中的第一条语句作为程序的第一条语句。由于main方法是一个静态的方法，所以该方法放在任何一个类中都是可以执行的<br>​    写好一个类后，可以直接在该类中添加一个main方法，对该类的功能进行测试(Java允许多个main方法在不同的类中，程序启动时，需要指定哪一个main作为入口，一般光标在哪哪就是)<br>​    main方法是可以重载的，每个main方法的参数都是不同的，程序是可以运行的，可以输出应有的结果。但是，如果没有程序入口的main方法，只含有其他main方法。虽然编译此程序是可以的通过的，但是运行时会产生错误。这是因为程序运行时，Java虚拟机找不到对应的main方法，就会产生运行错误，其他main方法需要在入口main方法中进行调用才会运行<br>​    main方法也是可以被继承的，可以被重写</p><h4 id="17-一个文件只能一个public-类，而且类名必须和文件名一样"><a href="#17-一个文件只能一个public-类，而且类名必须和文件名一样" class="headerlink" title="17. 一个文件只能一个public 类，而且类名必须和文件名一样"></a>17. 一个文件只能一个public 类，而且类名必须和文件名一样</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序-商品页面</title>
      <link href="/2021/04/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%95%86%E5%93%81%E9%A1%B5%E9%9D%A2/"/>
      <url>/2021/04/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%95%86%E5%93%81%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><pre class="line-numbers language-none"><code class="language-none">&lt;swiper class&#x3D;&quot;myswiper&quot; bindchange&#x3D;&quot;changeImg&quot; indicator-dots&#x3D;&quot;ture&quot; autoplay&#x3D;&quot;ture&quot; circular&#x3D;&quot;ture&quot;&gt;  &lt;swiper-item&gt;    &lt;image class&#x3D;&quot;picture&quot; mode&#x3D;&quot;widthFix&quot; src&#x3D;&quot;https:&#x2F;&#x2F;6e61-navicat-3g86zpey3c832d18-1304777099.tcb.qcloud.la&#x2F;租借图片&#x2F;毕业季.jpg&quot;&gt;&lt;&#x2F;image&gt;  &lt;&#x2F;swiper-item&gt;  &lt;swiper-item&gt;    &lt;image class&#x3D;&quot;picture&quot; mode&#x3D;&quot;widthFix&quot; src&#x3D;&quot;https:&#x2F;&#x2F;6e61-navicat-3g86zpey3c832d18-1304777099.tcb.qcloud.la&#x2F;%E5%95%86%E5%93%81%E5%9B%BE%E7%89%87&#x2F;%E7%94%B5%E8%84%91&#x2F;apple.jpg&quot;&gt;&lt;&#x2F;image&gt;  &lt;&#x2F;swiper-item&gt;  &lt;swiper-item&gt;    &lt;image class&#x3D;&quot;picture&quot; mode&#x3D;&quot;widthFix&quot; src&#x3D;&quot;https:&#x2F;&#x2F;6e61-navicat-3g86zpey3c832d18-1304777099.tcb.qcloud.la&#x2F;%E5%95%86%E5%93%81%E5%9B%BE%E7%89%87&#x2F;%E7%94%B5%E8%84%91&#x2F;hw1.jpg?sign&#x3D;fee0f936bbe930fb6d94b51747d7a213&amp;t&#x3D;1618020235&quot;&gt;&lt;&#x2F;image&gt;  &lt;&#x2F;swiper-item&gt;&lt;&#x2F;swiper&gt;&lt;view class&#x3D;&quot;parent&quot;&gt;  &lt;view class&#x3D;&quot;color1&quot;&gt;    &lt;view class&#x3D;&quot;text1&quot;&gt;      &lt;view class&#x3D;&quot;money&quot;&gt;￥&#123;&#123;price&#125;&#125;&lt;&#x2F;view&gt;    &lt;&#x2F;view&gt;    &lt;view class&#x3D;&quot;text2&quot;&gt;      &lt;view class&#x3D;&quot;people&quot;&gt;0人买过&lt;&#x2F;view&gt;    &lt;&#x2F;view&gt;  &lt;&#x2F;view&gt;  &lt;view class&#x3D;&quot;color2&quot;&gt;    &lt;view class&#x3D;&quot;text3&quot;&gt;      &lt;view class&#x3D;&quot;apple&quot;&gt;&#123;&#123;shopname&#125;&#125;&lt;&#x2F;view&gt;    &lt;&#x2F;view&gt;    &lt;view class&#x3D;&quot;text4&quot;&gt;      &lt;view class&#x3D;&quot;apple_computer&quot;&gt;这是&#123;&#123;shopname&#125;&#125;&lt;&#x2F;view&gt;    &lt;&#x2F;view&gt;  &lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;bottom&quot;&gt;  &lt;view class&#x3D;&quot;bottom_picture1&quot;&gt;    &lt;view&gt;      &lt;image class&#x3D;&quot;server&quot; src&#x3D;&quot;..&#x2F;image&#x2F;icon-question.png&quot; mode&#x3D;&quot;widthFix&quot;&gt;&lt;&#x2F;image&gt;    &lt;&#x2F;view&gt;    &lt;view class&#x3D;&quot;bottom_text&quot;&gt;客服&lt;&#x2F;view&gt;  &lt;&#x2F;view&gt;  &lt;view class&#x3D;&quot;bottom_picture2&quot;&gt;    &lt;view&gt;      &lt;image class&#x3D;&quot;shop&quot; src&#x3D;&quot;..&#x2F;image&#x2F;icon-shop.png&quot; mode&#x3D;&quot;widthFix&quot;&gt;&lt;&#x2F;image&gt;      &lt;view class&#x3D;&quot;bottom_text&quot;&gt;商店&lt;&#x2F;view&gt;    &lt;&#x2F;view&gt;  &lt;&#x2F;view&gt;  &lt;view class&#x3D;&quot;last&quot;&gt;    &lt;button class&#x3D;&quot;button&quot;&gt;立即购买&lt;&#x2F;button&gt;  &lt;&#x2F;view&gt;&lt;&#x2F;view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h3><p>.picture{<br>  width: 100%;<br>}</p><p>.myswiper{<br>  width: 100%;<br>  height: 750rpx;<br>}</p><p>.parent{<br>  width: 100%;<br>  height: 250rpx;<br>  display: flex;<br>  flex-direction: column;<br>  /* background-color:blue; */<br>}</p><p>.color1{<br>  width: 100%;<br>  display: flex;<br>  flex-direction: row;<br>  /* background-color: yellow; */<br>  flex-grow: 1;<br>}</p><p>.color2{<br>  width: 100%;<br>  display: flex;<br>  flex-direction:column;<br>  /* background-color:green; */<br>  flex-grow: 2;<br>}</p><p>.text1{<br>  /* background-color: red; */<br>  padding-left: 25rpx;<br>  display: flex;<br>  flex-direction: column;<br>  align-items: flex-start;<br>  justify-content: center;<br>  flex-grow: 1;<br>}</p><p>.text2{<br>  /* background-color: blue; */<br>  display: flex;<br>  flex-direction: column;<br>  padding-right: 25rpx;<br>  align-items: flex-end;<br>  justify-content: center;<br>  flex-grow: 1;<br>}</p><p>.text3{<br>  /* background-color: blue; */<br>  display: flex;<br>  padding-left: 20rpx;<br>  flex-direction: column;<br>  justify-content: center;<br>  flex-grow: 1;<br>}</p><p>.text4{<br>  /* background-color: brown; */<br>  display: flex;<br>  padding-left: 20rpx;<br>  flex-direction: column;<br>  justify-content: center;<br>  flex-grow: 1;<br>}</p><p>.money{<br>  color: red;<br>  font-size: 40rpx;<br>  font-weight: bold;<br>}</p><p>.people{<br>  color:#DCDCDC;<br>  font-size: 25rpx;<br>}</p><p>.apple{<br>  font-size: 40rpx;<br>  font-weight: bold;<br>}</p><p>.apple_computer{<br>  color:#DCDCDC;<br>  font-size: 25rpx;<br>}</p><p>.bottom{<br>  position: fixed;<br>  bottom: 0;<br>  width: 100%;<br>  height: 100rpx;<br>  /* background:yellow; */<br>  display:flex;<br>  flex-direction: row;<br>}</p><p>.bottom_picture1{<br>  /* background-color: aqua; */<br>  padding-left: 14rpx;<br>  width: 13%;<br>  height: 100rpx;<br>  display: flex;<br>  flex-direction:column;<br>  align-items: center;<br>  justify-content: center;<br>}</p><p>.server{<br>  width: 55rpx;<br>}</p><p>.shop{<br>  width: 55rpx;<br>}</p><p>.bottom_picture2{<br>  /* background-color: rgb(71, 127, 190); */<br>  width: 13%;<br>  height: 100rpx;<br>  display: flex;<br>  flex-direction:column;<br>  align-items: center;<br>  justify-content: center;<br>}</p><p>.bottom_text{<br>  font-size: 28rpx;<br>}</p><p>.last{<br>  padding-left: 30rpx;<br>  display: flex;<br>  flex-direction: column;<br>  align-items: center;<br>  justify-content: center;<br>}</p><p>.button{<br>  width: 460rpx !important;<br>  background: #f12711;  /* fallback for old browsers <em>/<br>  background: -webkit-linear-gradient(to right, #f5af19, #f12711);  /</em> Chrome 10-25, Safari 5.1-6 <em>/<br>  background: linear-gradient(to right, #f5af19, #f12711); /</em> W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */</p><p>  border-radius: 140rpx;<br>  color: white !important;<br>  font-weight: normal;<br>  font-size: 14px;<br>}</p><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>Page({<br>  data:{<br>    price:200,<br>    shopname:’我们毕业了’<br>  },<br>  changeImg:function(e){<br>    console.log(e.detail.current)<br>    var currentIndex=e.detail.current<br>    if(currentIndex==0){<br>      this.setData({<br>        price:200,<br>        shopname:’我们毕业了’<br>      })<br>    }else if(currentIndex==1){<br>      this.setData({<br>        price:5700,<br>        shopname:’苹果电脑’<br>      })<br>    }else{<br>      this.setData({<br>        price:12000,<br>        shopname:’华为笔记本’<br>      })<br>    }<br>  }<br>})</p>]]></content>
      
      
      
        <tags>
            
            <tag> wx实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码的规则</title>
      <link href="/2021/04/09/%E7%BC%96%E7%A0%81%E7%9A%84%E8%A7%84%E5%88%99/"/>
      <url>/2021/04/09/%E7%BC%96%E7%A0%81%E7%9A%84%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="记事本的四种编码规则"><a href="#记事本的四种编码规则" class="headerlink" title="记事本的四种编码规则"></a>记事本的四种编码规则</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>在C语言程序中当调用记事本文件时，当里面含有汉字时可能会产生乱码，导致程序的运行失败，写这篇bolg的目的是为了记录一下记事本的四种编码区别</p><h3 id="2-getchar-函数来抓取字符"><a href="#2-getchar-函数来抓取字符" class="headerlink" title="2.getchar()函数来抓取字符"></a>2.getchar()函数来抓取字符</h3><p>当程序从文件中读字符时，如果遇到了文件末尾，就会得到 EOF，EOF 并不是一个字符。但是，从标准输入（就是你的终端）读字符的时候，不可能出现文件末尾的情况，所以终端提供了一个功能，就是当你按下 ctrl+z（Windows）/ ctrl+d（Linux）时，终端告诉程序“标准输入”到了文件末尾，此时你的程序 getchar 会得到 EOF(不一定是-1，目前在CB上是-1)<br><strong>注意：getchar是从缓存中读数据（getchar是以行为单位进行存取的），也就是说，你输入a，程序并不反映，只是把a存到缓存中，直到你输入结束，输了回车，程序才反映</strong></p><h2 id="ANSI编码"><a href="#ANSI编码" class="headerlink" title="ANSI编码"></a>ANSI编码</h2><ol><li>若为英文操作系统则为ASCII码<br> 每个字符用一个字节（8位）表示，最高位恒为0，剩下7位（2^7次方=128）。因为128个值就足够表示所有英文字符，数字字符，英文标点字符，和控制字符了。</li></ol><p><strong>2. 若为中文操作系统则为GBK码<br>    兼容ASCII码表示的字符以外，延伸0x80-0xff。用2个字节表示一个中文字符。解析的时候，如果第一个字节大于127，直接再往后读取一个字节，显示为对应的中文字符。（GBK码的字符集包含了简体和繁体）。</strong><br>3. 若为日文操作系统则为JIS码<br>    里面为日文字符</p><p><strong>所以在不同语种的操作系统下，打开同一个通过ANSI编码的txt，除了ASCII所表示的字符正常显示外，其他字符会有出现乱码的情况，因为解码和编码方式就是不一样的，如修改windows的默认语言为日语，即ANSI编码即为JIS编码</strong></p><h2 id="Unicode编码（把地球上所有的语言的符号，都用统一的字符集来表示）"><a href="#Unicode编码（把地球上所有的语言的符号，都用统一的字符集来表示）" class="headerlink" title="Unicode编码（把地球上所有的语言的符号，都用统一的字符集来表示）"></a>Unicode编码（把地球上所有的语言的符号，都用统一的字符集来表示）</h2><h3 id="UTF-8编码"><a href="#UTF-8编码" class="headerlink" title="UTF-8编码"></a>UTF-8编码</h3><ol><li><p>UTF8是一种变长编码，根据不同的Unicode码值采用不同的存储长度。</p></li><li><p>0xxxxxxx,如果是这样的01串,也就是以0开头后面是啥就不用管了XX代表任意bit.就表示把一个字节做为一个单元.就跟ASCII完全一样.<br> 110xxxxx 10xxxxxx.如果是这样的格式，以110开头则把两个字节当一个单元</p><p> 1110xxxx 10xxxxxx 10xxxxxx 如果是这种格式，以1110开头则是三个字节当一个单元.（正好x的个数是16个）</p></li><li><p>UTF-8的好处是在网络环境下，比较节约流量，毕竟网络里英文的数据还是最多的</p></li></ol><h3 id="UTF-16编码"><a href="#UTF-16编码" class="headerlink" title="UTF-16编码"></a>UTF-16编码</h3><ol><li><p>UTF-16就是Windows模式的编码模式(Windows里说的Unicode一般都是指这种编码），用2个字节表示任意字符</p></li><li><p>UTF-16分为大端序和小端序（就是字节序，主要是与硬件相关（处理器的架构），与编程语言无关）</p></li></ol><ul><li>Big-endian（大端序）：       数据的高位字节存放在地址的低端 低位字节存放在地址高端(按原来顺序存储)</li><li>Little-endian（小端序）：    数据的高位字节存放在地址的高端 低位字节存放在地址低端(颠倒顺序存储)</li></ul><p>##记事本中的BOM标签</p><ol><li><p>记事本要支持Unicode，就需要使用BOM标签</p></li><li><p>一段二进制编码，如何确定它是GBK还是BIG5还是UTF-16/UTF-8？记事本的做法是在TXT文件的最前面保存一个标签，如果记事本打开一个TXT，发现这个标签，就说明是unicode。标签叫BOM，如果是0xFF 0xFE，是UTF16LE，如果是0xFE 0xFF则UTF16BE，如果是0xEF 0xBB 0xBF，则是UTF-8。如果没有这三个东西，那么就是ANSI，使用操作系统的默认语言编码来解释。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序-轮播图</title>
      <link href="/2021/04/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
      <url>/2021/04/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序-轮播图"><a href="#微信小程序-轮播图" class="headerlink" title="微信小程序-轮播图"></a>微信小程序-轮播图</h2><h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><pre class="line-numbers language-none"><code class="language-none">&lt;view class&#x3D;&quot;test&quot;&gt;  &lt;image class&#x3D;&quot;picture&quot; src&#x3D;&quot;..&#x2F;image&#x2F;unity.jpeg&quot; mode&#x3D;&quot;widthFix&quot;&gt;  &lt;&#x2F;image&gt;  &lt;view&gt;    unity的游戏开发view  &lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;swiper class&#x3D;&quot;myswiper&quot; indicator-dots&#x3D;&quot;true&quot; autoplay&#x3D;&quot;true&quot; circular&#x3D;&quot;true&quot;&gt;  &lt;swiper-item&gt;    &lt;image src&#x3D;&quot;..&#x2F;image&#x2F;2020.jpg&quot; mode&#x3D;&quot;widthFix&quot;&gt;&lt;&#x2F;image&gt;  &lt;&#x2F;swiper-item&gt;  &lt;swiper-item&gt;    &lt;image src&#x3D;&quot;..&#x2F;image&#x2F;2020.jpg&quot; mode&#x3D;&quot;widthFix&quot;&gt;&lt;&#x2F;image&gt;  &lt;&#x2F;swiper-item&gt;  &lt;swiper-item&gt;    &lt;image src&#x3D;&quot;..&#x2F;image&#x2F;2020.jpg&quot; mode&#x3D;&quot;widthFix&quot;&gt;&lt;&#x2F;image&gt;  &lt;&#x2F;swiper-item&gt;&lt;&#x2F;swiper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="wxss"><a href="#wxss" class="headerlink" title="wxss"></a>wxss</h3><p>.test{<br>  text-align:center;<br>  font-size: 30rpx;<br>  text-decoration: underline;<br>  text-decoration-color: blue;</p><p>}</p><p>.picture{<br>   width: 90%;</p><p>}</p><p>.myswiper{<br>  height: 540rpx;<br>  text-align: center;<br>}<br>.myswiper swiper-item &gt;image{<br>  width: 98%;<br>}</p>]]></content>
      
      
      
        <tags>
            
            <tag> wx实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序-加法计算器</title>
      <link href="/2021/04/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%8A%A0%E6%B3%95%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2021/04/07/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%8A%A0%E6%B3%95%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序-加法计算器"><a href="#微信小程序-加法计算器" class="headerlink" title="微信小程序:加法计算器"></a>微信小程序:加法计算器</h2><h3 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h3><pre class="line-numbers language-none"><code class="language-none">&lt;view class&#x3D;&quot;head&quot;&gt;加法计算器&lt;&#x2F;view&gt;&lt;view class&#x3D;&quot;body&quot;&gt;  &lt;input class&#x3D;&quot;text1&quot; value&#x3D;&quot;&quot; placeholder&#x3D;&quot;请输入数据&quot; bindinput&#x3D;&quot;count1&quot;&#x2F;&gt;  &lt;view class&#x3D;&quot;text2&quot;&gt;+&lt;&#x2F;view&gt;  &lt;input class&#x3D;&quot;text1&quot; value&#x3D;&quot;&quot; placeholder&#x3D;&quot;请输入数据&quot; bindinput&#x3D;&quot;count2&quot;&#x2F;&gt;  &lt;view class&#x3D;&quot;text2&quot;&gt;&#x3D;&lt;&#x2F;view&gt;  &lt;view class&#x3D;&quot;text1&quot;&gt;&#123;&#123;a&#125;&#125;&lt;&#x2F;view&gt;&lt;&#x2F;view&gt;&lt;view&gt;  &lt;button class&#x3D;&quot;button&quot; bindtap&#x3D;&quot;button1&quot;&gt;等于&lt;&#x2F;button&gt;&lt;&#x2F;view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="wsss"><a href="#wsss" class="headerlink" title="wsss"></a>wsss</h3><pre class="line-numbers language-none"><code class="language-none">.head&#123;  text-align: center;  letter-spacing: 10rpx;  font-size: 80rpx;  color: deepskyblue;&#125;.body&#123;  margin-top: 80rpx;  width: 100%;  display: flex;  flex-direction:&quot;row&quot;;  align-items: center;&#125;.text1&#123;  width: 200rpx;  height: 53rpx;  border: 4rpx solid green;  margin-left: 15rpx; &#x2F;*外边距*&#x2F;  font-size: 36rpx;  padding-left: 14rpx; &#x2F;*内边距*&#x2F;  border-radius: 10rpx; &#x2F;*设置圆角*&#x2F;  color: aqua;&#125;.text2&#123;  font-size: 36rpx;  margin-left: 10rpx;  font-weight: bolder;&#125;.button&#123;  margin-top: 50rpx;  width: 200rpx !important;  color: black !important;  background-color: yellow;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><pre class="line-numbers language-none"><code class="language-none">var b;var c;Page(&#123;  data:(&#123;    a:Number.parseFloat(0)  &#125;),  count1(e)&#123; &#x2F;*带参是把控件的值传进来 *&#x2F;    console.log(e)    b &#x3D; e.detail.value    b &#x3D; Number.parseFloat(b)  &#125;,  count2(e)&#123; &#x2F;*带参是把控件的值传进来 *&#x2F;    console.log(e)    c&#x3D;e.detail.value    c &#x3D; Number.parseFloat(c)  &#125;,  button1(e)&#123;    let d&#x3D;Number.parseFloat(this.data.a)    d&#x3D;b+c    this.setData(&#123;      a:d    &#125;)    console.warn(d)  &#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> wx实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轰炸代码</title>
      <link href="/2021/03/08/%E8%BD%B0%E7%82%B8%E4%BB%A3%E7%A0%81/"/>
      <url>/2021/03/08/%E8%BD%B0%E7%82%B8%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言实现QQ的代码轰炸"><a href="#C语言实现QQ的代码轰炸" class="headerlink" title="C语言实现QQ的代码轰炸"></a>C语言实现QQ的代码轰炸</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><p>通过使用Windows的句柄来实现对桌面窗口的控制，获取QQ界面发送的句柄，然后通过虚拟键盘来控制，来实现键盘控制QQ消息的发送</p><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;Windows.h&gt;int main()&#123;    int a&#x3D;0,i,j;    char name[100];    char sentence[100];    printf(&quot;Window of name:&quot;);    scanf(&quot;%s&quot;,name);    HWND h &#x3D; FindWindow(0,name);    printf(&quot;The once:&quot;);    scanf(&quot;%d&quot;,&amp;a);    printf(&quot;The Sentence is:&quot;);    scanf(&quot;%s&quot;,sentence);    for(i&#x3D;0;i&lt;a;i++)    &#123;        for(j&#x3D;0;j&lt;strlen(sentence);j++)        &#123;            SendMessage(h,WM_CHAR,sentence[j]&amp;0xff,0);        &#125;        SendMessage(h,WM_KEYDOWN,VK_RETURN,0);        SendMessage(h,WM_KEYUP,VK_RETURN,0);    &#125;    printf(&quot;\n\nfinish&quot;);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h3><ul><li>首先打开QQ打开想要轰炸的代码窗口<br><a href="https://imgtu.com/i/6lbHZ4"><img src="https://s3.ax1x.com/2021/03/08/6lbHZ4.jpg" alt="6lbHZ4.jpg"></a></li><li>输入窗体名称（将窗口最小化后把鼠标放在最小化窗口上）</li><li>输入轰炸次数</li><li>输入轰炸内容<br><a href="https://imgtu.com/i/6lqkFA"><img src="https://s3.ax1x.com/2021/03/08/6lqkFA.jpg" alt="6lqkFA.jpg"></a></li><li>确保要轰炸的窗口保持在黑窗口下</li><li>按Enter键开始轰炸</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言寒假复习(1)</title>
      <link href="/2020/12/16/C%E8%AF%AD%E8%A8%80%E5%AF%92%E5%81%87%E5%A4%8D%E4%B9%A0-1/"/>
      <url>/2020/12/16/C%E8%AF%AD%E8%A8%80%E5%AF%92%E5%81%87%E5%A4%8D%E4%B9%A0-1/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言寒假复习-1"><a href="#C语言寒假复习-1" class="headerlink" title="C语言寒假复习(1)"></a>C语言寒假复习(1)</h2><h3 id="C语言基础代码（Hello-world）"><a href="#C语言基础代码（Hello-world）" class="headerlink" title="C语言基础代码（Hello world）"></a>C语言基础代码（Hello world）</h3><p><strong>使用记事本来完成，在Linux环境下编译</strong><br>#include &lt;stdio.h&gt;<br>int main(void){<br>    printf(“Hello world”);<br>    return 0;<br>}</p><p><strong>错误的将头文件stdio.h写成了studio.h，要多练，不练必废</strong><br>成功生成<br><img src="https://s3.ax1x.com/2020/12/17/rGrlVK.jpg" alt="Hello world" title="Hello world"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题-icalm的更换</title>
      <link href="/2020/11/24/%E4%B8%BB%E9%A2%98-icalm%E7%9A%84%E6%9B%B4%E6%8D%A2/"/>
      <url>/2020/11/24/%E4%B8%BB%E9%A2%98-icalm%E7%9A%84%E6%9B%B4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-更换主题的代码储存"><a href="#1-更换主题的代码储存" class="headerlink" title="1.更换主题的代码储存"></a>1.更换主题的代码储存</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;D:\blog中的themes中存放blog的主题，在themes的文件夹中有一个本身hexo默认自带的丑主题，现在自己下载了一个叫做hexo-theme-icalm的主题的文件夹也是放在这里，现在对这个主题进行修改。</p><h3 id="2-主题的个性化设置"><a href="#2-主题的个性化设置" class="headerlink" title="2.主题的个性化设置"></a>2.主题的个性化设置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;打开hexo-theme-icalm文件夹中有 _ config.yml的代码，最后使用win+r，在cmd中打开，如果有下载node.js可以直接用记事本打开，进入后</p><pre class="line-numbers language-none"><code class="language-none">#Links on sidebarmenu:  Home: &#x2F;  Archive: &#x2F;archives&#x2F;  #Tags: &#x2F;tags&#x2F;  #Categories: &#x2F;categories&#x2F;  #About: &#x2F;about&#x2F;#Pictures shown on the sidebar#Use the absolute URL after generating#avatar: &#x2F;assets&#x2F;tree_small.png#sidebar_background: &#x2F;assets&#x2F;header.pngrss: &#x2F;atom.xml#Contentexcerpt_link: Read On »#Will be shown on the bottom.##To add new icon, just copy .svg to source&#x2F;assets&#x2F; and add entries below.media:  #github: https:&#x2F;&#x2F;github.com&#x2F;nameoverflow  #facebook: https:&#x2F;&#x2F;www.facebook.com&#x2F;profile.php?id&#x3D;100004252391322source_han_font: true#Disqus settingsdisqus:  #&#39;disabled&#39; | &#39;all&#39; | &#39;post&#39;  enable: disabled  #Shortname of your disqus website.  #See disqus admin  shortname:#Miscellaneousfavicon:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里#后面都是有一个空格，为了md的可读性我就删了</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;第一行中的menu是文件格式的菜单一共有5个功能，一般现在我能使用的就是前面三个和一个about，但是about还是不太懂弄所以只是显示按钮，如果要把这句话启用，则去除前面的# 就可以了<strong>注意是#和之后的一个空格都需要去掉</strong></p><p>如果需要设置头像可以看到**#avatar: /assets/tree_small.png**这一行，在同路径下可以看到一个叫source的文件夹，在这个文件夹中可以看见有一个assets的文件夹，如HTML一样，把需要的头像改名放在里面，再把这句话启用，把后面照片文件名改成你的，即可以发现照片引用完毕</p><p>还有一个**#sidebar_background: /assets/header.png**大胆的猜测这个是照片后面的背景，但是我觉得没有的话也是很好看就没有启用这个了</p><p><strong>引用样式tags</strong><br>    在每一个blog中都有一个tags标记，这个主题也是一样可以使用tags标记进行使用，在初期没有弄明白tags的使用方式所以这个功能一直没有什么用。<br>启用方式<br>    用win+r，cmd打开控制台窗口，进入到blog这个文件夹中运行</p><pre class="line-numbers language-none"><code class="language-none">hexo n page &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开这个生成的文件夹，在里面加入type: “tags”<br>加入后是这样的</p><pre class="line-numbers language-none"><code class="language-none">title: tagsdate: 2021-04-14 18:55:02type: &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此文件的tags标签即可以正常引用了</p><p>后面的内容待发掘</p><h4 id="待更"><a href="#待更" class="headerlink" title="待更"></a>待更</h4><h3 id="3-需要设置博客的名字与引用主题"><a href="#3-需要设置博客的名字与引用主题" class="headerlink" title="3.需要设置博客的名字与引用主题"></a>3.需要设置博客的名字与引用主题</h3><p>回到blog文件夹中，里面有一个名叫 _ config.yml的文件，一样的方式打开后</p><ul><li>在title中更改你的blog名字</li><li>在subtitle添加你的副标题</li><li>把language改为zh-‘CN’</li><li>找到后面的theme改为你刚刚弄得主题的文件夹名</li></ul><p>至此blog的初始化完成<br><strong>后续功能待更</strong></p><p><strong>更新日期2020/12/26：完成对代码块的样式更改</strong><br><strong>更新日期2021/4/14：完成对tags样式的引用的补充</strong></p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown笔记</title>
      <link href="/2020/11/23/markdown%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/11/23/markdown%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown使用规范"><a href="#markdown使用规范" class="headerlink" title="markdown使用规范"></a>markdown使用规范</h1><p><strong>makedown的标记都为英文状态</strong></p><h2 id="1-对标题的放大缩小"><a href="#1-对标题的放大缩小" class="headerlink" title="1.对标题的放大缩小"></a>1.对标题的放大缩小</h2><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>中间注意是有空格的</p><h2 id="2-加粗与斜体"><a href="#2-加粗与斜体" class="headerlink" title="2.加粗与斜体"></a>2.加粗与斜体</h2><p><strong>加粗</strong><br><em>斜体</em><br><strong><em>加粗且斜体</em></strong><br>注意这里中间不能有空格</p><h2 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3.删除线"></a>3.删除线</h2><p><del>删除线</del><br>注意这里中间不能有空格</p><h2 id="4-引用内容"><a href="#4-引用内容" class="headerlink" title="4. 引用内容"></a>4. 引用内容</h2><blockquote><p>很好</p><blockquote><blockquote><p>这个引用需要多个&gt;来弄只有一级没什么效果</p></blockquote></blockquote></blockquote><h2 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h2><hr><p>三个或三个以上的</p><h2 id="6-插入图片"><a href="#6-插入图片" class="headerlink" title="6.插入图片"></a>6.插入图片</h2><p><img src="%E5%9B%BE%E7%89%87" alt="图片下面的文字" title="鼠标放在图片上显示的文字"></p><p><img src="https://s3.ax1x.com/2020/11/23/DG42sx.jpg" alt="hello" title="企鹅"></p><p>[]里是显示文字的这里不知道为什么显示不出来</p><h2 id="7-插入超链接"><a href="#7-插入超链接" class="headerlink" title="7.插入超链接"></a>7.插入超链接</h2><p><strong>不能跳转页面打开</strong><br>[超链接名字] (超链接地址) 中间空格去掉<br><a href="https://www.jianshu.com/p/191d1e21f7ed/">简书-markdown</a></p><p><strong>可以跳转页面打开</strong><br><a href="https://www.jianshu.com/u/1f5ac0cf6a8b" target="_blank">简书</a></p><h2 id="8-无序列表"><a href="#8-无序列表" class="headerlink" title="8.无序列表"></a>8.无序列表</h2><ul><li><ul><li><ul><li>三种样式</li></ul></li></ul></li></ul><p>分别是- + * 后接空格来处理的</p><h2 id="9-有序列表"><a href="#9-有序列表" class="headerlink" title="9.有序列表"></a>9.有序列表</h2><p>语法：数字加.  按回车自动生成后面的部分，也可以在.后加一个空格字体会后置，不需要继续有序列表的的话在后面不加内容直接回车即可<br>1.A<br>2.B</p><ol><li>A</li><li>B</li></ol><h2 id="10-列表嵌套"><a href="#10-列表嵌套" class="headerlink" title="10.列表嵌套"></a>10.列表嵌套</h2><p>上一级和下一级之间敲三个空格即可</p><ol><li>A<ul><li>1<ul><li>a</li></ul></li></ul></li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>姓名</th><th align="center">学号</th><th align="right">年级</th></tr></thead><tbody><tr><td>张三</td><td align="center">0001</td><td align="right">2019</td></tr><tr><td>李四</td><td align="center">0002</td><td align="right">2020</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-none"><code class="language-none">三个~~~上下框选住代码即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;flowst&#x3D;&gt;start: startop&#x3D;&gt;operation: My Operationcond&#x3D;&gt;condition: Yes or No?e&#x3D;&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&#96;&#96;&#96;注意cond()里面只能是小写,大写就弄不成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> startop<span class="token operator">=></span>operation<span class="token operator">:</span> My Operationcond<span class="token operator">=></span>condition<span class="token operator">:</span> Yes or No<span class="token operator">?</span>e<span class="token operator">=></span>endst<span class="token operator">-</span><span class="token operator">></span>op<span class="token operator">-</span><span class="token operator">></span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>e<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><pre><code>&amp;nbsp；表示空格，注意分号为英文状态下</code></pre><p><strong>最后一次更新日期2020/12/26：更新内容完成对后面内容的补充</strong><br><strong>完结</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
